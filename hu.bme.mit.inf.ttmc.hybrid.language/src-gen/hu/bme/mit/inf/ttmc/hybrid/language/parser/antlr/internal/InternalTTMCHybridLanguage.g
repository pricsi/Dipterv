/*
 * generated by Xtext
 */
grammar InternalTTMCHybridLanguage;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package hu.bme.mit.inf.ttmc.hybrid.language.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package hu.bme.mit.inf.ttmc.hybrid.language.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import hu.bme.mit.inf.ttmc.hybrid.language.services.TTMCHybridLanguageGrammarAccess;

}

@parser::members {

 	private TTMCHybridLanguageGrammarAccess grammarAccess;
 	
    public InternalTTMCHybridLanguageParser(TokenStream input, TTMCHybridLanguageGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "HybridSpecification";	
   	}
   	
   	@Override
   	protected TTMCHybridLanguageGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleHybridSpecification
entryRuleHybridSpecification returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getHybridSpecificationRule()); }
	 iv_ruleHybridSpecification=ruleHybridSpecification 
	 { $current=$iv_ruleHybridSpecification.current; } 
	 EOF 
;

// Rule HybridSpecification
ruleHybridSpecification returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='specification' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getHybridSpecificationAccess().getSpecificationKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getHybridSpecificationAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getHybridSpecificationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getHybridSpecificationAccess().getLeftParenthesisKeyword_2_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getHybridSpecificationAccess().getParameterDeclarationsParameterDeclarationParserRuleCall_2_1_0_0()); 
	    }
		lv_parameterDeclarations_3_0=ruleParameterDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHybridSpecificationRule());
	        }
       		add(
       			$current, 
       			"parameterDeclarations",
        		lv_parameterDeclarations_3_0, 
        		"ParameterDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getHybridSpecificationAccess().getCommaKeyword_2_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getHybridSpecificationAccess().getParameterDeclarationsParameterDeclarationParserRuleCall_2_1_1_1_0()); 
	    }
		lv_parameterDeclarations_5_0=ruleParameterDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHybridSpecificationRule());
	        }
       		add(
       			$current, 
       			"parameterDeclarations",
        		lv_parameterDeclarations_5_0, 
        		"ParameterDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getHybridSpecificationAccess().getRightParenthesisKeyword_2_2());
    }
)?	otherlv_7='{' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getHybridSpecificationAccess().getLeftCurlyBracketKeyword_3());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getHybridSpecificationAccess().getTypeDeclarationsTypeDeclarationParserRuleCall_4_0_0()); 
	    }
		lv_typeDeclarations_8_0=ruleTypeDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHybridSpecificationRule());
	        }
       		add(
       			$current, 
       			"typeDeclarations",
        		lv_typeDeclarations_8_0, 
        		"TypeDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getHybridSpecificationAccess().getFunctionDeclarationsFunctionDeclarationParserRuleCall_4_1_0()); 
	    }
		lv_functionDeclarations_9_0=ruleFunctionDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHybridSpecificationRule());
	        }
       		add(
       			$current, 
       			"functionDeclarations",
        		lv_functionDeclarations_9_0, 
        		"FunctionDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getHybridSpecificationAccess().getConstantDeclarationsConstantDeclarationParserRuleCall_4_2_0()); 
	    }
		lv_constantDeclarations_10_0=ruleConstantDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHybridSpecificationRule());
	        }
       		add(
       			$current, 
       			"constantDeclarations",
        		lv_constantDeclarations_10_0, 
        		"ConstantDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getHybridSpecificationAccess().getBasicConstraintDefinitionsBasicConstraintDefinitionParserRuleCall_4_3_0()); 
	    }
		lv_basicConstraintDefinitions_11_0=ruleBasicConstraintDefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHybridSpecificationRule());
	        }
       		add(
       			$current, 
       			"basicConstraintDefinitions",
        		lv_basicConstraintDefinitions_11_0, 
        		"BasicConstraintDefinition");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getHybridSpecificationAccess().getHybridAutomatonDeclarationsHybridAutomatonDeclarationParserRuleCall_4_4_0()); 
	    }
		lv_hybridAutomatonDeclarations_12_0=ruleHybridAutomatonDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHybridSpecificationRule());
	        }
       		add(
       			$current, 
       			"hybridAutomatonDeclarations",
        		lv_hybridAutomatonDeclarations_12_0, 
        		"HybridAutomatonDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getHybridSpecificationAccess().getPropertyDeclarationsPropertyDeclarationParserRuleCall_4_5_0()); 
	    }
		lv_propertyDeclarations_13_0=rulePropertyDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHybridSpecificationRule());
	        }
       		add(
       			$current, 
       			"propertyDeclarations",
        		lv_propertyDeclarations_13_0, 
        		"PropertyDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_14='}' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getHybridSpecificationAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleTypeDefinition
entryRuleTypeDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeDefinitionRule()); }
	 iv_ruleTypeDefinition=ruleTypeDefinition 
	 { $current=$iv_ruleTypeDefinition.current; } 
	 EOF 
;

// Rule TypeDefinition
ruleTypeDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTypeDefinitionAccess().getNaturalTypeDefinitionParserRuleCall_0()); 
    }
    this_NaturalTypeDefinition_0=ruleNaturalTypeDefinition
    { 
        $current = $this_NaturalTypeDefinition_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeDefinitionAccess().getIntegerTypeDefinitionParserRuleCall_1()); 
    }
    this_IntegerTypeDefinition_1=ruleIntegerTypeDefinition
    { 
        $current = $this_IntegerTypeDefinition_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeDefinitionAccess().getBooleanTypeDefinitionParserRuleCall_2()); 
    }
    this_BooleanTypeDefinition_2=ruleBooleanTypeDefinition
    { 
        $current = $this_BooleanTypeDefinition_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeDefinitionAccess().getRealTypeDefinitionParserRuleCall_3()); 
    }
    this_RealTypeDefinition_3=ruleRealTypeDefinition
    { 
        $current = $this_RealTypeDefinition_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeDefinitionAccess().getArrayTypeDefinitionParserRuleCall_4()); 
    }
    this_ArrayTypeDefinition_4=ruleArrayTypeDefinition
    { 
        $current = $this_ArrayTypeDefinition_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeDefinitionAccess().getEnumerationTypeDefinitionParserRuleCall_5()); 
    }
    this_EnumerationTypeDefinition_5=ruleEnumerationTypeDefinition
    { 
        $current = $this_EnumerationTypeDefinition_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeDefinitionAccess().getRecordTypeDefinitionParserRuleCall_6()); 
    }
    this_RecordTypeDefinition_6=ruleRecordTypeDefinition
    { 
        $current = $this_RecordTypeDefinition_6.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeDefinitionAccess().getTupleTypeDefinitionParserRuleCall_7()); 
    }
    this_TupleTypeDefinition_7=ruleTupleTypeDefinition
    { 
        $current = $this_TupleTypeDefinition_7.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeDefinitionAccess().getSubrangeTypeDefinitionParserRuleCall_8()); 
    }
    this_SubrangeTypeDefinition_8=ruleSubrangeTypeDefinition
    { 
        $current = $this_SubrangeTypeDefinition_8.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeDefinitionAccess().getSubTypeDefinitionParserRuleCall_9()); 
    }
    this_SubTypeDefinition_9=ruleSubTypeDefinition
    { 
        $current = $this_SubTypeDefinition_9.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeDefinitionAccess().getFunctionTypeDefinitionParserRuleCall_10()); 
    }
    this_FunctionTypeDefinition_10=ruleFunctionTypeDefinition
    { 
        $current = $this_FunctionTypeDefinition_10.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeDefinitionAccess().getClockTypeDefinitionParserRuleCall_11()); 
    }
    this_ClockTypeDefinition_11=ruleClockTypeDefinition
    { 
        $current = $this_ClockTypeDefinition_11.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleClockTypeDefinition
entryRuleClockTypeDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClockTypeDefinitionRule()); }
	 iv_ruleClockTypeDefinition=ruleClockTypeDefinition 
	 { $current=$iv_ruleClockTypeDefinition.current; } 
	 EOF 
;

// Rule ClockTypeDefinition
ruleClockTypeDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getClockTypeDefinitionAccess().getClockTypeDefinitionAction_0(),
            $current);
    }
)	otherlv_1='clock' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getClockTypeDefinitionAccess().getClockKeyword_1());
    }
)
;





// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimaryExpressionRule()); }
	 iv_rulePrimaryExpression=rulePrimaryExpression 
	 { $current=$iv_rulePrimaryExpression.current; } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getLiteralExpressionParserRuleCall_0()); 
    }
    this_LiteralExpression_0=ruleLiteralExpression
    { 
        $current = $this_LiteralExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getReferenceExpressionParserRuleCall_1()); 
    }
    this_ReferenceExpression_1=ruleReferenceExpression
    { 
        $current = $this_ReferenceExpression_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getLocationReferenceExpressionParserRuleCall_2()); 
    }
    this_LocationReferenceExpression_2=ruleLocationReferenceExpression
    { 
        $current = $this_LocationReferenceExpression_2.current; 
        afterParserOrEnumRuleCall();
    }

    |(	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_3_0());
    }

    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getExpressionParserRuleCall_3_1()); 
    }
    this_Expression_4=ruleExpression
    { 
        $current = $this_Expression_4.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_3_2());
    }
))
;





// Entry rule entryRuleLocationReferenceExpression
entryRuleLocationReferenceExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLocationReferenceExpressionRule()); }
	 iv_ruleLocationReferenceExpression=ruleLocationReferenceExpression 
	 { $current=$iv_ruleLocationReferenceExpression.current; } 
	 EOF 
;

// Rule LocationReferenceExpression
ruleLocationReferenceExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='@' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLocationReferenceExpressionAccess().getCommercialAtKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getLocationReferenceExpressionRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getLocationReferenceExpressionAccess().getLocationLocationCrossReference_1_0()); 
	}

)
))
;





// Entry rule entryRuleSignumExpression
entryRuleSignumExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSignumExpressionRule()); }
	 iv_ruleSignumExpression=ruleSignumExpression 
	 { $current=$iv_ruleSignumExpression.current; } 
	 EOF 
;

// Rule SignumExpression
ruleSignumExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSignumExpressionAccess().getUnaryMinusExpressionAction_0_0(),
            $current);
    }
)((	'-' 
)=>	otherlv_1='-' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSignumExpressionAccess().getHyphenMinusKeyword_0_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSignumExpressionAccess().getOperandSignumExpressionParserRuleCall_0_2_0()); 
	    }
		lv_operand_2_0=ruleSignumExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSignumExpressionRule());
	        }
       		set(
       			$current, 
       			"operand",
        		lv_operand_2_0, 
        		"SignumExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSignumExpressionAccess().getUnaryPlusExpressionAction_1_0(),
            $current);
    }
)((	'+' 
)=>	otherlv_4='+' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSignumExpressionAccess().getPlusSignKeyword_1_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSignumExpressionAccess().getOperandSignumExpressionParserRuleCall_1_2_0()); 
	    }
		lv_operand_5_0=ruleSignumExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSignumExpressionRule());
	        }
       		set(
       			$current, 
       			"operand",
        		lv_operand_5_0, 
        		"SignumExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSignumExpressionAccess().getDotExpressionAction_2_0(),
            $current);
    }
)((	'd' 
)=>	otherlv_7='d' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getSignumExpressionAccess().getDKeyword_2_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSignumExpressionAccess().getOperandSignumExpressionParserRuleCall_2_2_0()); 
	    }
		lv_operand_8_0=ruleSignumExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSignumExpressionRule());
	        }
       		set(
       			$current, 
       			"operand",
        		lv_operand_8_0, 
        		"SignumExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |
    { 
        newCompositeNode(grammarAccess.getSignumExpressionAccess().getAccessExpressionParserRuleCall_3()); 
    }
    this_AccessExpression_9=ruleAccessExpression
    { 
        $current = $this_AccessExpression_9.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleHybridAutomatonDeclaration
entryRuleHybridAutomatonDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getHybridAutomatonDeclarationRule()); }
	 iv_ruleHybridAutomatonDeclaration=ruleHybridAutomatonDeclaration 
	 { $current=$iv_ruleHybridAutomatonDeclaration.current; } 
	 EOF 
;

// Rule HybridAutomatonDeclaration
ruleHybridAutomatonDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='automaton' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getHybridAutomatonDeclarationAccess().getAutomatonKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getHybridAutomatonDeclarationAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getHybridAutomatonDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getHybridAutomatonDeclarationAccess().getLeftParenthesisKeyword_2_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getHybridAutomatonDeclarationAccess().getParameterDeclarationsParameterDeclarationParserRuleCall_2_1_0_0()); 
	    }
		lv_parameterDeclarations_3_0=ruleParameterDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHybridAutomatonDeclarationRule());
	        }
       		add(
       			$current, 
       			"parameterDeclarations",
        		lv_parameterDeclarations_3_0, 
        		"ParameterDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getHybridAutomatonDeclarationAccess().getCommaKeyword_2_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getHybridAutomatonDeclarationAccess().getParameterDeclarationsParameterDeclarationParserRuleCall_2_1_1_1_0()); 
	    }
		lv_parameterDeclarations_5_0=ruleParameterDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHybridAutomatonDeclarationRule());
	        }
       		add(
       			$current, 
       			"parameterDeclarations",
        		lv_parameterDeclarations_5_0, 
        		"ParameterDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getHybridAutomatonDeclarationAccess().getRightParenthesisKeyword_2_2());
    }
)?	otherlv_7=':=' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getHybridAutomatonDeclarationAccess().getColonEqualsSignKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getHybridAutomatonDeclarationAccess().getHybridAutomatonHybridAutomatonParserRuleCall_4_0()); 
	    }
		lv_hybridAutomaton_8_0=ruleHybridAutomaton		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHybridAutomatonDeclarationRule());
	        }
       		set(
       			$current, 
       			"hybridAutomaton",
        		lv_hybridAutomaton_8_0, 
        		"HybridAutomaton");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleHybridAutomaton
entryRuleHybridAutomaton returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getHybridAutomatonRule()); }
	 iv_ruleHybridAutomaton=ruleHybridAutomaton 
	 { $current=$iv_ruleHybridAutomaton.current; } 
	 EOF 
;

// Rule HybridAutomaton
ruleHybridAutomaton returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getHybridAutomatonAccess().getHybridAutomatonDefinitionParserRuleCall()); 
    }
    this_HybridAutomatonDefinition_0=ruleHybridAutomatonDefinition
    { 
        $current = $this_HybridAutomatonDefinition_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleHybridAutomatonDefinition
entryRuleHybridAutomatonDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getHybridAutomatonDefinitionRule()); }
	 iv_ruleHybridAutomatonDefinition=ruleHybridAutomatonDefinition 
	 { $current=$iv_ruleHybridAutomatonDefinition.current; } 
	 EOF 
;

// Rule HybridAutomatonDefinition
ruleHybridAutomatonDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getHybridAutomatonDefinitionAccess().getHybridAutomatonDefinitionAction_0(),
            $current);
    }
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getHybridAutomatonDefinitionAccess().getLeftCurlyBracketKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getHybridAutomatonDefinitionAccess().getVariableDeclarationsVariableDeclarationParserRuleCall_2_0_0()); 
	    }
		lv_variableDeclarations_2_0=ruleVariableDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHybridAutomatonDefinitionRule());
	        }
       		add(
       			$current, 
       			"variableDeclarations",
        		lv_variableDeclarations_2_0, 
        		"VariableDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getHybridAutomatonDefinitionAccess().getLocationsLocationParserRuleCall_2_1_0()); 
	    }
		lv_locations_3_0=ruleLocation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHybridAutomatonDefinitionRule());
	        }
       		add(
       			$current, 
       			"locations",
        		lv_locations_3_0, 
        		"Location");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getHybridAutomatonDefinitionAccess().getTransitionsTransitionParserRuleCall_2_2_0()); 
	    }
		lv_transitions_4_0=ruleTransition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHybridAutomatonDefinitionRule());
	        }
       		add(
       			$current, 
       			"transitions",
        		lv_transitions_4_0, 
        		"Transition");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getHybridAutomatonDefinitionAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleVariableDeclaration
entryRuleVariableDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableDeclarationRule()); }
	 iv_ruleVariableDeclaration=ruleVariableDeclaration 
	 { $current=$iv_ruleVariableDeclaration.current; } 
	 EOF 
;

// Rule VariableDeclaration
ruleVariableDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getVariableDeclarationAccess().getGlobalVariableDeclarationParserRuleCall_0()); 
    }
    this_GlobalVariableDeclaration_0=ruleGlobalVariableDeclaration
    { 
        $current = $this_GlobalVariableDeclaration_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getVariableDeclarationAccess().getLocalVariableDeclarationParserRuleCall_1()); 
    }
    this_LocalVariableDeclaration_1=ruleLocalVariableDeclaration
    { 
        $current = $this_LocalVariableDeclaration_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleGlobalVariableDeclaration
entryRuleGlobalVariableDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGlobalVariableDeclarationRule()); }
	 iv_ruleGlobalVariableDeclaration=ruleGlobalVariableDeclaration 
	 { $current=$iv_ruleGlobalVariableDeclaration.current; } 
	 EOF 
;

// Rule GlobalVariableDeclaration
ruleGlobalVariableDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='global' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getGlobalVariableDeclarationAccess().getGlobalKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getGlobalVariableDeclarationAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGlobalVariableDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getGlobalVariableDeclarationAccess().getColonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGlobalVariableDeclarationAccess().getTypeTypeParserRuleCall_3_0()); 
	    }
		lv_type_3_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGlobalVariableDeclarationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleLocalVariableDeclaration
entryRuleLocalVariableDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLocalVariableDeclarationRule()); }
	 iv_ruleLocalVariableDeclaration=ruleLocalVariableDeclaration 
	 { $current=$iv_ruleLocalVariableDeclaration.current; } 
	 EOF 
;

// Rule LocalVariableDeclaration
ruleLocalVariableDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='local' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLocalVariableDeclarationAccess().getLocalKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getLocalVariableDeclarationAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLocalVariableDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getLocalVariableDeclarationAccess().getColonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLocalVariableDeclarationAccess().getTypeTypeParserRuleCall_3_0()); 
	    }
		lv_type_3_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocalVariableDeclarationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleLocation
entryRuleLocation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLocationRule()); }
	 iv_ruleLocation=ruleLocation 
	 { $current=$iv_ruleLocation.current; } 
	 EOF 
;

// Rule Location
ruleLocation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='location' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLocationAccess().getLocationKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getLocationAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLocationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getLocationAccess().getLeftCurlyBracketKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLocationAccess().getConditionsConditionParserRuleCall_2_1_0()); 
	    }
		lv_conditions_3_0=ruleCondition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocationRule());
	        }
       		add(
       			$current, 
       			"conditions",
        		lv_conditions_3_0, 
        		"Condition");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getLocationAccess().getRightCurlyBracketKeyword_2_2());
    }
)?)
;





// Entry rule entryRuleTransition
entryRuleTransition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTransitionRule()); }
	 iv_ruleTransition=ruleTransition 
	 { $current=$iv_ruleTransition.current; } 
	 EOF 
;

// Rule Transition
ruleTransition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='transition' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTransitionAccess().getTransitionKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTransitionRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getTransitionAccess().getSourceLocationCrossReference_1_0()); 
	}

)
)	otherlv_2='to' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTransitionAccess().getToKeyword_2());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTransitionRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getTransitionAccess().getTargetLocationCrossReference_3_0()); 
	}

)
)(	otherlv_4='(' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTransitionAccess().getLeftParenthesisKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTransitionAccess().getParameterDeclarationsParameterDeclarationParserRuleCall_4_1_0()); 
	    }
		lv_parameterDeclarations_5_0=ruleParameterDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransitionRule());
	        }
       		add(
       			$current, 
       			"parameterDeclarations",
        		lv_parameterDeclarations_5_0, 
        		"ParameterDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_6=',' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getTransitionAccess().getCommaKeyword_4_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTransitionAccess().getParameterDeclarationsParameterDeclarationParserRuleCall_4_2_1_0()); 
	    }
		lv_parameterDeclarations_7_0=ruleParameterDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransitionRule());
	        }
       		add(
       			$current, 
       			"parameterDeclarations",
        		lv_parameterDeclarations_7_0, 
        		"ParameterDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_8=')' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getTransitionAccess().getRightParenthesisKeyword_4_3());
    }
)?(	otherlv_9='[' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getTransitionAccess().getLeftSquareBracketKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTransitionAccess().getGuardsExpressionParserRuleCall_5_1_0()); 
	    }
		lv_guards_10_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransitionRule());
	        }
       		add(
       			$current, 
       			"guards",
        		lv_guards_10_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_11=',' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getTransitionAccess().getCommaKeyword_5_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTransitionAccess().getGuardsExpressionParserRuleCall_5_2_1_0()); 
	    }
		lv_guards_12_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransitionRule());
	        }
       		add(
       			$current, 
       			"guards",
        		lv_guards_12_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_13=']' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getTransitionAccess().getRightSquareBracketKeyword_5_3());
    }
)?(	otherlv_14='{' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getTransitionAccess().getLeftCurlyBracketKeyword_6_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTransitionAccess().getAssignmentsAssignmentParserRuleCall_6_1_0()); 
	    }
		lv_assignments_15_0=ruleAssignment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransitionRule());
	        }
       		add(
       			$current, 
       			"assignments",
        		lv_assignments_15_0, 
        		"Assignment");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_16=',' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getTransitionAccess().getCommaKeyword_6_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTransitionAccess().getAssignmentsAssignmentParserRuleCall_6_2_1_0()); 
	    }
		lv_assignments_17_0=ruleAssignment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransitionRule());
	        }
       		add(
       			$current, 
       			"assignments",
        		lv_assignments_17_0, 
        		"Assignment");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_18='}' 
    {
    	newLeafNode(otherlv_18, grammarAccess.getTransitionAccess().getRightCurlyBracketKeyword_6_3());
    }
)?)
;





// Entry rule entryRuleAssignment
entryRuleAssignment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssignmentRule()); }
	 iv_ruleAssignment=ruleAssignment 
	 { $current=$iv_ruleAssignment.current; } 
	 EOF 
;

// Rule Assignment
ruleAssignment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentAccess().getLhsExpressionParserRuleCall_0_0()); 
	    }
		lv_lhs_0_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentRule());
	        }
       		set(
       			$current, 
       			"lhs",
        		lv_lhs_0_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=':=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAssignmentAccess().getColonEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentAccess().getRhsExpressionParserRuleCall_2_0()); 
	    }
		lv_rhs_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentRule());
	        }
       		set(
       			$current, 
       			"rhs",
        		lv_rhs_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleCondition
entryRuleCondition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConditionRule()); }
	 iv_ruleCondition=ruleCondition 
	 { $current=$iv_ruleCondition.current; } 
	 EOF 
;

// Rule Condition
ruleCondition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getConditionAccess().getInitialConditionParserRuleCall_0()); 
    }
    this_InitialCondition_0=ruleInitialCondition
    { 
        $current = $this_InitialCondition_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getConditionAccess().getInvariantConditionParserRuleCall_1()); 
    }
    this_InvariantCondition_1=ruleInvariantCondition
    { 
        $current = $this_InvariantCondition_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getConditionAccess().getFlowConditionParserRuleCall_2()); 
    }
    this_FlowCondition_2=ruleFlowCondition
    { 
        $current = $this_FlowCondition_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleInitialCondition
entryRuleInitialCondition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInitialConditionRule()); }
	 iv_ruleInitialCondition=ruleInitialCondition 
	 { $current=$iv_ruleInitialCondition.current; } 
	 EOF 
;

// Rule InitialCondition
ruleInitialCondition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='initial' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getInitialConditionAccess().getInitialKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInitialConditionAccess().getExpressionExpressionParserRuleCall_1_0()); 
	    }
		lv_expression_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInitialConditionRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleInvariantCondition
entryRuleInvariantCondition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInvariantConditionRule()); }
	 iv_ruleInvariantCondition=ruleInvariantCondition 
	 { $current=$iv_ruleInvariantCondition.current; } 
	 EOF 
;

// Rule InvariantCondition
ruleInvariantCondition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='invariant' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getInvariantConditionAccess().getInvariantKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInvariantConditionAccess().getExpressionExpressionParserRuleCall_1_0()); 
	    }
		lv_expression_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInvariantConditionRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleFlowCondition
entryRuleFlowCondition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFlowConditionRule()); }
	 iv_ruleFlowCondition=ruleFlowCondition 
	 { $current=$iv_ruleFlowCondition.current; } 
	 EOF 
;

// Rule FlowCondition
ruleFlowCondition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='flow' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFlowConditionAccess().getFlowKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFlowConditionAccess().getExpressionExpressionParserRuleCall_1_0()); 
	    }
		lv_expression_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFlowConditionRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulePropertyDeclaration
entryRulePropertyDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPropertyDeclarationRule()); }
	 iv_rulePropertyDeclaration=rulePropertyDeclaration 
	 { $current=$iv_rulePropertyDeclaration.current; } 
	 EOF 
;

// Rule PropertyDeclaration
rulePropertyDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='property' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPropertyDeclarationAccess().getPropertyKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getPropertyDeclarationAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPropertyDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPropertyDeclarationAccess().getColonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyDeclarationAccess().getHybridAutomatonHybridAutomatonParserRuleCall_3_0()); 
	    }
		lv_hybridAutomaton_3_0=ruleHybridAutomaton		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyDeclarationRule());
	        }
       		set(
       			$current, 
       			"hybridAutomaton",
        		lv_hybridAutomaton_3_0, 
        		"HybridAutomaton");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='models' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getPropertyDeclarationAccess().getModelsKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyDeclarationAccess().getExpressionExpressionParserRuleCall_5_0()); 
	    }
		lv_expression_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyDeclarationRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_5_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;







// Entry rule entryRuleParameterDeclaration
entryRuleParameterDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterDeclarationRule()); }
	 iv_ruleParameterDeclaration=ruleParameterDeclaration 
	 { $current=$iv_ruleParameterDeclaration.current; } 
	 EOF 
;

// Rule ParameterDeclaration
ruleParameterDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getParameterDeclarationAccess().getParameterDeclarationAction_0(),
            $current);
    }
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getParameterDeclarationAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParameterDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getParameterDeclarationAccess().getColonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParameterDeclarationAccess().getTypeTypeParserRuleCall_3_0()); 
	    }
		lv_type_3_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterDeclarationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleFieldDeclaration
entryRuleFieldDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFieldDeclarationRule()); }
	 iv_ruleFieldDeclaration=ruleFieldDeclaration 
	 { $current=$iv_ruleFieldDeclaration.current; } 
	 EOF 
;

// Rule FieldDeclaration
ruleFieldDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFieldDeclarationAccess().getFieldDeclarationAction_0(),
            $current);
    }
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getFieldDeclarationAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFieldDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFieldDeclarationAccess().getColonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFieldDeclarationAccess().getTypeTypeParserRuleCall_3_0()); 
	    }
		lv_type_3_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFieldDeclarationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleLetDeclaration
entryRuleLetDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLetDeclarationRule()); }
	 iv_ruleLetDeclaration=ruleLetDeclaration 
	 { $current=$iv_ruleLetDeclaration.current; } 
	 EOF 
;

// Rule LetDeclaration
ruleLetDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getLetDeclarationAccess().getLetDeclarationAction_0(),
            $current);
    }
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getLetDeclarationAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLetDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getLetDeclarationAccess().getColonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLetDeclarationAccess().getTypeTypeParserRuleCall_3_0()); 
	    }
		lv_type_3_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLetDeclarationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=':=' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getLetDeclarationAccess().getColonEqualsSignKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLetDeclarationAccess().getExpressionExpressionParserRuleCall_5_0()); 
	    }
		lv_expression_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLetDeclarationRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_5_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleConstantDeclaration
entryRuleConstantDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstantDeclarationRule()); }
	 iv_ruleConstantDeclaration=ruleConstantDeclaration 
	 { $current=$iv_ruleConstantDeclaration.current; } 
	 EOF 
;

// Rule ConstantDeclaration
ruleConstantDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='const' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getConstantDeclarationAccess().getConstKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getConstantDeclarationAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstantDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getConstantDeclarationAccess().getColonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstantDeclarationAccess().getTypeTypeParserRuleCall_3_0()); 
	    }
		lv_type_3_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstantDeclarationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=':=' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getConstantDeclarationAccess().getColonEqualsSignKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstantDeclarationAccess().getExpressionExpressionParserRuleCall_4_1_0()); 
	    }
		lv_expression_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstantDeclarationRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_5_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleFunctionDeclaration
entryRuleFunctionDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionDeclarationRule()); }
	 iv_ruleFunctionDeclaration=ruleFunctionDeclaration 
	 { $current=$iv_ruleFunctionDeclaration.current; } 
	 EOF 
;

// Rule FunctionDeclaration
ruleFunctionDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='function' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFunctionDeclarationAccess().getFunctionKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getFunctionDeclarationAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFunctionDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFunctionDeclarationAccess().getLeftParenthesisKeyword_2_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getParameterDeclarationsParameterDeclarationParserRuleCall_2_1_0_0()); 
	    }
		lv_parameterDeclarations_3_0=ruleParameterDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDeclarationRule());
	        }
       		add(
       			$current, 
       			"parameterDeclarations",
        		lv_parameterDeclarations_3_0, 
        		"ParameterDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFunctionDeclarationAccess().getCommaKeyword_2_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getParameterDeclarationsParameterDeclarationParserRuleCall_2_1_1_1_0()); 
	    }
		lv_parameterDeclarations_5_0=ruleParameterDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDeclarationRule());
	        }
       		add(
       			$current, 
       			"parameterDeclarations",
        		lv_parameterDeclarations_5_0, 
        		"ParameterDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getFunctionDeclarationAccess().getRightParenthesisKeyword_2_2());
    }
)?	otherlv_7=':' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getFunctionDeclarationAccess().getColonKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getTypeTypeParserRuleCall_4_0()); 
	    }
		lv_type_8_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDeclarationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_8_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_9=':=' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getFunctionDeclarationAccess().getColonEqualsSignKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getExpressionExpressionParserRuleCall_5_1_0()); 
	    }
		lv_expression_10_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDeclarationRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_10_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleType
entryRuleType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	 iv_ruleType=ruleType 
	 { $current=$iv_ruleType.current; } 
	 EOF 
;

// Rule Type
ruleType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTypeAccess().getTypeReferenceParserRuleCall_0()); 
    }
    this_TypeReference_0=ruleTypeReference
    { 
        $current = $this_TypeReference_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeAccess().getTypeDefinitionParserRuleCall_1()); 
    }
    this_TypeDefinition_1=ruleTypeDefinition
    { 
        $current = $this_TypeDefinition_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleTypeDeclaration
entryRuleTypeDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeDeclarationRule()); }
	 iv_ruleTypeDeclaration=ruleTypeDeclaration 
	 { $current=$iv_ruleTypeDeclaration.current; } 
	 EOF 
;

// Rule TypeDeclaration
ruleTypeDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='type' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTypeDeclarationAccess().getTypeKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getTypeDeclarationAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTypeDeclarationAccess().getColonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeDeclarationAccess().getTypeTypeParserRuleCall_3_0()); 
	    }
		lv_type_3_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeDeclarationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleTypeReference
entryRuleTypeReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeReferenceRule()); }
	 iv_ruleTypeReference=ruleTypeReference 
	 { $current=$iv_ruleTypeReference.current; } 
	 EOF 
;

// Rule TypeReference
ruleTypeReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeReferenceRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getTypeReferenceAccess().getReferenceTypeDeclarationCrossReference_0()); 
	}

)
)
;





// Entry rule entryRuleNaturalTypeDefinition
entryRuleNaturalTypeDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNaturalTypeDefinitionRule()); }
	 iv_ruleNaturalTypeDefinition=ruleNaturalTypeDefinition 
	 { $current=$iv_ruleNaturalTypeDefinition.current; } 
	 EOF 
;

// Rule NaturalTypeDefinition
ruleNaturalTypeDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getNaturalTypeDefinitionAccess().getNaturalTypeDefinitionAction_0(),
            $current);
    }
)	otherlv_1='natural' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getNaturalTypeDefinitionAccess().getNaturalKeyword_1());
    }
)
;





// Entry rule entryRuleIntegerTypeDefinition
entryRuleIntegerTypeDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntegerTypeDefinitionRule()); }
	 iv_ruleIntegerTypeDefinition=ruleIntegerTypeDefinition 
	 { $current=$iv_ruleIntegerTypeDefinition.current; } 
	 EOF 
;

// Rule IntegerTypeDefinition
ruleIntegerTypeDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getIntegerTypeDefinitionAccess().getIntegerTypeDefinitionAction_0(),
            $current);
    }
)	otherlv_1='integer' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getIntegerTypeDefinitionAccess().getIntegerKeyword_1());
    }
)
;





// Entry rule entryRuleBooleanTypeDefinition
entryRuleBooleanTypeDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBooleanTypeDefinitionRule()); }
	 iv_ruleBooleanTypeDefinition=ruleBooleanTypeDefinition 
	 { $current=$iv_ruleBooleanTypeDefinition.current; } 
	 EOF 
;

// Rule BooleanTypeDefinition
ruleBooleanTypeDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getBooleanTypeDefinitionAccess().getBooleanTypeDefinitionAction_0(),
            $current);
    }
)	otherlv_1='boolean' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBooleanTypeDefinitionAccess().getBooleanKeyword_1());
    }
)
;





// Entry rule entryRuleRealTypeDefinition
entryRuleRealTypeDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRealTypeDefinitionRule()); }
	 iv_ruleRealTypeDefinition=ruleRealTypeDefinition 
	 { $current=$iv_ruleRealTypeDefinition.current; } 
	 EOF 
;

// Rule RealTypeDefinition
ruleRealTypeDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getRealTypeDefinitionAccess().getRealTypeDefinitionAction_0(),
            $current);
    }
)	otherlv_1='real' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRealTypeDefinitionAccess().getRealKeyword_1());
    }
)
;





// Entry rule entryRuleArrayTypeDefinition
entryRuleArrayTypeDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArrayTypeDefinitionRule()); }
	 iv_ruleArrayTypeDefinition=ruleArrayTypeDefinition 
	 { $current=$iv_ruleArrayTypeDefinition.current; } 
	 EOF 
;

// Rule ArrayTypeDefinition
ruleArrayTypeDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='array' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getArrayTypeDefinitionAccess().getArrayKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrayTypeDefinitionAccess().getIndexTypesTypeParserRuleCall_1_0()); 
	    }
		lv_indexTypes_1_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayTypeDefinitionRule());
	        }
       		add(
       			$current, 
       			"indexTypes",
        		lv_indexTypes_1_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getArrayTypeDefinitionAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrayTypeDefinitionAccess().getIndexTypesTypeParserRuleCall_2_1_0()); 
	    }
		lv_indexTypes_3_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayTypeDefinitionRule());
	        }
       		add(
       			$current, 
       			"indexTypes",
        		lv_indexTypes_3_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_4='of' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getArrayTypeDefinitionAccess().getOfKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrayTypeDefinitionAccess().getElementTypeTypeParserRuleCall_4_0()); 
	    }
		lv_elementType_5_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayTypeDefinitionRule());
	        }
       		set(
       			$current, 
       			"elementType",
        		lv_elementType_5_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleEnumerationTypeDefinition
entryRuleEnumerationTypeDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnumerationTypeDefinitionRule()); }
	 iv_ruleEnumerationTypeDefinition=ruleEnumerationTypeDefinition 
	 { $current=$iv_ruleEnumerationTypeDefinition.current; } 
	 EOF 
;

// Rule EnumerationTypeDefinition
ruleEnumerationTypeDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='enum' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getEnumerationTypeDefinitionAccess().getEnumKeyword_0());
    }
	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getEnumerationTypeDefinitionAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEnumerationTypeDefinitionAccess().getLiteralsEnumerationLiteralDefinitionParserRuleCall_2_0()); 
	    }
		lv_literals_2_0=ruleEnumerationLiteralDefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumerationTypeDefinitionRule());
	        }
       		add(
       			$current, 
       			"literals",
        		lv_literals_2_0, 
        		"EnumerationLiteralDefinition");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getEnumerationTypeDefinitionAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEnumerationTypeDefinitionAccess().getLiteralsEnumerationLiteralDefinitionParserRuleCall_3_1_0()); 
	    }
		lv_literals_4_0=ruleEnumerationLiteralDefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumerationTypeDefinitionRule());
	        }
       		add(
       			$current, 
       			"literals",
        		lv_literals_4_0, 
        		"EnumerationLiteralDefinition");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getEnumerationTypeDefinitionAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleEnumerationLiteralDefinition
entryRuleEnumerationLiteralDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnumerationLiteralDefinitionRule()); }
	 iv_ruleEnumerationLiteralDefinition=ruleEnumerationLiteralDefinition 
	 { $current=$iv_ruleEnumerationLiteralDefinition.current; } 
	 EOF 
;

// Rule EnumerationLiteralDefinition
ruleEnumerationLiteralDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getEnumerationLiteralDefinitionAccess().getNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEnumerationLiteralDefinitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleRecordTypeDefinition
entryRuleRecordTypeDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRecordTypeDefinitionRule()); }
	 iv_ruleRecordTypeDefinition=ruleRecordTypeDefinition 
	 { $current=$iv_ruleRecordTypeDefinition.current; } 
	 EOF 
;

// Rule RecordTypeDefinition
ruleRecordTypeDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='record' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRecordTypeDefinitionAccess().getRecordKeyword_0());
    }
	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRecordTypeDefinitionAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRecordTypeDefinitionAccess().getFieldDeclarationsFieldDeclarationParserRuleCall_2_0()); 
	    }
		lv_fieldDeclarations_2_0=ruleFieldDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRecordTypeDefinitionRule());
	        }
       		add(
       			$current, 
       			"fieldDeclarations",
        		lv_fieldDeclarations_2_0, 
        		"FieldDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getRecordTypeDefinitionAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRecordTypeDefinitionAccess().getFieldDeclarationsFieldDeclarationParserRuleCall_3_1_0()); 
	    }
		lv_fieldDeclarations_4_0=ruleFieldDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRecordTypeDefinitionRule());
	        }
       		add(
       			$current, 
       			"fieldDeclarations",
        		lv_fieldDeclarations_4_0, 
        		"FieldDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getRecordTypeDefinitionAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleTupleTypeDefinition
entryRuleTupleTypeDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTupleTypeDefinitionRule()); }
	 iv_ruleTupleTypeDefinition=ruleTupleTypeDefinition 
	 { $current=$iv_ruleTupleTypeDefinition.current; } 
	 EOF 
;

// Rule TupleTypeDefinition
ruleTupleTypeDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='tuple' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTupleTypeDefinitionAccess().getTupleKeyword_0());
    }
	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTupleTypeDefinitionAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTupleTypeDefinitionAccess().getTypesTypeParserRuleCall_2_0()); 
	    }
		lv_types_2_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTupleTypeDefinitionRule());
	        }
       		add(
       			$current, 
       			"types",
        		lv_types_2_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTupleTypeDefinitionAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTupleTypeDefinitionAccess().getTypesTypeParserRuleCall_3_1_0()); 
	    }
		lv_types_4_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTupleTypeDefinitionRule());
	        }
       		add(
       			$current, 
       			"types",
        		lv_types_4_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTupleTypeDefinitionAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleSubrangeTypeDefinition
entryRuleSubrangeTypeDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSubrangeTypeDefinitionRule()); }
	 iv_ruleSubrangeTypeDefinition=ruleSubrangeTypeDefinition 
	 { $current=$iv_ruleSubrangeTypeDefinition.current; } 
	 EOF 
;

// Rule SubrangeTypeDefinition
ruleSubrangeTypeDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSubrangeTypeDefinitionAccess().getSubrangeTypeDefinitionAction_0(),
            $current);
    }
)	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSubrangeTypeDefinitionAccess().getLeftSquareBracketKeyword_1());
    }
((	otherlv_2='-' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSubrangeTypeDefinitionAccess().getHyphenMinusKeyword_2_0_0());
    }
	otherlv_3='inf' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSubrangeTypeDefinitionAccess().getInfKeyword_2_0_1());
    }
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getSubrangeTypeDefinitionAccess().getLowerBoundExpressionParserRuleCall_2_1_0()); 
	    }
		lv_lowerBound_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubrangeTypeDefinitionRule());
	        }
       		set(
       			$current, 
       			"lowerBound",
        		lv_lowerBound_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))	otherlv_5='to' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getSubrangeTypeDefinitionAccess().getToKeyword_3());
    }
(	otherlv_6='inf' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getSubrangeTypeDefinitionAccess().getInfKeyword_4_0());
    }

    |(
(
		{ 
	        newCompositeNode(grammarAccess.getSubrangeTypeDefinitionAccess().getUpperBoundExpressionParserRuleCall_4_1_0()); 
	    }
		lv_upperBound_7_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubrangeTypeDefinitionRule());
	        }
       		set(
       			$current, 
       			"upperBound",
        		lv_upperBound_7_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))	otherlv_8=']' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getSubrangeTypeDefinitionAccess().getRightSquareBracketKeyword_5());
    }
)
;





// Entry rule entryRuleSubTypeDefinition
entryRuleSubTypeDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSubTypeDefinitionRule()); }
	 iv_ruleSubTypeDefinition=ruleSubTypeDefinition 
	 { $current=$iv_ruleSubTypeDefinition.current; } 
	 EOF 
;

// Rule SubTypeDefinition
ruleSubTypeDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='{' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSubTypeDefinitionAccess().getLeftCurlyBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSubTypeDefinitionAccess().getParameterDeclarationParameterDeclarationParserRuleCall_1_0()); 
	    }
		lv_parameterDeclaration_1_0=ruleParameterDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubTypeDefinitionRule());
	        }
       		set(
       			$current, 
       			"parameterDeclaration",
        		lv_parameterDeclaration_1_0, 
        		"ParameterDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='|' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSubTypeDefinitionAccess().getVerticalLineKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSubTypeDefinitionAccess().getExpressionExpressionParserRuleCall_3_0()); 
	    }
		lv_expression_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubTypeDefinitionRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSubTypeDefinitionAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleFunctionTypeDefinition
entryRuleFunctionTypeDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionTypeDefinitionRule()); }
	 iv_ruleFunctionTypeDefinition=ruleFunctionTypeDefinition 
	 { $current=$iv_ruleFunctionTypeDefinition.current; } 
	 EOF 
;

// Rule FunctionTypeDefinition
ruleFunctionTypeDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='function' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFunctionTypeDefinitionAccess().getFunctionKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFunctionTypeDefinitionAccess().getLeftParenthesisKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionTypeDefinitionAccess().getParameterTypesTypeParserRuleCall_2_0_0()); 
	    }
		lv_parameterTypes_2_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionTypeDefinitionRule());
	        }
       		add(
       			$current, 
       			"parameterTypes",
        		lv_parameterTypes_2_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFunctionTypeDefinitionAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionTypeDefinitionAccess().getParameterTypesTypeParserRuleCall_2_1_1_0()); 
	    }
		lv_parameterTypes_4_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionTypeDefinitionRule());
	        }
       		add(
       			$current, 
       			"parameterTypes",
        		lv_parameterTypes_4_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFunctionTypeDefinitionAccess().getRightParenthesisKeyword_3());
    }
	otherlv_6=':' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getFunctionTypeDefinitionAccess().getColonKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionTypeDefinitionAccess().getReturnTypeTypeParserRuleCall_5_0()); 
	    }
		lv_returnType_7_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionTypeDefinitionRule());
	        }
       		set(
       			$current, 
       			"returnType",
        		lv_returnType_7_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getIfThenElseExpressionParserRuleCall()); 
    }
    this_IfThenElseExpression_0=ruleIfThenElseExpression
    { 
        $current = $this_IfThenElseExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleIfThenElseExpression
entryRuleIfThenElseExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIfThenElseExpressionRule()); }
	 iv_ruleIfThenElseExpression=ruleIfThenElseExpression 
	 { $current=$iv_ruleIfThenElseExpression.current; } 
	 EOF 
;

// Rule IfThenElseExpression
ruleIfThenElseExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getIfThenElseExpressionAccess().getIfThenElseExpressionAction_0_0(),
            $current);
    }
)	otherlv_1='if' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getIfThenElseExpressionAccess().getIfKeyword_0_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfThenElseExpressionAccess().getConditionExpressionParserRuleCall_0_2_0()); 
	    }
		lv_condition_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfThenElseExpressionRule());
	        }
       		set(
       			$current, 
       			"condition",
        		lv_condition_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='then' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getIfThenElseExpressionAccess().getThenKeyword_0_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfThenElseExpressionAccess().getThenExpressionParserRuleCall_0_4_0()); 
	    }
		lv_then_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfThenElseExpressionRule());
	        }
       		set(
       			$current, 
       			"then",
        		lv_then_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(((	'else' 
)=>	otherlv_5='else' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getIfThenElseExpressionAccess().getElseKeyword_0_5_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getIfThenElseExpressionAccess().getElseExpressionParserRuleCall_0_5_1_0()); 
	    }
		lv_else_6_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfThenElseExpressionRule());
	        }
       		set(
       			$current, 
       			"else",
        		lv_else_6_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)))
    |
    { 
        newCompositeNode(grammarAccess.getIfThenElseExpressionAccess().getEqualExpressionParserRuleCall_1()); 
    }
    this_EqualExpression_7=ruleEqualExpression
    { 
        $current = $this_EqualExpression_7.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleEqualExpression
entryRuleEqualExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEqualExpressionRule()); }
	 iv_ruleEqualExpression=ruleEqualExpression 
	 { $current=$iv_ruleEqualExpression.current; } 
	 EOF 
;

// Rule EqualExpression
ruleEqualExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getEqualExpressionAccess().getImplyExpressionParserRuleCall_0()); 
    }
    this_ImplyExpression_0=ruleImplyExpression
    { 
        $current = $this_ImplyExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getEqualExpressionAccess().getEqualExpressionLeftOperandAction_1_0(),
            $current);
    }
)	otherlv_2='equal' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getEqualExpressionAccess().getEqualKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEqualExpressionAccess().getRightOperandEqualExpressionParserRuleCall_1_2_0()); 
	    }
		lv_rightOperand_3_0=ruleEqualExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEqualExpressionRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"EqualExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleImplyExpression
entryRuleImplyExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImplyExpressionRule()); }
	 iv_ruleImplyExpression=ruleImplyExpression 
	 { $current=$iv_ruleImplyExpression.current; } 
	 EOF 
;

// Rule ImplyExpression
ruleImplyExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getImplyExpressionAccess().getOrExpressionParserRuleCall_0()); 
    }
    this_OrExpression_0=ruleOrExpression
    { 
        $current = $this_OrExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getImplyExpressionAccess().getImplyExpressionLeftOperandAction_1_0(),
            $current);
    }
)	otherlv_2='imply' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getImplyExpressionAccess().getImplyKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getImplyExpressionAccess().getRightOperandImplyExpressionParserRuleCall_1_2_0()); 
	    }
		lv_rightOperand_3_0=ruleImplyExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImplyExpressionRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"ImplyExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleOrExpression
entryRuleOrExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOrExpressionRule()); }
	 iv_ruleOrExpression=ruleOrExpression 
	 { $current=$iv_ruleOrExpression.current; } 
	 EOF 
;

// Rule OrExpression
ruleOrExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getOrExpressionAccess().getAndExpressionParserRuleCall_0()); 
    }
    this_AndExpression_0=ruleAndExpression
    { 
        $current = $this_AndExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getOrExpressionAccess().getOrExpressionOperandsAction_1_0(),
            $current);
    }
)(	otherlv_2='or' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getOrExpressionAccess().getOrKeyword_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOrExpressionAccess().getOperandsAndExpressionParserRuleCall_1_1_1_0()); 
	    }
		lv_operands_3_0=ruleAndExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrExpressionRule());
	        }
       		add(
       			$current, 
       			"operands",
        		lv_operands_3_0, 
        		"AndExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))+)?)
;





// Entry rule entryRuleAndExpression
entryRuleAndExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAndExpressionRule()); }
	 iv_ruleAndExpression=ruleAndExpression 
	 { $current=$iv_ruleAndExpression.current; } 
	 EOF 
;

// Rule AndExpression
ruleAndExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAndExpressionAccess().getReleaseExpressionParserRuleCall_0()); 
    }
    this_ReleaseExpression_0=ruleReleaseExpression
    { 
        $current = $this_ReleaseExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getAndExpressionAccess().getAndExpressionOperandsAction_1_0(),
            $current);
    }
)(	otherlv_2='and' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAndExpressionAccess().getAndKeyword_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAndExpressionAccess().getOperandsReleaseExpressionParserRuleCall_1_1_1_0()); 
	    }
		lv_operands_3_0=ruleReleaseExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAndExpressionRule());
	        }
       		add(
       			$current, 
       			"operands",
        		lv_operands_3_0, 
        		"ReleaseExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))+)?)
;





// Entry rule entryRuleReleaseExpression
entryRuleReleaseExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReleaseExpressionRule()); }
	 iv_ruleReleaseExpression=ruleReleaseExpression 
	 { $current=$iv_ruleReleaseExpression.current; } 
	 EOF 
;

// Rule ReleaseExpression
ruleReleaseExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getReleaseExpressionAccess().getUntilExpressionParserRuleCall_0()); 
    }
    this_UntilExpression_0=ruleUntilExpression
    { 
        $current = $this_UntilExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getReleaseExpressionAccess().getReleaseExpressionLeftOperandAction_1_0(),
            $current);
    }
)	otherlv_2='R' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getReleaseExpressionAccess().getRKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getReleaseExpressionAccess().getRightOperandUntilExpressionParserRuleCall_1_2_0()); 
	    }
		lv_rightOperand_3_0=ruleUntilExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReleaseExpressionRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"UntilExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleUntilExpression
entryRuleUntilExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUntilExpressionRule()); }
	 iv_ruleUntilExpression=ruleUntilExpression 
	 { $current=$iv_ruleUntilExpression.current; } 
	 EOF 
;

// Rule UntilExpression
ruleUntilExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getUntilExpressionAccess().getUnaryLogicExpressionParserRuleCall_0()); 
    }
    this_UnaryLogicExpression_0=ruleUnaryLogicExpression
    { 
        $current = $this_UnaryLogicExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getUntilExpressionAccess().getUntilExpressionLeftOperandAction_1_0(),
            $current);
    }
)	otherlv_2='U' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getUntilExpressionAccess().getUKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUntilExpressionAccess().getRightOperandUnaryLogicExpressionParserRuleCall_1_2_0()); 
	    }
		lv_rightOperand_3_0=ruleUnaryLogicExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUntilExpressionRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"UnaryLogicExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleUnaryLogicExpression
entryRuleUnaryLogicExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnaryLogicExpressionRule()); }
	 iv_ruleUnaryLogicExpression=ruleUnaryLogicExpression 
	 { $current=$iv_ruleUnaryLogicExpression.current; } 
	 EOF 
;

// Rule UnaryLogicExpression
ruleUnaryLogicExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getUnaryLogicExpressionAccess().getNotExpressionParserRuleCall_0()); 
    }
    this_NotExpression_0=ruleNotExpression
    { 
        $current = $this_NotExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getUnaryLogicExpressionAccess().getForallExpressionParserRuleCall_1()); 
    }
    this_ForallExpression_1=ruleForallExpression
    { 
        $current = $this_ForallExpression_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getUnaryLogicExpressionAccess().getExistsExpressionParserRuleCall_2()); 
    }
    this_ExistsExpression_2=ruleExistsExpression
    { 
        $current = $this_ExistsExpression_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getUnaryLogicExpressionAccess().getFunctionLiteralExpressionParserRuleCall_3()); 
    }
    this_FunctionLiteralExpression_3=ruleFunctionLiteralExpression
    { 
        $current = $this_FunctionLiteralExpression_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getUnaryLogicExpressionAccess().getGloballyExpressionParserRuleCall_4()); 
    }
    this_GloballyExpression_4=ruleGloballyExpression
    { 
        $current = $this_GloballyExpression_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getUnaryLogicExpressionAccess().getFinallyExpressionParserRuleCall_5()); 
    }
    this_FinallyExpression_5=ruleFinallyExpression
    { 
        $current = $this_FinallyExpression_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getUnaryLogicExpressionAccess().getNextExpressionParserRuleCall_6()); 
    }
    this_NextExpression_6=ruleNextExpression
    { 
        $current = $this_NextExpression_6.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getUnaryLogicExpressionAccess().getTemporalForallExpressionParserRuleCall_7()); 
    }
    this_TemporalForallExpression_7=ruleTemporalForallExpression
    { 
        $current = $this_TemporalForallExpression_7.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getUnaryLogicExpressionAccess().getTemporalExistsExpressionParserRuleCall_8()); 
    }
    this_TemporalExistsExpression_8=ruleTemporalExistsExpression
    { 
        $current = $this_TemporalExistsExpression_8.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getUnaryLogicExpressionAccess().getLetExpressionParserRuleCall_9()); 
    }
    this_LetExpression_9=ruleLetExpression
    { 
        $current = $this_LetExpression_9.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getUnaryLogicExpressionAccess().getInExpressionParserRuleCall_10()); 
    }
    this_InExpression_10=ruleInExpression
    { 
        $current = $this_InExpression_10.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleNotExpression
entryRuleNotExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNotExpressionRule()); }
	 iv_ruleNotExpression=ruleNotExpression 
	 { $current=$iv_ruleNotExpression.current; } 
	 EOF 
;

// Rule NotExpression
ruleNotExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getNotExpressionAccess().getNotExpressionAction_0(),
            $current);
    }
)((	'not' 
)=>	otherlv_1='not' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getNotExpressionAccess().getNotKeyword_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNotExpressionAccess().getOperandUnaryLogicExpressionParserRuleCall_2_0()); 
	    }
		lv_operand_2_0=ruleUnaryLogicExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNotExpressionRule());
	        }
       		set(
       			$current, 
       			"operand",
        		lv_operand_2_0, 
        		"UnaryLogicExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleForallExpression
entryRuleForallExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getForallExpressionRule()); }
	 iv_ruleForallExpression=ruleForallExpression 
	 { $current=$iv_ruleForallExpression.current; } 
	 EOF 
;

// Rule ForallExpression
ruleForallExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getForallExpressionAccess().getForallExpressionAction_0(),
            $current);
    }
)((	'forall' 
)=>	otherlv_1='forall' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getForallExpressionAccess().getForallKeyword_1());
    }
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getForallExpressionAccess().getLeftParenthesisKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getForallExpressionAccess().getParameterDeclarationsParameterDeclarationParserRuleCall_3_0_0()); 
	    }
		lv_parameterDeclarations_3_0=ruleParameterDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForallExpressionRule());
	        }
       		add(
       			$current, 
       			"parameterDeclarations",
        		lv_parameterDeclarations_3_0, 
        		"ParameterDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getForallExpressionAccess().getCommaKeyword_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForallExpressionAccess().getParameterDeclarationsParameterDeclarationParserRuleCall_3_1_1_0()); 
	    }
		lv_parameterDeclarations_5_0=ruleParameterDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForallExpressionRule());
	        }
       		add(
       			$current, 
       			"parameterDeclarations",
        		lv_parameterDeclarations_5_0, 
        		"ParameterDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getForallExpressionAccess().getRightParenthesisKeyword_4());
    }
	otherlv_7=':' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getForallExpressionAccess().getColonKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForallExpressionAccess().getOperandUnaryLogicExpressionParserRuleCall_6_0()); 
	    }
		lv_operand_8_0=ruleUnaryLogicExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForallExpressionRule());
	        }
       		set(
       			$current, 
       			"operand",
        		lv_operand_8_0, 
        		"UnaryLogicExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleExistsExpression
entryRuleExistsExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExistsExpressionRule()); }
	 iv_ruleExistsExpression=ruleExistsExpression 
	 { $current=$iv_ruleExistsExpression.current; } 
	 EOF 
;

// Rule ExistsExpression
ruleExistsExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getExistsExpressionAccess().getExistsExpressionAction_0(),
            $current);
    }
)((	'exists' 
)=>	otherlv_1='exists' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getExistsExpressionAccess().getExistsKeyword_1());
    }
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getExistsExpressionAccess().getLeftParenthesisKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getExistsExpressionAccess().getParameterDeclarationsParameterDeclarationParserRuleCall_3_0_0()); 
	    }
		lv_parameterDeclarations_3_0=ruleParameterDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExistsExpressionRule());
	        }
       		add(
       			$current, 
       			"parameterDeclarations",
        		lv_parameterDeclarations_3_0, 
        		"ParameterDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getExistsExpressionAccess().getCommaKeyword_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExistsExpressionAccess().getParameterDeclarationsParameterDeclarationParserRuleCall_3_1_1_0()); 
	    }
		lv_parameterDeclarations_5_0=ruleParameterDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExistsExpressionRule());
	        }
       		add(
       			$current, 
       			"parameterDeclarations",
        		lv_parameterDeclarations_5_0, 
        		"ParameterDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getExistsExpressionAccess().getRightParenthesisKeyword_4());
    }
	otherlv_7=':' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getExistsExpressionAccess().getColonKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExistsExpressionAccess().getOperandUnaryLogicExpressionParserRuleCall_6_0()); 
	    }
		lv_operand_8_0=ruleUnaryLogicExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExistsExpressionRule());
	        }
       		set(
       			$current, 
       			"operand",
        		lv_operand_8_0, 
        		"UnaryLogicExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleFunctionLiteralExpression
entryRuleFunctionLiteralExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionLiteralExpressionRule()); }
	 iv_ruleFunctionLiteralExpression=ruleFunctionLiteralExpression 
	 { $current=$iv_ruleFunctionLiteralExpression.current; } 
	 EOF 
;

// Rule FunctionLiteralExpression
ruleFunctionLiteralExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFunctionLiteralExpressionAccess().getFunctionLiteralExpressionAction_0(),
            $current);
    }
)((	'function' 
)=>	otherlv_1='function' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFunctionLiteralExpressionAccess().getFunctionKeyword_1());
    }
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFunctionLiteralExpressionAccess().getLeftParenthesisKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionLiteralExpressionAccess().getParameterDeclarationsParameterDeclarationParserRuleCall_3_0_0()); 
	    }
		lv_parameterDeclarations_3_0=ruleParameterDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionLiteralExpressionRule());
	        }
       		add(
       			$current, 
       			"parameterDeclarations",
        		lv_parameterDeclarations_3_0, 
        		"ParameterDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFunctionLiteralExpressionAccess().getCommaKeyword_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionLiteralExpressionAccess().getParameterDeclarationsParameterDeclarationParserRuleCall_3_1_1_0()); 
	    }
		lv_parameterDeclarations_5_0=ruleParameterDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionLiteralExpressionRule());
	        }
       		add(
       			$current, 
       			"parameterDeclarations",
        		lv_parameterDeclarations_5_0, 
        		"ParameterDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getFunctionLiteralExpressionAccess().getRightParenthesisKeyword_4());
    }
	otherlv_7=':' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getFunctionLiteralExpressionAccess().getColonKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionLiteralExpressionAccess().getReturnTypeTypeParserRuleCall_6_0()); 
	    }
		lv_returnType_8_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionLiteralExpressionRule());
	        }
       		set(
       			$current, 
       			"returnType",
        		lv_returnType_8_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_9=':=' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getFunctionLiteralExpressionAccess().getColonEqualsSignKeyword_7());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionLiteralExpressionAccess().getOperandUnaryLogicExpressionParserRuleCall_8_0()); 
	    }
		lv_operand_10_0=ruleUnaryLogicExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionLiteralExpressionRule());
	        }
       		set(
       			$current, 
       			"operand",
        		lv_operand_10_0, 
        		"UnaryLogicExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleGloballyExpression
entryRuleGloballyExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGloballyExpressionRule()); }
	 iv_ruleGloballyExpression=ruleGloballyExpression 
	 { $current=$iv_ruleGloballyExpression.current; } 
	 EOF 
;

// Rule GloballyExpression
ruleGloballyExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getGloballyExpressionAccess().getGloballyExpressionAction_0(),
            $current);
    }
)((	'G' 
)=>	otherlv_1='G' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getGloballyExpressionAccess().getGKeyword_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getGloballyExpressionAccess().getOperandUnaryLogicExpressionParserRuleCall_2_0()); 
	    }
		lv_operand_2_0=ruleUnaryLogicExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGloballyExpressionRule());
	        }
       		set(
       			$current, 
       			"operand",
        		lv_operand_2_0, 
        		"UnaryLogicExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleFinallyExpression
entryRuleFinallyExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFinallyExpressionRule()); }
	 iv_ruleFinallyExpression=ruleFinallyExpression 
	 { $current=$iv_ruleFinallyExpression.current; } 
	 EOF 
;

// Rule FinallyExpression
ruleFinallyExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFinallyExpressionAccess().getFinallyExpressionAction_0(),
            $current);
    }
)((	'F' 
)=>	otherlv_1='F' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFinallyExpressionAccess().getFKeyword_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFinallyExpressionAccess().getOperandUnaryLogicExpressionParserRuleCall_2_0()); 
	    }
		lv_operand_2_0=ruleUnaryLogicExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFinallyExpressionRule());
	        }
       		set(
       			$current, 
       			"operand",
        		lv_operand_2_0, 
        		"UnaryLogicExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleNextExpression
entryRuleNextExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNextExpressionRule()); }
	 iv_ruleNextExpression=ruleNextExpression 
	 { $current=$iv_ruleNextExpression.current; } 
	 EOF 
;

// Rule NextExpression
ruleNextExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getNextExpressionAccess().getNextExpressionAction_0(),
            $current);
    }
)((	'X' 
)=>	otherlv_1='X' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getNextExpressionAccess().getXKeyword_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNextExpressionAccess().getOperandUnaryLogicExpressionParserRuleCall_2_0()); 
	    }
		lv_operand_2_0=ruleUnaryLogicExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNextExpressionRule());
	        }
       		set(
       			$current, 
       			"operand",
        		lv_operand_2_0, 
        		"UnaryLogicExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleTemporalForallExpression
entryRuleTemporalForallExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTemporalForallExpressionRule()); }
	 iv_ruleTemporalForallExpression=ruleTemporalForallExpression 
	 { $current=$iv_ruleTemporalForallExpression.current; } 
	 EOF 
;

// Rule TemporalForallExpression
ruleTemporalForallExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTemporalForallExpressionAccess().getTemporalForallExpressionAction_0(),
            $current);
    }
)((	'A' 
)=>	otherlv_1='A' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTemporalForallExpressionAccess().getAKeyword_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTemporalForallExpressionAccess().getOperandUnaryLogicExpressionParserRuleCall_2_0()); 
	    }
		lv_operand_2_0=ruleUnaryLogicExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTemporalForallExpressionRule());
	        }
       		set(
       			$current, 
       			"operand",
        		lv_operand_2_0, 
        		"UnaryLogicExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleTemporalExistsExpression
entryRuleTemporalExistsExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTemporalExistsExpressionRule()); }
	 iv_ruleTemporalExistsExpression=ruleTemporalExistsExpression 
	 { $current=$iv_ruleTemporalExistsExpression.current; } 
	 EOF 
;

// Rule TemporalExistsExpression
ruleTemporalExistsExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTemporalExistsExpressionAccess().getTemporalExistsExpressionAction_0(),
            $current);
    }
)((	'E' 
)=>	otherlv_1='E' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTemporalExistsExpressionAccess().getEKeyword_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTemporalExistsExpressionAccess().getOperandUnaryLogicExpressionParserRuleCall_2_0()); 
	    }
		lv_operand_2_0=ruleUnaryLogicExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTemporalExistsExpressionRule());
	        }
       		set(
       			$current, 
       			"operand",
        		lv_operand_2_0, 
        		"UnaryLogicExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleLetExpression
entryRuleLetExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLetExpressionRule()); }
	 iv_ruleLetExpression=ruleLetExpression 
	 { $current=$iv_ruleLetExpression.current; } 
	 EOF 
;

// Rule LetExpression
ruleLetExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getLetExpressionAccess().getLetExpressionAction_0(),
            $current);
    }
)	otherlv_1='let' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getLetExpressionAccess().getLetKeyword_1());
    }
	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getLetExpressionAccess().getLeftParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLetExpressionAccess().getLetDeclarationsLetDeclarationParserRuleCall_3_0()); 
	    }
		lv_letDeclarations_3_0=ruleLetDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLetExpressionRule());
	        }
       		add(
       			$current, 
       			"letDeclarations",
        		lv_letDeclarations_3_0, 
        		"LetDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getLetExpressionAccess().getCommaKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLetExpressionAccess().getLetDeclarationsLetDeclarationParserRuleCall_4_1_0()); 
	    }
		lv_letDeclarations_5_0=ruleLetDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLetExpressionRule());
	        }
       		add(
       			$current, 
       			"letDeclarations",
        		lv_letDeclarations_5_0, 
        		"LetDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getLetExpressionAccess().getRightParenthesisKeyword_5());
    }
	otherlv_7='in' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getLetExpressionAccess().getInKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLetExpressionAccess().getExpressionUnaryLogicExpressionParserRuleCall_7_0()); 
	    }
		lv_expression_8_0=ruleUnaryLogicExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLetExpressionRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_8_0, 
        		"UnaryLogicExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleInExpression
entryRuleInExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInExpressionRule()); }
	 iv_ruleInExpression=ruleInExpression 
	 { $current=$iv_ruleInExpression.current; } 
	 EOF 
;

// Rule InExpression
ruleInExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getInExpressionAccess().getEquivalenceExpressionParserRuleCall_0()); 
    }
    this_EquivalenceExpression_0=ruleEquivalenceExpression
    { 
        $current = $this_EquivalenceExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getInExpressionAccess().getInExpressionOperandAction_1_0(),
            $current);
    }
)	otherlv_2='in' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getInExpressionAccess().getInKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInExpressionAccess().getTypeTypeParserRuleCall_1_2_0()); 
	    }
		lv_type_3_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInExpressionRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleEquivalenceExpression
entryRuleEquivalenceExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEquivalenceExpressionRule()); }
	 iv_ruleEquivalenceExpression=ruleEquivalenceExpression 
	 { $current=$iv_ruleEquivalenceExpression.current; } 
	 EOF 
;

// Rule EquivalenceExpression
ruleEquivalenceExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getEquivalenceExpressionAccess().getComparisionExpressionParserRuleCall_0()); 
    }
    this_ComparisionExpression_0=ruleComparisionExpression
    { 
        $current = $this_ComparisionExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
(((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getEquivalenceExpressionAccess().getEqualityExpressionLeftOperandAction_1_0_0(),
            $current);
    }
)	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getEquivalenceExpressionAccess().getEqualsSignKeyword_1_0_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEquivalenceExpressionAccess().getRightOperandComparisionExpressionParserRuleCall_1_0_2_0()); 
	    }
		lv_rightOperand_3_0=ruleComparisionExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEquivalenceExpressionRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"ComparisionExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getEquivalenceExpressionAccess().getInequalityExpressionLeftOperandAction_1_1_0(),
            $current);
    }
)	otherlv_5='/=' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getEquivalenceExpressionAccess().getSolidusEqualsSignKeyword_1_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEquivalenceExpressionAccess().getRightOperandComparisionExpressionParserRuleCall_1_1_2_0()); 
	    }
		lv_rightOperand_6_0=ruleComparisionExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEquivalenceExpressionRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_6_0, 
        		"ComparisionExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)))?)
;





// Entry rule entryRuleComparisionExpression
entryRuleComparisionExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getComparisionExpressionRule()); }
	 iv_ruleComparisionExpression=ruleComparisionExpression 
	 { $current=$iv_ruleComparisionExpression.current; } 
	 EOF 
;

// Rule ComparisionExpression
ruleComparisionExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getComparisionExpressionAccess().getAdditiveExpressionParserRuleCall_0()); 
    }
    this_AdditiveExpression_0=ruleAdditiveExpression
    { 
        $current = $this_AdditiveExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getComparisionExpressionAccess().getGreaterExpressionLeftOperandAction_1_0_0_0(),
            $current);
    }
)	otherlv_2='>' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getComparisionExpressionAccess().getGreaterThanSignKeyword_1_0_0_1());
    }
)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getComparisionExpressionAccess().getGreaterEqualExpressionLeftOperandAction_1_0_1_0(),
            $current);
    }
)	otherlv_4='>=' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getComparisionExpressionAccess().getGreaterThanSignEqualsSignKeyword_1_0_1_1());
    }
)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getComparisionExpressionAccess().getLessExpressionLeftOperandAction_1_0_2_0(),
            $current);
    }
)	otherlv_6='<' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getComparisionExpressionAccess().getLessThanSignKeyword_1_0_2_1());
    }
)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getComparisionExpressionAccess().getLessEqualExpressionLeftOperandAction_1_0_3_0(),
            $current);
    }
)	otherlv_8='<=' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getComparisionExpressionAccess().getLessThanSignEqualsSignKeyword_1_0_3_1());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getComparisionExpressionAccess().getRightOperandAdditiveExpressionParserRuleCall_1_1_0()); 
	    }
		lv_rightOperand_9_0=ruleAdditiveExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComparisionExpressionRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_9_0, 
        		"AdditiveExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAdditiveExpression
entryRuleAdditiveExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAdditiveExpressionRule()); }
	 iv_ruleAdditiveExpression=ruleAdditiveExpression 
	 { $current=$iv_ruleAdditiveExpression.current; } 
	 EOF 
;

// Rule AdditiveExpression
ruleAdditiveExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0()); 
    }
    this_MultiplicativeExpression_0=ruleMultiplicativeExpression
    { 
        $current = $this_MultiplicativeExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
(((
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getAdditiveExpressionAccess().getAddExpressionOperandsAction_1_0_0(),
            $current);
    }
)(((	'+' 
(
(
ruleMultiplicativeExpression
)
)))=>(	otherlv_2='+' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAdditiveExpressionAccess().getPlusSignKeyword_1_0_1_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getOperandsMultiplicativeExpressionParserRuleCall_1_0_1_0_1_0()); 
	    }
		lv_operands_3_0=ruleMultiplicativeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditiveExpressionRule());
	        }
       		add(
       			$current, 
       			"operands",
        		lv_operands_3_0, 
        		"MultiplicativeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)))+)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAdditiveExpressionAccess().getSubtractExpressionLeftOperandAction_1_1_0(),
            $current);
    }
)	otherlv_5='-' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getAdditiveExpressionAccess().getHyphenMinusKeyword_1_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getRightOperandMultiplicativeExpressionParserRuleCall_1_1_2_0()); 
	    }
		lv_rightOperand_6_0=ruleMultiplicativeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditiveExpressionRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_6_0, 
        		"MultiplicativeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)))*)
;





// Entry rule entryRuleMultiplicativeExpression
entryRuleMultiplicativeExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultiplicativeExpressionRule()); }
	 iv_ruleMultiplicativeExpression=ruleMultiplicativeExpression 
	 { $current=$iv_ruleMultiplicativeExpression.current; } 
	 EOF 
;

// Rule MultiplicativeExpression
ruleMultiplicativeExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getSignumExpressionParserRuleCall_0()); 
    }
    this_SignumExpression_0=ruleSignumExpression
    { 
        $current = $this_SignumExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
(((
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getMultiplicativeExpressionAccess().getMultiplyExpressionOperandsAction_1_0_0(),
            $current);
    }
)(((	'*' 
(
(
ruleSignumExpression
)
)))=>(	otherlv_2='*' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMultiplicativeExpressionAccess().getAsteriskKeyword_1_0_1_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getOperandsSignumExpressionParserRuleCall_1_0_1_0_1_0()); 
	    }
		lv_operands_3_0=ruleSignumExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
	        }
       		add(
       			$current, 
       			"operands",
        		lv_operands_3_0, 
        		"SignumExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)))+)
    |((((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getMultiplicativeExpressionAccess().getDivideExpressionLeftOperandAction_1_1_0_0_0(),
            $current);
    }
)	otherlv_5='/' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getMultiplicativeExpressionAccess().getSolidusKeyword_1_1_0_0_1());
    }
)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getMultiplicativeExpressionAccess().getDivExpressionLeftOperandAction_1_1_0_1_0(),
            $current);
    }
)	otherlv_7='div' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getMultiplicativeExpressionAccess().getDivKeyword_1_1_0_1_1());
    }
)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getMultiplicativeExpressionAccess().getModExpressionLeftOperandAction_1_1_0_2_0(),
            $current);
    }
)	otherlv_9='mod' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getMultiplicativeExpressionAccess().getModKeyword_1_1_0_2_1());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getRightOperandSignumExpressionParserRuleCall_1_1_1_0()); 
	    }
		lv_rightOperand_10_0=ruleSignumExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_10_0, 
        		"SignumExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)))*)
;





// Entry rule entryRuleAccessExpression
entryRuleAccessExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAccessExpressionRule()); }
	 iv_ruleAccessExpression=ruleAccessExpression 
	 { $current=$iv_ruleAccessExpression.current; } 
	 EOF 
;

// Rule AccessExpression
ruleAccessExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAccessExpressionAccess().getPrimaryExpressionParserRuleCall_0()); 
    }
    this_PrimaryExpression_0=rulePrimaryExpression
    { 
        $current = $this_PrimaryExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
(((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAccessExpressionAccess().getArrayAccessExpressionOperandAction_1_0_0(),
            $current);
    }
)	otherlv_2='[' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAccessExpressionAccess().getLeftSquareBracketKeyword_1_0_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getAccessExpressionAccess().getParametersExpressionParserRuleCall_1_0_2_0_0()); 
	    }
		lv_parameters_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAccessExpressionRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAccessExpressionAccess().getCommaKeyword_1_0_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAccessExpressionAccess().getParametersExpressionParserRuleCall_1_0_2_1_1_0()); 
	    }
		lv_parameters_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAccessExpressionRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_5_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)	otherlv_6=']' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getAccessExpressionAccess().getRightSquareBracketKeyword_1_0_3());
    }
)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAccessExpressionAccess().getFunctionAccessExpressionOperandAction_1_1_0(),
            $current);
    }
)	otherlv_8='(' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getAccessExpressionAccess().getLeftParenthesisKeyword_1_1_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getAccessExpressionAccess().getParametersExpressionParserRuleCall_1_1_2_0_0()); 
	    }
		lv_parameters_9_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAccessExpressionRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_9_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_10=',' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getAccessExpressionAccess().getCommaKeyword_1_1_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAccessExpressionAccess().getParametersExpressionParserRuleCall_1_1_2_1_1_0()); 
	    }
		lv_parameters_11_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAccessExpressionRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_11_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)	otherlv_12=')' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getAccessExpressionAccess().getRightParenthesisKeyword_1_1_3());
    }
)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAccessExpressionAccess().getRecordAccessExpressionOperandAction_1_2_0(),
            $current);
    }
)	otherlv_14='.' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getAccessExpressionAccess().getFullStopKeyword_1_2_1());
    }
(
(
		lv_field_15_0=RULE_ID
		{
			newLeafNode(lv_field_15_0, grammarAccess.getAccessExpressionAccess().getFieldIDTerminalRuleCall_1_2_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAccessExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"field",
        		lv_field_15_0, 
        		"ID");
	    }

)
))
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAccessExpressionAccess().getTupleAccessExpressionOperandAction_1_3_0(),
            $current);
    }
)	otherlv_17='!' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getAccessExpressionAccess().getExclamationMarkKeyword_1_3_1());
    }
(
(
		lv_index_18_0=RULE_INTEGER
		{
			newLeafNode(lv_index_18_0, grammarAccess.getAccessExpressionAccess().getIndexINTEGERTerminalRuleCall_1_3_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAccessExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"index",
        		lv_index_18_0, 
        		"INTEGER");
	    }

)
))
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAccessExpressionAccess().getPrimedExpressionOperandAction_1_4_0(),
            $current);
    }
)	otherlv_20='\'' 
    {
    	newLeafNode(otherlv_20, grammarAccess.getAccessExpressionAccess().getApostropheKeyword_1_4_1());
    }
))*)
;





// Entry rule entryRuleReferenceExpression
entryRuleReferenceExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReferenceExpressionRule()); }
	 iv_ruleReferenceExpression=ruleReferenceExpression 
	 { $current=$iv_ruleReferenceExpression.current; } 
	 EOF 
;

// Rule ReferenceExpression
ruleReferenceExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getReferenceExpressionRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getReferenceExpressionAccess().getDeclarationDeclarationCrossReference_0()); 
	}

)
)
;





// Entry rule entryRuleLiteralExpression
entryRuleLiteralExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralExpressionRule()); }
	 iv_ruleLiteralExpression=ruleLiteralExpression 
	 { $current=$iv_ruleLiteralExpression.current; } 
	 EOF 
;

// Rule LiteralExpression
ruleLiteralExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getLiteralExpressionAccess().getIntegerLiteralExpressionParserRuleCall_0()); 
    }
    this_IntegerLiteralExpression_0=ruleIntegerLiteralExpression
    { 
        $current = $this_IntegerLiteralExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLiteralExpressionAccess().getDecimalLiteralExpressionParserRuleCall_1()); 
    }
    this_DecimalLiteralExpression_1=ruleDecimalLiteralExpression
    { 
        $current = $this_DecimalLiteralExpression_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLiteralExpressionAccess().getRationalLiteralExpressionParserRuleCall_2()); 
    }
    this_RationalLiteralExpression_2=ruleRationalLiteralExpression
    { 
        $current = $this_RationalLiteralExpression_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLiteralExpressionAccess().getBooleanLiteralExpressionParserRuleCall_3()); 
    }
    this_BooleanLiteralExpression_3=ruleBooleanLiteralExpression
    { 
        $current = $this_BooleanLiteralExpression_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLiteralExpressionAccess().getArrayLiteralExpressionParserRuleCall_4()); 
    }
    this_ArrayLiteralExpression_4=ruleArrayLiteralExpression
    { 
        $current = $this_ArrayLiteralExpression_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLiteralExpressionAccess().getRecordLiteralExpressionParserRuleCall_5()); 
    }
    this_RecordLiteralExpression_5=ruleRecordLiteralExpression
    { 
        $current = $this_RecordLiteralExpression_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLiteralExpressionAccess().getTupleLiteralExpressionParserRuleCall_6()); 
    }
    this_TupleLiteralExpression_6=ruleTupleLiteralExpression
    { 
        $current = $this_TupleLiteralExpression_6.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLiteralExpressionAccess().getEnumerationLiteralExpressionParserRuleCall_7()); 
    }
    this_EnumerationLiteralExpression_7=ruleEnumerationLiteralExpression
    { 
        $current = $this_EnumerationLiteralExpression_7.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleIntegerLiteralExpression
entryRuleIntegerLiteralExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntegerLiteralExpressionRule()); }
	 iv_ruleIntegerLiteralExpression=ruleIntegerLiteralExpression 
	 { $current=$iv_ruleIntegerLiteralExpression.current; } 
	 EOF 
;

// Rule IntegerLiteralExpression
ruleIntegerLiteralExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_INTEGER
		{
			newLeafNode(lv_value_0_0, grammarAccess.getIntegerLiteralExpressionAccess().getValueINTEGERTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIntegerLiteralExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"INTEGER");
	    }

)
)
;





// Entry rule entryRuleDecimalLiteralExpression
entryRuleDecimalLiteralExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDecimalLiteralExpressionRule()); }
	 iv_ruleDecimalLiteralExpression=ruleDecimalLiteralExpression 
	 { $current=$iv_ruleDecimalLiteralExpression.current; } 
	 EOF 
;

// Rule DecimalLiteralExpression
ruleDecimalLiteralExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_DECIMAL
		{
			newLeafNode(lv_value_0_0, grammarAccess.getDecimalLiteralExpressionAccess().getValueDECIMALTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDecimalLiteralExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"DECIMAL");
	    }

)
)
;





// Entry rule entryRuleRationalLiteralExpression
entryRuleRationalLiteralExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRationalLiteralExpressionRule()); }
	 iv_ruleRationalLiteralExpression=ruleRationalLiteralExpression 
	 { $current=$iv_ruleRationalLiteralExpression.current; } 
	 EOF 
;

// Rule RationalLiteralExpression
ruleRationalLiteralExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_numerator_0_0=RULE_INTEGER
		{
			newLeafNode(lv_numerator_0_0, grammarAccess.getRationalLiteralExpressionAccess().getNumeratorINTEGERTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRationalLiteralExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"numerator",
        		lv_numerator_0_0, 
        		"INTEGER");
	    }

)
)	otherlv_1='%' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRationalLiteralExpressionAccess().getPercentSignKeyword_1());
    }
(
(
		lv_denominator_2_0=RULE_INTEGER
		{
			newLeafNode(lv_denominator_2_0, grammarAccess.getRationalLiteralExpressionAccess().getDenominatorINTEGERTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRationalLiteralExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"denominator",
        		lv_denominator_2_0, 
        		"INTEGER");
	    }

)
))
;





// Entry rule entryRuleBooleanLiteralExpression
entryRuleBooleanLiteralExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBooleanLiteralExpressionRule()); }
	 iv_ruleBooleanLiteralExpression=ruleBooleanLiteralExpression 
	 { $current=$iv_ruleBooleanLiteralExpression.current; } 
	 EOF 
;

// Rule BooleanLiteralExpression
ruleBooleanLiteralExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBooleanLiteralExpressionAccess().getTrueExpressionParserRuleCall_0()); 
    }
    this_TrueExpression_0=ruleTrueExpression
    { 
        $current = $this_TrueExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBooleanLiteralExpressionAccess().getFalseExpressionParserRuleCall_1()); 
    }
    this_FalseExpression_1=ruleFalseExpression
    { 
        $current = $this_FalseExpression_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleTrueExpression
entryRuleTrueExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTrueExpressionRule()); }
	 iv_ruleTrueExpression=ruleTrueExpression 
	 { $current=$iv_ruleTrueExpression.current; } 
	 EOF 
;

// Rule TrueExpression
ruleTrueExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTrueExpressionAccess().getTrueExpressionAction_0(),
            $current);
    }
)	otherlv_1='true' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTrueExpressionAccess().getTrueKeyword_1());
    }
)
;





// Entry rule entryRuleFalseExpression
entryRuleFalseExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFalseExpressionRule()); }
	 iv_ruleFalseExpression=ruleFalseExpression 
	 { $current=$iv_ruleFalseExpression.current; } 
	 EOF 
;

// Rule FalseExpression
ruleFalseExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFalseExpressionAccess().getFalseExpressionAction_0(),
            $current);
    }
)	otherlv_1='false' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFalseExpressionAccess().getFalseKeyword_1());
    }
)
;





// Entry rule entryRuleArrayLiteralExpression
entryRuleArrayLiteralExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArrayLiteralExpressionRule()); }
	 iv_ruleArrayLiteralExpression=ruleArrayLiteralExpression 
	 { $current=$iv_ruleArrayLiteralExpression.current; } 
	 EOF 
;

// Rule ArrayLiteralExpression
ruleArrayLiteralExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getArrayLiteralExpressionAccess().getLeftSquareBracketKeyword_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getArrayLiteralExpressionAccess().getParameterDeclarationsParameterDeclarationParserRuleCall_1_0_0()); 
	    }
		lv_parameterDeclarations_1_0=ruleParameterDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayLiteralExpressionRule());
	        }
       		add(
       			$current, 
       			"parameterDeclarations",
        		lv_parameterDeclarations_1_0, 
        		"ParameterDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getArrayLiteralExpressionAccess().getCommaKeyword_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrayLiteralExpressionAccess().getParameterDeclarationsParameterDeclarationParserRuleCall_1_1_1_0()); 
	    }
		lv_parameterDeclarations_3_0=ruleParameterDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayLiteralExpressionRule());
	        }
       		add(
       			$current, 
       			"parameterDeclarations",
        		lv_parameterDeclarations_3_0, 
        		"ParameterDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_4='|' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getArrayLiteralExpressionAccess().getVerticalLineKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrayLiteralExpressionAccess().getOperandExpressionParserRuleCall_3_0()); 
	    }
		lv_operand_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayLiteralExpressionRule());
	        }
       		set(
       			$current, 
       			"operand",
        		lv_operand_5_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6=']' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getArrayLiteralExpressionAccess().getRightSquareBracketKeyword_4());
    }
)
;





// Entry rule entryRuleRecordLiteralExpression
entryRuleRecordLiteralExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRecordLiteralExpressionRule()); }
	 iv_ruleRecordLiteralExpression=ruleRecordLiteralExpression 
	 { $current=$iv_ruleRecordLiteralExpression.current; } 
	 EOF 
;

// Rule RecordLiteralExpression
ruleRecordLiteralExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='(#' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRecordLiteralExpressionAccess().getLeftParenthesisNumberSignKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRecordLiteralExpressionAccess().getFieldAssignmentsFieldAssignmentParserRuleCall_1_0()); 
	    }
		lv_fieldAssignments_1_0=ruleFieldAssignment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRecordLiteralExpressionRule());
	        }
       		add(
       			$current, 
       			"fieldAssignments",
        		lv_fieldAssignments_1_0, 
        		"FieldAssignment");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRecordLiteralExpressionAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRecordLiteralExpressionAccess().getFieldAssignmentsFieldAssignmentParserRuleCall_2_1_0()); 
	    }
		lv_fieldAssignments_3_0=ruleFieldAssignment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRecordLiteralExpressionRule());
	        }
       		add(
       			$current, 
       			"fieldAssignments",
        		lv_fieldAssignments_3_0, 
        		"FieldAssignment");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_4='#)' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getRecordLiteralExpressionAccess().getNumberSignRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleFieldAssignment
entryRuleFieldAssignment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFieldAssignmentRule()); }
	 iv_ruleFieldAssignment=ruleFieldAssignment 
	 { $current=$iv_ruleFieldAssignment.current; } 
	 EOF 
;

// Rule FieldAssignment
ruleFieldAssignment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_reference_0_0=RULE_ID
		{
			newLeafNode(lv_reference_0_0, grammarAccess.getFieldAssignmentAccess().getReferenceIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFieldAssignmentRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"reference",
        		lv_reference_0_0, 
        		"ID");
	    }

)
)	otherlv_1=':=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFieldAssignmentAccess().getColonEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFieldAssignmentAccess().getValueExpressionParserRuleCall_2_0()); 
	    }
		lv_value_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFieldAssignmentRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleTupleLiteralExpression
entryRuleTupleLiteralExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTupleLiteralExpressionRule()); }
	 iv_ruleTupleLiteralExpression=ruleTupleLiteralExpression 
	 { $current=$iv_ruleTupleLiteralExpression.current; } 
	 EOF 
;

// Rule TupleLiteralExpression
ruleTupleLiteralExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='(#' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTupleLiteralExpressionAccess().getLeftParenthesisNumberSignKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTupleLiteralExpressionAccess().getExpressionsExpressionParserRuleCall_1_0()); 
	    }
		lv_expressions_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTupleLiteralExpressionRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTupleLiteralExpressionAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTupleLiteralExpressionAccess().getExpressionsExpressionParserRuleCall_2_1_0()); 
	    }
		lv_expressions_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTupleLiteralExpressionRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_4='#)' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTupleLiteralExpressionAccess().getNumberSignRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleEnumerationLiteralExpression
entryRuleEnumerationLiteralExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnumerationLiteralExpressionRule()); }
	 iv_ruleEnumerationLiteralExpression=ruleEnumerationLiteralExpression 
	 { $current=$iv_ruleEnumerationLiteralExpression.current; } 
	 EOF 
;

// Rule EnumerationLiteralExpression
ruleEnumerationLiteralExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='::' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getEnumerationLiteralExpressionAccess().getColonColonKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getEnumerationLiteralExpressionRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getEnumerationLiteralExpressionAccess().getReferenceEnumerationLiteralDefinitionCrossReference_1_0()); 
	}

)
))
;





// Entry rule entryRuleBasicConstraintDefinition
entryRuleBasicConstraintDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBasicConstraintDefinitionRule()); }
	 iv_ruleBasicConstraintDefinition=ruleBasicConstraintDefinition 
	 { $current=$iv_ruleBasicConstraintDefinition.current; } 
	 EOF 
;

// Rule BasicConstraintDefinition
ruleBasicConstraintDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='constraint' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getBasicConstraintDefinitionAccess().getConstraintKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBasicConstraintDefinitionAccess().getExpressionExpressionParserRuleCall_1_0()); 
	    }
		lv_expression_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBasicConstraintDefinitionRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





RULE_INT : 'INT has been deactivated';

RULE_STRING : 'STRING has been deactivated';

RULE_INTEGER : '-'? ('0'..'9')+;

RULE_DECIMAL : '-'? ('0'..'9')+ '.' ('0'..'9')+;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


