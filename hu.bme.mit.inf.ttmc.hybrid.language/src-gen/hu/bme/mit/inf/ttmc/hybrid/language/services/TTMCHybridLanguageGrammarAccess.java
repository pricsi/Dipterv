/*
 * generated by Xtext
 */
package hu.bme.mit.inf.ttmc.hybrid.language.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import hu.bme.mit.inf.ttmc.constraint.language.services.TTMCConstraintLanguageGrammarAccess;

@Singleton
public class TTMCHybridLanguageGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class HybridSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HybridSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSpecificationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cParameterDeclarationsAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cParameterDeclarationsParameterDeclarationParserRuleCall_2_1_0_0 = (RuleCall)cParameterDeclarationsAssignment_2_1_0.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final Assignment cParameterDeclarationsAssignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final RuleCall cParameterDeclarationsParameterDeclarationParserRuleCall_2_1_1_1_0 = (RuleCall)cParameterDeclarationsAssignment_2_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cTypeDeclarationsAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cTypeDeclarationsTypeDeclarationParserRuleCall_4_0_0 = (RuleCall)cTypeDeclarationsAssignment_4_0.eContents().get(0);
		private final Assignment cFunctionDeclarationsAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cFunctionDeclarationsFunctionDeclarationParserRuleCall_4_1_0 = (RuleCall)cFunctionDeclarationsAssignment_4_1.eContents().get(0);
		private final Assignment cConstantDeclarationsAssignment_4_2 = (Assignment)cAlternatives_4.eContents().get(2);
		private final RuleCall cConstantDeclarationsConstantDeclarationParserRuleCall_4_2_0 = (RuleCall)cConstantDeclarationsAssignment_4_2.eContents().get(0);
		private final Assignment cBasicConstraintDefinitionsAssignment_4_3 = (Assignment)cAlternatives_4.eContents().get(3);
		private final RuleCall cBasicConstraintDefinitionsBasicConstraintDefinitionParserRuleCall_4_3_0 = (RuleCall)cBasicConstraintDefinitionsAssignment_4_3.eContents().get(0);
		private final Assignment cHybridAutomatonDeclarationsAssignment_4_4 = (Assignment)cAlternatives_4.eContents().get(4);
		private final RuleCall cHybridAutomatonDeclarationsHybridAutomatonDeclarationParserRuleCall_4_4_0 = (RuleCall)cHybridAutomatonDeclarationsAssignment_4_4.eContents().get(0);
		private final Assignment cPropertyDeclarationsAssignment_4_5 = (Assignment)cAlternatives_4.eContents().get(5);
		private final RuleCall cPropertyDeclarationsPropertyDeclarationParserRuleCall_4_5_0 = (RuleCall)cPropertyDeclarationsAssignment_4_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//HybridSpecification:
		//	"specification" name=ID ("(" (parameterDeclarations+=ParameterDeclaration (","
		//	parameterDeclarations+=ParameterDeclaration)*)? ")")? "{" (typeDeclarations+=TypeDeclaration |
		//	functionDeclarations+=FunctionDeclaration | constantDeclarations+=ConstantDeclaration |
		//	basicConstraintDefinitions+=BasicConstraintDefinition | hybridAutomatonDeclarations+=HybridAutomatonDeclaration |
		//	propertyDeclarations+=PropertyDeclaration)* "}";
		@Override public ParserRule getRule() { return rule; }

		//"specification" name=ID ("(" (parameterDeclarations+=ParameterDeclaration (","
		//parameterDeclarations+=ParameterDeclaration)*)? ")")? "{" (typeDeclarations+=TypeDeclaration |
		//functionDeclarations+=FunctionDeclaration | constantDeclarations+=ConstantDeclaration |
		//basicConstraintDefinitions+=BasicConstraintDefinition | hybridAutomatonDeclarations+=HybridAutomatonDeclaration |
		//propertyDeclarations+=PropertyDeclaration)* "}"
		public Group getGroup() { return cGroup; }

		//"specification"
		public Keyword getSpecificationKeyword_0() { return cSpecificationKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("(" (parameterDeclarations+=ParameterDeclaration ("," parameterDeclarations+=ParameterDeclaration)*)? ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//(parameterDeclarations+=ParameterDeclaration ("," parameterDeclarations+=ParameterDeclaration)*)?
		public Group getGroup_2_1() { return cGroup_2_1; }

		//parameterDeclarations+=ParameterDeclaration
		public Assignment getParameterDeclarationsAssignment_2_1_0() { return cParameterDeclarationsAssignment_2_1_0; }

		//ParameterDeclaration
		public RuleCall getParameterDeclarationsParameterDeclarationParserRuleCall_2_1_0_0() { return cParameterDeclarationsParameterDeclarationParserRuleCall_2_1_0_0; }

		//("," parameterDeclarations+=ParameterDeclaration)*
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }

		//","
		public Keyword getCommaKeyword_2_1_1_0() { return cCommaKeyword_2_1_1_0; }

		//parameterDeclarations+=ParameterDeclaration
		public Assignment getParameterDeclarationsAssignment_2_1_1_1() { return cParameterDeclarationsAssignment_2_1_1_1; }

		//ParameterDeclaration
		public RuleCall getParameterDeclarationsParameterDeclarationParserRuleCall_2_1_1_1_0() { return cParameterDeclarationsParameterDeclarationParserRuleCall_2_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//(typeDeclarations+=TypeDeclaration | functionDeclarations+=FunctionDeclaration |
		//constantDeclarations+=ConstantDeclaration | basicConstraintDefinitions+=BasicConstraintDefinition |
		//hybridAutomatonDeclarations+=HybridAutomatonDeclaration | propertyDeclarations+=PropertyDeclaration)*
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//typeDeclarations+=TypeDeclaration
		public Assignment getTypeDeclarationsAssignment_4_0() { return cTypeDeclarationsAssignment_4_0; }

		//TypeDeclaration
		public RuleCall getTypeDeclarationsTypeDeclarationParserRuleCall_4_0_0() { return cTypeDeclarationsTypeDeclarationParserRuleCall_4_0_0; }

		//functionDeclarations+=FunctionDeclaration
		public Assignment getFunctionDeclarationsAssignment_4_1() { return cFunctionDeclarationsAssignment_4_1; }

		//FunctionDeclaration
		public RuleCall getFunctionDeclarationsFunctionDeclarationParserRuleCall_4_1_0() { return cFunctionDeclarationsFunctionDeclarationParserRuleCall_4_1_0; }

		//constantDeclarations+=ConstantDeclaration
		public Assignment getConstantDeclarationsAssignment_4_2() { return cConstantDeclarationsAssignment_4_2; }

		//ConstantDeclaration
		public RuleCall getConstantDeclarationsConstantDeclarationParserRuleCall_4_2_0() { return cConstantDeclarationsConstantDeclarationParserRuleCall_4_2_0; }

		//basicConstraintDefinitions+=BasicConstraintDefinition
		public Assignment getBasicConstraintDefinitionsAssignment_4_3() { return cBasicConstraintDefinitionsAssignment_4_3; }

		//BasicConstraintDefinition
		public RuleCall getBasicConstraintDefinitionsBasicConstraintDefinitionParserRuleCall_4_3_0() { return cBasicConstraintDefinitionsBasicConstraintDefinitionParserRuleCall_4_3_0; }

		//hybridAutomatonDeclarations+=HybridAutomatonDeclaration
		public Assignment getHybridAutomatonDeclarationsAssignment_4_4() { return cHybridAutomatonDeclarationsAssignment_4_4; }

		//HybridAutomatonDeclaration
		public RuleCall getHybridAutomatonDeclarationsHybridAutomatonDeclarationParserRuleCall_4_4_0() { return cHybridAutomatonDeclarationsHybridAutomatonDeclarationParserRuleCall_4_4_0; }

		//propertyDeclarations+=PropertyDeclaration
		public Assignment getPropertyDeclarationsAssignment_4_5() { return cPropertyDeclarationsAssignment_4_5; }

		//PropertyDeclaration
		public RuleCall getPropertyDeclarationsPropertyDeclarationParserRuleCall_4_5_0() { return cPropertyDeclarationsPropertyDeclarationParserRuleCall_4_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class TypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNaturalTypeDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntegerTypeDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBooleanTypeDefinitionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRealTypeDefinitionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cArrayTypeDefinitionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cEnumerationTypeDefinitionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cRecordTypeDefinitionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cTupleTypeDefinitionParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cSubrangeTypeDefinitionParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cSubTypeDefinitionParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cFunctionTypeDefinitionParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cClockTypeDefinitionParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		
		//// override
		//TypeDefinition returns TTMCConstraint::TypeDefinition:
		//	NaturalTypeDefinition | IntegerTypeDefinition | BooleanTypeDefinition | RealTypeDefinition | ArrayTypeDefinition |
		//	EnumerationTypeDefinition | RecordTypeDefinition | TupleTypeDefinition | SubrangeTypeDefinition | SubTypeDefinition |
		//	FunctionTypeDefinition | // add
		//	ClockTypeDefinition;
		@Override public ParserRule getRule() { return rule; }

		//NaturalTypeDefinition | IntegerTypeDefinition | BooleanTypeDefinition | RealTypeDefinition | ArrayTypeDefinition |
		//EnumerationTypeDefinition | RecordTypeDefinition | TupleTypeDefinition | SubrangeTypeDefinition | SubTypeDefinition |
		//FunctionTypeDefinition | // add
		//ClockTypeDefinition
		public Alternatives getAlternatives() { return cAlternatives; }

		//NaturalTypeDefinition
		public RuleCall getNaturalTypeDefinitionParserRuleCall_0() { return cNaturalTypeDefinitionParserRuleCall_0; }

		//IntegerTypeDefinition
		public RuleCall getIntegerTypeDefinitionParserRuleCall_1() { return cIntegerTypeDefinitionParserRuleCall_1; }

		//BooleanTypeDefinition
		public RuleCall getBooleanTypeDefinitionParserRuleCall_2() { return cBooleanTypeDefinitionParserRuleCall_2; }

		//RealTypeDefinition
		public RuleCall getRealTypeDefinitionParserRuleCall_3() { return cRealTypeDefinitionParserRuleCall_3; }

		//ArrayTypeDefinition
		public RuleCall getArrayTypeDefinitionParserRuleCall_4() { return cArrayTypeDefinitionParserRuleCall_4; }

		//EnumerationTypeDefinition
		public RuleCall getEnumerationTypeDefinitionParserRuleCall_5() { return cEnumerationTypeDefinitionParserRuleCall_5; }

		//RecordTypeDefinition
		public RuleCall getRecordTypeDefinitionParserRuleCall_6() { return cRecordTypeDefinitionParserRuleCall_6; }

		//TupleTypeDefinition
		public RuleCall getTupleTypeDefinitionParserRuleCall_7() { return cTupleTypeDefinitionParserRuleCall_7; }

		//SubrangeTypeDefinition
		public RuleCall getSubrangeTypeDefinitionParserRuleCall_8() { return cSubrangeTypeDefinitionParserRuleCall_8; }

		//SubTypeDefinition
		public RuleCall getSubTypeDefinitionParserRuleCall_9() { return cSubTypeDefinitionParserRuleCall_9; }

		//FunctionTypeDefinition
		public RuleCall getFunctionTypeDefinitionParserRuleCall_10() { return cFunctionTypeDefinitionParserRuleCall_10; }

		//// add
		//ClockTypeDefinition
		public RuleCall getClockTypeDefinitionParserRuleCall_11() { return cClockTypeDefinitionParserRuleCall_11; }
	}

	public class ClockTypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClockTypeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cClockTypeDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cClockKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ClockTypeDefinition:
		//	{ClockTypeDefinition} "clock";
		@Override public ParserRule getRule() { return rule; }

		//{ClockTypeDefinition} "clock"
		public Group getGroup() { return cGroup; }

		//{ClockTypeDefinition}
		public Action getClockTypeDefinitionAction_0() { return cClockTypeDefinitionAction_0; }

		//"clock"
		public Keyword getClockKeyword_1() { return cClockKeyword_1; }
	}

	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cReferenceExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLocationReferenceExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//// override
		//PrimaryExpression returns TTMCConstraint::Expression:
		//	LiteralExpression | ReferenceExpression | // add
		//	LocationReferenceExpression | "(" Expression ")";
		@Override public ParserRule getRule() { return rule; }

		//LiteralExpression | ReferenceExpression | // add
		//LocationReferenceExpression | "(" Expression ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//LiteralExpression
		public RuleCall getLiteralExpressionParserRuleCall_0() { return cLiteralExpressionParserRuleCall_0; }

		//ReferenceExpression
		public RuleCall getReferenceExpressionParserRuleCall_1() { return cReferenceExpressionParserRuleCall_1; }

		//// add
		//LocationReferenceExpression
		public RuleCall getLocationReferenceExpressionParserRuleCall_2() { return cLocationReferenceExpressionParserRuleCall_2; }

		//"(" Expression ")"
		public Group getGroup_3() { return cGroup_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_3_1() { return cExpressionParserRuleCall_3_1; }

		//")"
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
	}

	public class LocationReferenceExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LocationReferenceExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLocationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cLocationLocationCrossReference_1_0 = (CrossReference)cLocationAssignment_1.eContents().get(0);
		private final RuleCall cLocationLocationIDTerminalRuleCall_1_0_1 = (RuleCall)cLocationLocationCrossReference_1_0.eContents().get(1);
		
		//LocationReferenceExpression:
		//	"@" location=[Location];
		@Override public ParserRule getRule() { return rule; }

		//"@" location=[Location]
		public Group getGroup() { return cGroup; }

		//"@"
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }

		//location=[Location]
		public Assignment getLocationAssignment_1() { return cLocationAssignment_1; }

		//[Location]
		public CrossReference getLocationLocationCrossReference_1_0() { return cLocationLocationCrossReference_1_0; }

		//ID
		public RuleCall getLocationLocationIDTerminalRuleCall_1_0_1() { return cLocationLocationIDTerminalRuleCall_1_0_1; }
	}

	public class SignumExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SignumExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cUnaryMinusExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cOperandAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cOperandSignumExpressionParserRuleCall_0_2_0 = (RuleCall)cOperandAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cUnaryPlusExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperandSignumExpressionParserRuleCall_1_2_0 = (RuleCall)cOperandAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cDotExpressionAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cDKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cOperandAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cOperandSignumExpressionParserRuleCall_2_2_0 = (RuleCall)cOperandAssignment_2_2.eContents().get(0);
		private final RuleCall cAccessExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//// override
		//SignumExpression returns TTMCConstraint::Expression:
		//	{TTMCConstraint::UnaryMinusExpression} => "-" operand=SignumExpression | {TTMCConstraint::UnaryPlusExpression} => "+"
		//	operand=SignumExpression | // add
		//	{DotExpression} => "d" operand=SignumExpression | AccessExpression;
		@Override public ParserRule getRule() { return rule; }

		//{TTMCConstraint::UnaryMinusExpression} => "-" operand=SignumExpression | {TTMCConstraint::UnaryPlusExpression} => "+"
		//operand=SignumExpression | // add
		//{DotExpression} => "d" operand=SignumExpression | AccessExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//{TTMCConstraint::UnaryMinusExpression} => "-" operand=SignumExpression
		public Group getGroup_0() { return cGroup_0; }

		//{TTMCConstraint::UnaryMinusExpression}
		public Action getUnaryMinusExpressionAction_0_0() { return cUnaryMinusExpressionAction_0_0; }

		//=> "-"
		public Keyword getHyphenMinusKeyword_0_1() { return cHyphenMinusKeyword_0_1; }

		//operand=SignumExpression
		public Assignment getOperandAssignment_0_2() { return cOperandAssignment_0_2; }

		//SignumExpression
		public RuleCall getOperandSignumExpressionParserRuleCall_0_2_0() { return cOperandSignumExpressionParserRuleCall_0_2_0; }

		//{TTMCConstraint::UnaryPlusExpression} => "+" operand=SignumExpression
		public Group getGroup_1() { return cGroup_1; }

		//{TTMCConstraint::UnaryPlusExpression}
		public Action getUnaryPlusExpressionAction_1_0() { return cUnaryPlusExpressionAction_1_0; }

		//=> "+"
		public Keyword getPlusSignKeyword_1_1() { return cPlusSignKeyword_1_1; }

		//operand=SignumExpression
		public Assignment getOperandAssignment_1_2() { return cOperandAssignment_1_2; }

		//SignumExpression
		public RuleCall getOperandSignumExpressionParserRuleCall_1_2_0() { return cOperandSignumExpressionParserRuleCall_1_2_0; }

		//// add
		//{DotExpression} => "d" operand=SignumExpression
		public Group getGroup_2() { return cGroup_2; }

		//// add
		//{DotExpression}
		public Action getDotExpressionAction_2_0() { return cDotExpressionAction_2_0; }

		//=> "d"
		public Keyword getDKeyword_2_1() { return cDKeyword_2_1; }

		//operand=SignumExpression
		public Assignment getOperandAssignment_2_2() { return cOperandAssignment_2_2; }

		//SignumExpression
		public RuleCall getOperandSignumExpressionParserRuleCall_2_2_0() { return cOperandSignumExpressionParserRuleCall_2_2_0; }

		//AccessExpression
		public RuleCall getAccessExpressionParserRuleCall_3() { return cAccessExpressionParserRuleCall_3; }
	}

	public class HybridAutomatonDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HybridAutomatonDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAutomatonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cParameterDeclarationsAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cParameterDeclarationsParameterDeclarationParserRuleCall_2_1_0_0 = (RuleCall)cParameterDeclarationsAssignment_2_1_0.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final Assignment cParameterDeclarationsAssignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final RuleCall cParameterDeclarationsParameterDeclarationParserRuleCall_2_1_1_1_0 = (RuleCall)cParameterDeclarationsAssignment_2_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cColonEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cHybridAutomatonAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cHybridAutomatonHybridAutomatonParserRuleCall_4_0 = (RuleCall)cHybridAutomatonAssignment_4.eContents().get(0);
		
		//HybridAutomatonDeclaration:
		//	"automaton" name=ID ("(" (parameterDeclarations+=ParameterDeclaration (","
		//	parameterDeclarations+=ParameterDeclaration)*)? ")")? ":=" hybridAutomaton=HybridAutomaton;
		@Override public ParserRule getRule() { return rule; }

		//"automaton" name=ID ("(" (parameterDeclarations+=ParameterDeclaration (","
		//parameterDeclarations+=ParameterDeclaration)*)? ")")? ":=" hybridAutomaton=HybridAutomaton
		public Group getGroup() { return cGroup; }

		//"automaton"
		public Keyword getAutomatonKeyword_0() { return cAutomatonKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("(" (parameterDeclarations+=ParameterDeclaration ("," parameterDeclarations+=ParameterDeclaration)*)? ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//(parameterDeclarations+=ParameterDeclaration ("," parameterDeclarations+=ParameterDeclaration)*)?
		public Group getGroup_2_1() { return cGroup_2_1; }

		//parameterDeclarations+=ParameterDeclaration
		public Assignment getParameterDeclarationsAssignment_2_1_0() { return cParameterDeclarationsAssignment_2_1_0; }

		//ParameterDeclaration
		public RuleCall getParameterDeclarationsParameterDeclarationParserRuleCall_2_1_0_0() { return cParameterDeclarationsParameterDeclarationParserRuleCall_2_1_0_0; }

		//("," parameterDeclarations+=ParameterDeclaration)*
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }

		//","
		public Keyword getCommaKeyword_2_1_1_0() { return cCommaKeyword_2_1_1_0; }

		//parameterDeclarations+=ParameterDeclaration
		public Assignment getParameterDeclarationsAssignment_2_1_1_1() { return cParameterDeclarationsAssignment_2_1_1_1; }

		//ParameterDeclaration
		public RuleCall getParameterDeclarationsParameterDeclarationParserRuleCall_2_1_1_1_0() { return cParameterDeclarationsParameterDeclarationParserRuleCall_2_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }

		//":="
		public Keyword getColonEqualsSignKeyword_3() { return cColonEqualsSignKeyword_3; }

		//hybridAutomaton=HybridAutomaton
		public Assignment getHybridAutomatonAssignment_4() { return cHybridAutomatonAssignment_4; }

		//HybridAutomaton
		public RuleCall getHybridAutomatonHybridAutomatonParserRuleCall_4_0() { return cHybridAutomatonHybridAutomatonParserRuleCall_4_0; }
	}

	public class HybridAutomatonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HybridAutomaton");
		private final RuleCall cHybridAutomatonDefinitionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//HybridAutomaton:
		//	HybridAutomatonDefinition;
		@Override public ParserRule getRule() { return rule; }

		//HybridAutomatonDefinition
		public RuleCall getHybridAutomatonDefinitionParserRuleCall() { return cHybridAutomatonDefinitionParserRuleCall; }
	}

	public class HybridAutomatonDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HybridAutomatonDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cHybridAutomatonDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cVariableDeclarationsAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cVariableDeclarationsVariableDeclarationParserRuleCall_2_0_0 = (RuleCall)cVariableDeclarationsAssignment_2_0.eContents().get(0);
		private final Assignment cLocationsAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cLocationsLocationParserRuleCall_2_1_0 = (RuleCall)cLocationsAssignment_2_1.eContents().get(0);
		private final Assignment cTransitionsAssignment_2_2 = (Assignment)cAlternatives_2.eContents().get(2);
		private final RuleCall cTransitionsTransitionParserRuleCall_2_2_0 = (RuleCall)cTransitionsAssignment_2_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//HybridAutomatonDefinition:
		//	{HybridAutomatonDefinition} "{" (variableDeclarations+=VariableDeclaration | locations+=Location |
		//	transitions+=Transition)* "}";
		@Override public ParserRule getRule() { return rule; }

		//{HybridAutomatonDefinition} "{" (variableDeclarations+=VariableDeclaration | locations+=Location |
		//transitions+=Transition)* "}"
		public Group getGroup() { return cGroup; }

		//{HybridAutomatonDefinition}
		public Action getHybridAutomatonDefinitionAction_0() { return cHybridAutomatonDefinitionAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//(variableDeclarations+=VariableDeclaration | locations+=Location | transitions+=Transition)*
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//variableDeclarations+=VariableDeclaration
		public Assignment getVariableDeclarationsAssignment_2_0() { return cVariableDeclarationsAssignment_2_0; }

		//VariableDeclaration
		public RuleCall getVariableDeclarationsVariableDeclarationParserRuleCall_2_0_0() { return cVariableDeclarationsVariableDeclarationParserRuleCall_2_0_0; }

		//locations+=Location
		public Assignment getLocationsAssignment_2_1() { return cLocationsAssignment_2_1; }

		//Location
		public RuleCall getLocationsLocationParserRuleCall_2_1_0() { return cLocationsLocationParserRuleCall_2_1_0; }

		//transitions+=Transition
		public Assignment getTransitionsAssignment_2_2() { return cTransitionsAssignment_2_2; }

		//Transition
		public RuleCall getTransitionsTransitionParserRuleCall_2_2_0() { return cTransitionsTransitionParserRuleCall_2_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class VariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGlobalVariableDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLocalVariableDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//VariableDeclaration:
		//	GlobalVariableDeclaration | LocalVariableDeclaration;
		@Override public ParserRule getRule() { return rule; }

		//GlobalVariableDeclaration | LocalVariableDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }

		//GlobalVariableDeclaration
		public RuleCall getGlobalVariableDeclarationParserRuleCall_0() { return cGlobalVariableDeclarationParserRuleCall_0; }

		//LocalVariableDeclaration
		public RuleCall getLocalVariableDeclarationParserRuleCall_1() { return cLocalVariableDeclarationParserRuleCall_1; }
	}

	public class GlobalVariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GlobalVariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGlobalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		//GlobalVariableDeclaration:
		//	"global" name=ID ":" type=Type;
		@Override public ParserRule getRule() { return rule; }

		//"global" name=ID ":" type=Type
		public Group getGroup() { return cGroup; }

		//"global"
		public Keyword getGlobalKeyword_0() { return cGlobalKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//type=Type
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_3_0() { return cTypeTypeParserRuleCall_3_0; }
	}

	public class LocalVariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LocalVariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLocalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		//LocalVariableDeclaration:
		//	"local" name=ID ":" type=Type;
		@Override public ParserRule getRule() { return rule; }

		//"local" name=ID ":" type=Type
		public Group getGroup() { return cGroup; }

		//"local"
		public Keyword getLocalKeyword_0() { return cLocalKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//type=Type
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_3_0() { return cTypeTypeParserRuleCall_3_0; }
	}

	public class LocationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Location");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLocationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cConditionsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cConditionsConditionParserRuleCall_2_1_0 = (RuleCall)cConditionsAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//Location:
		//	"location" name=ID ("{" conditions+=Condition* "}")?;
		@Override public ParserRule getRule() { return rule; }

		//"location" name=ID ("{" conditions+=Condition* "}")?
		public Group getGroup() { return cGroup; }

		//"location"
		public Keyword getLocationKeyword_0() { return cLocationKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("{" conditions+=Condition* "}")?
		public Group getGroup_2() { return cGroup_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }

		//conditions+=Condition*
		public Assignment getConditionsAssignment_2_1() { return cConditionsAssignment_2_1; }

		//Condition
		public RuleCall getConditionsConditionParserRuleCall_2_1_0() { return cConditionsConditionParserRuleCall_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }
	}

	public class TransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Transition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTransitionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSourceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cSourceLocationCrossReference_1_0 = (CrossReference)cSourceAssignment_1.eContents().get(0);
		private final RuleCall cSourceLocationIDTerminalRuleCall_1_0_1 = (RuleCall)cSourceLocationCrossReference_1_0.eContents().get(1);
		private final Keyword cToKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTargetAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTargetLocationCrossReference_3_0 = (CrossReference)cTargetAssignment_3.eContents().get(0);
		private final RuleCall cTargetLocationIDTerminalRuleCall_3_0_1 = (RuleCall)cTargetLocationCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cParameterDeclarationsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cParameterDeclarationsParameterDeclarationParserRuleCall_4_1_0 = (RuleCall)cParameterDeclarationsAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cParameterDeclarationsAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cParameterDeclarationsParameterDeclarationParserRuleCall_4_2_1_0 = (RuleCall)cParameterDeclarationsAssignment_4_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLeftSquareBracketKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cGuardsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cGuardsExpressionParserRuleCall_5_1_0 = (RuleCall)cGuardsAssignment_5_1.eContents().get(0);
		private final Group cGroup_5_2 = (Group)cGroup_5.eContents().get(2);
		private final Keyword cCommaKeyword_5_2_0 = (Keyword)cGroup_5_2.eContents().get(0);
		private final Assignment cGuardsAssignment_5_2_1 = (Assignment)cGroup_5_2.eContents().get(1);
		private final RuleCall cGuardsExpressionParserRuleCall_5_2_1_0 = (RuleCall)cGuardsAssignment_5_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cLeftCurlyBracketKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cAssignmentsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cAssignmentsAssignmentParserRuleCall_6_1_0 = (RuleCall)cAssignmentsAssignment_6_1.eContents().get(0);
		private final Group cGroup_6_2 = (Group)cGroup_6.eContents().get(2);
		private final Keyword cCommaKeyword_6_2_0 = (Keyword)cGroup_6_2.eContents().get(0);
		private final Assignment cAssignmentsAssignment_6_2_1 = (Assignment)cGroup_6_2.eContents().get(1);
		private final RuleCall cAssignmentsAssignmentParserRuleCall_6_2_1_0 = (RuleCall)cAssignmentsAssignment_6_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		
		//Transition:
		//	"transition" source=[Location] "to" target=[Location] ("(" parameterDeclarations+=ParameterDeclaration (","
		//	parameterDeclarations+=ParameterDeclaration)* ")")? ("[" guards+=Expression ("," guards+=Expression)* "]")? ("{"
		//	assignments+=Assignment ("," assignments+=Assignment)* "}")?;
		@Override public ParserRule getRule() { return rule; }

		//"transition" source=[Location] "to" target=[Location] ("(" parameterDeclarations+=ParameterDeclaration (","
		//parameterDeclarations+=ParameterDeclaration)* ")")? ("[" guards+=Expression ("," guards+=Expression)* "]")? ("{"
		//assignments+=Assignment ("," assignments+=Assignment)* "}")?
		public Group getGroup() { return cGroup; }

		//"transition"
		public Keyword getTransitionKeyword_0() { return cTransitionKeyword_0; }

		//source=[Location]
		public Assignment getSourceAssignment_1() { return cSourceAssignment_1; }

		//[Location]
		public CrossReference getSourceLocationCrossReference_1_0() { return cSourceLocationCrossReference_1_0; }

		//ID
		public RuleCall getSourceLocationIDTerminalRuleCall_1_0_1() { return cSourceLocationIDTerminalRuleCall_1_0_1; }

		//"to"
		public Keyword getToKeyword_2() { return cToKeyword_2; }

		//target=[Location]
		public Assignment getTargetAssignment_3() { return cTargetAssignment_3; }

		//[Location]
		public CrossReference getTargetLocationCrossReference_3_0() { return cTargetLocationCrossReference_3_0; }

		//ID
		public RuleCall getTargetLocationIDTerminalRuleCall_3_0_1() { return cTargetLocationIDTerminalRuleCall_3_0_1; }

		//("(" parameterDeclarations+=ParameterDeclaration ("," parameterDeclarations+=ParameterDeclaration)* ")")?
		public Group getGroup_4() { return cGroup_4; }

		//"("
		public Keyword getLeftParenthesisKeyword_4_0() { return cLeftParenthesisKeyword_4_0; }

		//parameterDeclarations+=ParameterDeclaration
		public Assignment getParameterDeclarationsAssignment_4_1() { return cParameterDeclarationsAssignment_4_1; }

		//ParameterDeclaration
		public RuleCall getParameterDeclarationsParameterDeclarationParserRuleCall_4_1_0() { return cParameterDeclarationsParameterDeclarationParserRuleCall_4_1_0; }

		//("," parameterDeclarations+=ParameterDeclaration)*
		public Group getGroup_4_2() { return cGroup_4_2; }

		//","
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }

		//parameterDeclarations+=ParameterDeclaration
		public Assignment getParameterDeclarationsAssignment_4_2_1() { return cParameterDeclarationsAssignment_4_2_1; }

		//ParameterDeclaration
		public RuleCall getParameterDeclarationsParameterDeclarationParserRuleCall_4_2_1_0() { return cParameterDeclarationsParameterDeclarationParserRuleCall_4_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4_3() { return cRightParenthesisKeyword_4_3; }

		//("[" guards+=Expression ("," guards+=Expression)* "]")?
		public Group getGroup_5() { return cGroup_5; }

		//"["
		public Keyword getLeftSquareBracketKeyword_5_0() { return cLeftSquareBracketKeyword_5_0; }

		//guards+=Expression
		public Assignment getGuardsAssignment_5_1() { return cGuardsAssignment_5_1; }

		//Expression
		public RuleCall getGuardsExpressionParserRuleCall_5_1_0() { return cGuardsExpressionParserRuleCall_5_1_0; }

		//("," guards+=Expression)*
		public Group getGroup_5_2() { return cGroup_5_2; }

		//","
		public Keyword getCommaKeyword_5_2_0() { return cCommaKeyword_5_2_0; }

		//guards+=Expression
		public Assignment getGuardsAssignment_5_2_1() { return cGuardsAssignment_5_2_1; }

		//Expression
		public RuleCall getGuardsExpressionParserRuleCall_5_2_1_0() { return cGuardsExpressionParserRuleCall_5_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_5_3() { return cRightSquareBracketKeyword_5_3; }

		//("{" assignments+=Assignment ("," assignments+=Assignment)* "}")?
		public Group getGroup_6() { return cGroup_6; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6_0() { return cLeftCurlyBracketKeyword_6_0; }

		//assignments+=Assignment
		public Assignment getAssignmentsAssignment_6_1() { return cAssignmentsAssignment_6_1; }

		//Assignment
		public RuleCall getAssignmentsAssignmentParserRuleCall_6_1_0() { return cAssignmentsAssignmentParserRuleCall_6_1_0; }

		//("," assignments+=Assignment)*
		public Group getGroup_6_2() { return cGroup_6_2; }

		//","
		public Keyword getCommaKeyword_6_2_0() { return cCommaKeyword_6_2_0; }

		//assignments+=Assignment
		public Assignment getAssignmentsAssignment_6_2_1() { return cAssignmentsAssignment_6_2_1; }

		//Assignment
		public RuleCall getAssignmentsAssignmentParserRuleCall_6_2_1_0() { return cAssignmentsAssignmentParserRuleCall_6_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6_3() { return cRightCurlyBracketKeyword_6_3; }
	}

	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLhsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLhsExpressionParserRuleCall_0_0 = (RuleCall)cLhsAssignment_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRhsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRhsExpressionParserRuleCall_2_0 = (RuleCall)cRhsAssignment_2.eContents().get(0);
		
		//Assignment:
		//	lhs=Expression ":=" rhs=Expression;
		@Override public ParserRule getRule() { return rule; }

		//lhs=Expression ":=" rhs=Expression
		public Group getGroup() { return cGroup; }

		//lhs=Expression
		public Assignment getLhsAssignment_0() { return cLhsAssignment_0; }

		//Expression
		public RuleCall getLhsExpressionParserRuleCall_0_0() { return cLhsExpressionParserRuleCall_0_0; }

		//":="
		public Keyword getColonEqualsSignKeyword_1() { return cColonEqualsSignKeyword_1; }

		//rhs=Expression
		public Assignment getRhsAssignment_2() { return cRhsAssignment_2; }

		//Expression
		public RuleCall getRhsExpressionParserRuleCall_2_0() { return cRhsExpressionParserRuleCall_2_0; }
	}

	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Condition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInitialConditionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInvariantConditionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFlowConditionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Condition:
		//	InitialCondition | InvariantCondition | FlowCondition;
		@Override public ParserRule getRule() { return rule; }

		//InitialCondition | InvariantCondition | FlowCondition
		public Alternatives getAlternatives() { return cAlternatives; }

		//InitialCondition
		public RuleCall getInitialConditionParserRuleCall_0() { return cInitialConditionParserRuleCall_0; }

		//InvariantCondition
		public RuleCall getInvariantConditionParserRuleCall_1() { return cInvariantConditionParserRuleCall_1; }

		//FlowCondition
		public RuleCall getFlowConditionParserRuleCall_2() { return cFlowConditionParserRuleCall_2; }
	}

	public class InitialConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InitialCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInitialKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//InitialCondition:
		//	"initial" expression=Expression;
		@Override public ParserRule getRule() { return rule; }

		//"initial" expression=Expression
		public Group getGroup() { return cGroup; }

		//"initial"
		public Keyword getInitialKeyword_0() { return cInitialKeyword_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
	}

	public class InvariantConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InvariantCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInvariantKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//InvariantCondition:
		//	"invariant" expression=Expression;
		@Override public ParserRule getRule() { return rule; }

		//"invariant" expression=Expression
		public Group getGroup() { return cGroup; }

		//"invariant"
		public Keyword getInvariantKeyword_0() { return cInvariantKeyword_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
	}

	public class FlowConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FlowCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFlowKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//FlowCondition:
		//	"flow" expression=Expression;
		@Override public ParserRule getRule() { return rule; }

		//"flow" expression=Expression
		public Group getGroup() { return cGroup; }

		//"flow"
		public Keyword getFlowKeyword_0() { return cFlowKeyword_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
	}

	public class PropertyDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPropertyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cHybridAutomatonAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cHybridAutomatonHybridAutomatonParserRuleCall_3_0 = (RuleCall)cHybridAutomatonAssignment_3.eContents().get(0);
		private final Keyword cModelsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cExpressionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cExpressionExpressionParserRuleCall_5_0 = (RuleCall)cExpressionAssignment_5.eContents().get(0);
		
		//PropertyDeclaration:
		//	"property" name=ID ":" hybridAutomaton=HybridAutomaton "models" expression=Expression;
		@Override public ParserRule getRule() { return rule; }

		//"property" name=ID ":" hybridAutomaton=HybridAutomaton "models" expression=Expression
		public Group getGroup() { return cGroup; }

		//"property"
		public Keyword getPropertyKeyword_0() { return cPropertyKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//hybridAutomaton=HybridAutomaton
		public Assignment getHybridAutomatonAssignment_3() { return cHybridAutomatonAssignment_3; }

		//HybridAutomaton
		public RuleCall getHybridAutomatonHybridAutomatonParserRuleCall_3_0() { return cHybridAutomatonHybridAutomatonParserRuleCall_3_0; }

		//"models"
		public Keyword getModelsKeyword_4() { return cModelsKeyword_4; }

		//expression=Expression
		public Assignment getExpressionAssignment_5() { return cExpressionAssignment_5; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_5_0() { return cExpressionExpressionParserRuleCall_5_0; }
	}
	
	
	private final HybridSpecificationElements pHybridSpecification;
	private final TypeDefinitionElements pTypeDefinition;
	private final ClockTypeDefinitionElements pClockTypeDefinition;
	private final PrimaryExpressionElements pPrimaryExpression;
	private final LocationReferenceExpressionElements pLocationReferenceExpression;
	private final SignumExpressionElements pSignumExpression;
	private final HybridAutomatonDeclarationElements pHybridAutomatonDeclaration;
	private final HybridAutomatonElements pHybridAutomaton;
	private final HybridAutomatonDefinitionElements pHybridAutomatonDefinition;
	private final VariableDeclarationElements pVariableDeclaration;
	private final GlobalVariableDeclarationElements pGlobalVariableDeclaration;
	private final LocalVariableDeclarationElements pLocalVariableDeclaration;
	private final LocationElements pLocation;
	private final TransitionElements pTransition;
	private final AssignmentElements pAssignment;
	private final ConditionElements pCondition;
	private final InitialConditionElements pInitialCondition;
	private final InvariantConditionElements pInvariantCondition;
	private final FlowConditionElements pFlowCondition;
	private final PropertyDeclarationElements pPropertyDeclaration;
	
	private final Grammar grammar;

	private final TTMCConstraintLanguageGrammarAccess gaTTMCConstraintLanguage;

	@Inject
	public TTMCHybridLanguageGrammarAccess(GrammarProvider grammarProvider,
		TTMCConstraintLanguageGrammarAccess gaTTMCConstraintLanguage) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTTMCConstraintLanguage = gaTTMCConstraintLanguage;
		this.pHybridSpecification = new HybridSpecificationElements();
		this.pTypeDefinition = new TypeDefinitionElements();
		this.pClockTypeDefinition = new ClockTypeDefinitionElements();
		this.pPrimaryExpression = new PrimaryExpressionElements();
		this.pLocationReferenceExpression = new LocationReferenceExpressionElements();
		this.pSignumExpression = new SignumExpressionElements();
		this.pHybridAutomatonDeclaration = new HybridAutomatonDeclarationElements();
		this.pHybridAutomaton = new HybridAutomatonElements();
		this.pHybridAutomatonDefinition = new HybridAutomatonDefinitionElements();
		this.pVariableDeclaration = new VariableDeclarationElements();
		this.pGlobalVariableDeclaration = new GlobalVariableDeclarationElements();
		this.pLocalVariableDeclaration = new LocalVariableDeclarationElements();
		this.pLocation = new LocationElements();
		this.pTransition = new TransitionElements();
		this.pAssignment = new AssignmentElements();
		this.pCondition = new ConditionElements();
		this.pInitialCondition = new InitialConditionElements();
		this.pInvariantCondition = new InvariantConditionElements();
		this.pFlowCondition = new FlowConditionElements();
		this.pPropertyDeclaration = new PropertyDeclarationElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("hu.bme.mit.inf.ttmc.hybrid.language.TTMCHybridLanguage".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TTMCConstraintLanguageGrammarAccess getTTMCConstraintLanguageGrammarAccess() {
		return gaTTMCConstraintLanguage;
	}

	
	//HybridSpecification:
	//	"specification" name=ID ("(" (parameterDeclarations+=ParameterDeclaration (","
	//	parameterDeclarations+=ParameterDeclaration)*)? ")")? "{" (typeDeclarations+=TypeDeclaration |
	//	functionDeclarations+=FunctionDeclaration | constantDeclarations+=ConstantDeclaration |
	//	basicConstraintDefinitions+=BasicConstraintDefinition | hybridAutomatonDeclarations+=HybridAutomatonDeclaration |
	//	propertyDeclarations+=PropertyDeclaration)* "}";
	public HybridSpecificationElements getHybridSpecificationAccess() {
		return pHybridSpecification;
	}
	
	public ParserRule getHybridSpecificationRule() {
		return getHybridSpecificationAccess().getRule();
	}

	//// override
	//TypeDefinition returns TTMCConstraint::TypeDefinition:
	//	NaturalTypeDefinition | IntegerTypeDefinition | BooleanTypeDefinition | RealTypeDefinition | ArrayTypeDefinition |
	//	EnumerationTypeDefinition | RecordTypeDefinition | TupleTypeDefinition | SubrangeTypeDefinition | SubTypeDefinition |
	//	FunctionTypeDefinition | // add
	//	ClockTypeDefinition;
	public TypeDefinitionElements getTypeDefinitionAccess() {
		return pTypeDefinition;
	}
	
	public ParserRule getTypeDefinitionRule() {
		return getTypeDefinitionAccess().getRule();
	}

	//ClockTypeDefinition:
	//	{ClockTypeDefinition} "clock";
	public ClockTypeDefinitionElements getClockTypeDefinitionAccess() {
		return pClockTypeDefinition;
	}
	
	public ParserRule getClockTypeDefinitionRule() {
		return getClockTypeDefinitionAccess().getRule();
	}

	//// override
	//PrimaryExpression returns TTMCConstraint::Expression:
	//	LiteralExpression | ReferenceExpression | // add
	//	LocationReferenceExpression | "(" Expression ")";
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return pPrimaryExpression;
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}

	//LocationReferenceExpression:
	//	"@" location=[Location];
	public LocationReferenceExpressionElements getLocationReferenceExpressionAccess() {
		return pLocationReferenceExpression;
	}
	
	public ParserRule getLocationReferenceExpressionRule() {
		return getLocationReferenceExpressionAccess().getRule();
	}

	//// override
	//SignumExpression returns TTMCConstraint::Expression:
	//	{TTMCConstraint::UnaryMinusExpression} => "-" operand=SignumExpression | {TTMCConstraint::UnaryPlusExpression} => "+"
	//	operand=SignumExpression | // add
	//	{DotExpression} => "d" operand=SignumExpression | AccessExpression;
	public SignumExpressionElements getSignumExpressionAccess() {
		return pSignumExpression;
	}
	
	public ParserRule getSignumExpressionRule() {
		return getSignumExpressionAccess().getRule();
	}

	//HybridAutomatonDeclaration:
	//	"automaton" name=ID ("(" (parameterDeclarations+=ParameterDeclaration (","
	//	parameterDeclarations+=ParameterDeclaration)*)? ")")? ":=" hybridAutomaton=HybridAutomaton;
	public HybridAutomatonDeclarationElements getHybridAutomatonDeclarationAccess() {
		return pHybridAutomatonDeclaration;
	}
	
	public ParserRule getHybridAutomatonDeclarationRule() {
		return getHybridAutomatonDeclarationAccess().getRule();
	}

	//HybridAutomaton:
	//	HybridAutomatonDefinition;
	public HybridAutomatonElements getHybridAutomatonAccess() {
		return pHybridAutomaton;
	}
	
	public ParserRule getHybridAutomatonRule() {
		return getHybridAutomatonAccess().getRule();
	}

	//HybridAutomatonDefinition:
	//	{HybridAutomatonDefinition} "{" (variableDeclarations+=VariableDeclaration | locations+=Location |
	//	transitions+=Transition)* "}";
	public HybridAutomatonDefinitionElements getHybridAutomatonDefinitionAccess() {
		return pHybridAutomatonDefinition;
	}
	
	public ParserRule getHybridAutomatonDefinitionRule() {
		return getHybridAutomatonDefinitionAccess().getRule();
	}

	//VariableDeclaration:
	//	GlobalVariableDeclaration | LocalVariableDeclaration;
	public VariableDeclarationElements getVariableDeclarationAccess() {
		return pVariableDeclaration;
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}

	//GlobalVariableDeclaration:
	//	"global" name=ID ":" type=Type;
	public GlobalVariableDeclarationElements getGlobalVariableDeclarationAccess() {
		return pGlobalVariableDeclaration;
	}
	
	public ParserRule getGlobalVariableDeclarationRule() {
		return getGlobalVariableDeclarationAccess().getRule();
	}

	//LocalVariableDeclaration:
	//	"local" name=ID ":" type=Type;
	public LocalVariableDeclarationElements getLocalVariableDeclarationAccess() {
		return pLocalVariableDeclaration;
	}
	
	public ParserRule getLocalVariableDeclarationRule() {
		return getLocalVariableDeclarationAccess().getRule();
	}

	//Location:
	//	"location" name=ID ("{" conditions+=Condition* "}")?;
	public LocationElements getLocationAccess() {
		return pLocation;
	}
	
	public ParserRule getLocationRule() {
		return getLocationAccess().getRule();
	}

	//Transition:
	//	"transition" source=[Location] "to" target=[Location] ("(" parameterDeclarations+=ParameterDeclaration (","
	//	parameterDeclarations+=ParameterDeclaration)* ")")? ("[" guards+=Expression ("," guards+=Expression)* "]")? ("{"
	//	assignments+=Assignment ("," assignments+=Assignment)* "}")?;
	public TransitionElements getTransitionAccess() {
		return pTransition;
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}

	//Assignment:
	//	lhs=Expression ":=" rhs=Expression;
	public AssignmentElements getAssignmentAccess() {
		return pAssignment;
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}

	//Condition:
	//	InitialCondition | InvariantCondition | FlowCondition;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}

	//InitialCondition:
	//	"initial" expression=Expression;
	public InitialConditionElements getInitialConditionAccess() {
		return pInitialCondition;
	}
	
	public ParserRule getInitialConditionRule() {
		return getInitialConditionAccess().getRule();
	}

	//InvariantCondition:
	//	"invariant" expression=Expression;
	public InvariantConditionElements getInvariantConditionAccess() {
		return pInvariantCondition;
	}
	
	public ParserRule getInvariantConditionRule() {
		return getInvariantConditionAccess().getRule();
	}

	//FlowCondition:
	//	"flow" expression=Expression;
	public FlowConditionElements getFlowConditionAccess() {
		return pFlowCondition;
	}
	
	public ParserRule getFlowConditionRule() {
		return getFlowConditionAccess().getRule();
	}

	//PropertyDeclaration:
	//	"property" name=ID ":" hybridAutomaton=HybridAutomaton "models" expression=Expression;
	public PropertyDeclarationElements getPropertyDeclarationAccess() {
		return pPropertyDeclaration;
	}
	
	public ParserRule getPropertyDeclarationRule() {
		return getPropertyDeclarationAccess().getRule();
	}

	/////////////////////////////////////////////
	//ConstraintSpecification:
	//	"specification" name=ID ("(" (parameterDeclarations+=ParameterDeclaration (","
	//	parameterDeclarations+=ParameterDeclaration)*)? ")")? "{" (typeDeclarations+=TypeDeclaration |
	//	constantDeclarations+=ConstantDeclaration | functionDeclarations+=FunctionDeclaration |
	//	basicConstraintDefinitions+=BasicConstraintDefinition)* "}";
	public TTMCConstraintLanguageGrammarAccess.ConstraintSpecificationElements getConstraintSpecificationAccess() {
		return gaTTMCConstraintLanguage.getConstraintSpecificationAccess();
	}
	
	public ParserRule getConstraintSpecificationRule() {
		return getConstraintSpecificationAccess().getRule();
	}

	/////////////////////////////////////////////
	//ParameterDeclaration:
	//	{ParameterDeclaration} name=ID ":" type=Type;
	public TTMCConstraintLanguageGrammarAccess.ParameterDeclarationElements getParameterDeclarationAccess() {
		return gaTTMCConstraintLanguage.getParameterDeclarationAccess();
	}
	
	public ParserRule getParameterDeclarationRule() {
		return getParameterDeclarationAccess().getRule();
	}

	//FieldDeclaration:
	//	{FieldDeclaration} name=ID ":" type=Type;
	public TTMCConstraintLanguageGrammarAccess.FieldDeclarationElements getFieldDeclarationAccess() {
		return gaTTMCConstraintLanguage.getFieldDeclarationAccess();
	}
	
	public ParserRule getFieldDeclarationRule() {
		return getFieldDeclarationAccess().getRule();
	}

	//LetDeclaration:
	//	{LetDeclaration} name=ID ":" type=Type ":=" expression=Expression;
	public TTMCConstraintLanguageGrammarAccess.LetDeclarationElements getLetDeclarationAccess() {
		return gaTTMCConstraintLanguage.getLetDeclarationAccess();
	}
	
	public ParserRule getLetDeclarationRule() {
		return getLetDeclarationAccess().getRule();
	}

	//ConstantDeclaration:
	//	"const" name=ID ":" type=Type (":=" expression=Expression)?;
	public TTMCConstraintLanguageGrammarAccess.ConstantDeclarationElements getConstantDeclarationAccess() {
		return gaTTMCConstraintLanguage.getConstantDeclarationAccess();
	}
	
	public ParserRule getConstantDeclarationRule() {
		return getConstantDeclarationAccess().getRule();
	}

	//FunctionDeclaration:
	//	"function" name=ID ("(" (parameterDeclarations+=ParameterDeclaration (","
	//	parameterDeclarations+=ParameterDeclaration)*)? ")")? ":" type=Type (":=" expression=Expression)?;
	public TTMCConstraintLanguageGrammarAccess.FunctionDeclarationElements getFunctionDeclarationAccess() {
		return gaTTMCConstraintLanguage.getFunctionDeclarationAccess();
	}
	
	public ParserRule getFunctionDeclarationRule() {
		return getFunctionDeclarationAccess().getRule();
	}

	//////////////////////////////////////////
	//// Type language
	//////////////////////////////////////////
	//Type:
	//	TypeReference | TypeDefinition;
	public TTMCConstraintLanguageGrammarAccess.TypeElements getTypeAccess() {
		return gaTTMCConstraintLanguage.getTypeAccess();
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//TypeDeclaration:
	//	"type" name=ID ":" type=Type;
	public TTMCConstraintLanguageGrammarAccess.TypeDeclarationElements getTypeDeclarationAccess() {
		return gaTTMCConstraintLanguage.getTypeDeclarationAccess();
	}
	
	public ParserRule getTypeDeclarationRule() {
		return getTypeDeclarationAccess().getRule();
	}

	//TypeReference:
	//	reference=[TypeDeclaration];
	public TTMCConstraintLanguageGrammarAccess.TypeReferenceElements getTypeReferenceAccess() {
		return gaTTMCConstraintLanguage.getTypeReferenceAccess();
	}
	
	public ParserRule getTypeReferenceRule() {
		return getTypeReferenceAccess().getRule();
	}

	//NaturalTypeDefinition returns BasicTypeDefinition:
	//	{NaturalTypeDefinition} "natural";
	public TTMCConstraintLanguageGrammarAccess.NaturalTypeDefinitionElements getNaturalTypeDefinitionAccess() {
		return gaTTMCConstraintLanguage.getNaturalTypeDefinitionAccess();
	}
	
	public ParserRule getNaturalTypeDefinitionRule() {
		return getNaturalTypeDefinitionAccess().getRule();
	}

	//IntegerTypeDefinition returns BasicTypeDefinition:
	//	{IntegerTypeDefinition} "integer";
	public TTMCConstraintLanguageGrammarAccess.IntegerTypeDefinitionElements getIntegerTypeDefinitionAccess() {
		return gaTTMCConstraintLanguage.getIntegerTypeDefinitionAccess();
	}
	
	public ParserRule getIntegerTypeDefinitionRule() {
		return getIntegerTypeDefinitionAccess().getRule();
	}

	//BooleanTypeDefinition returns BasicTypeDefinition:
	//	{BooleanTypeDefinition} "boolean";
	public TTMCConstraintLanguageGrammarAccess.BooleanTypeDefinitionElements getBooleanTypeDefinitionAccess() {
		return gaTTMCConstraintLanguage.getBooleanTypeDefinitionAccess();
	}
	
	public ParserRule getBooleanTypeDefinitionRule() {
		return getBooleanTypeDefinitionAccess().getRule();
	}

	//RealTypeDefinition:
	//	{RealTypeDefinition} "real";
	public TTMCConstraintLanguageGrammarAccess.RealTypeDefinitionElements getRealTypeDefinitionAccess() {
		return gaTTMCConstraintLanguage.getRealTypeDefinitionAccess();
	}
	
	public ParserRule getRealTypeDefinitionRule() {
		return getRealTypeDefinitionAccess().getRule();
	}

	//ArrayTypeDefinition:
	//	"array" indexTypes+=Type ("," indexTypes+=Type)* "of" elementType=Type;
	public TTMCConstraintLanguageGrammarAccess.ArrayTypeDefinitionElements getArrayTypeDefinitionAccess() {
		return gaTTMCConstraintLanguage.getArrayTypeDefinitionAccess();
	}
	
	public ParserRule getArrayTypeDefinitionRule() {
		return getArrayTypeDefinitionAccess().getRule();
	}

	//EnumerationTypeDefinition:
	//	"enum" "{" literals+=EnumerationLiteralDefinition ("," literals+=EnumerationLiteralDefinition)* "}";
	public TTMCConstraintLanguageGrammarAccess.EnumerationTypeDefinitionElements getEnumerationTypeDefinitionAccess() {
		return gaTTMCConstraintLanguage.getEnumerationTypeDefinitionAccess();
	}
	
	public ParserRule getEnumerationTypeDefinitionRule() {
		return getEnumerationTypeDefinitionAccess().getRule();
	}

	//EnumerationLiteralDefinition:
	//	name=ID;
	public TTMCConstraintLanguageGrammarAccess.EnumerationLiteralDefinitionElements getEnumerationLiteralDefinitionAccess() {
		return gaTTMCConstraintLanguage.getEnumerationLiteralDefinitionAccess();
	}
	
	public ParserRule getEnumerationLiteralDefinitionRule() {
		return getEnumerationLiteralDefinitionAccess().getRule();
	}

	//RecordTypeDefinition:
	//	"record" "{" fieldDeclarations+=FieldDeclaration ("," fieldDeclarations+=FieldDeclaration)* "}";
	public TTMCConstraintLanguageGrammarAccess.RecordTypeDefinitionElements getRecordTypeDefinitionAccess() {
		return gaTTMCConstraintLanguage.getRecordTypeDefinitionAccess();
	}
	
	public ParserRule getRecordTypeDefinitionRule() {
		return getRecordTypeDefinitionAccess().getRule();
	}

	//TupleTypeDefinition:
	//	"tuple" "{" types+=Type ("," types+=Type)* "}";
	public TTMCConstraintLanguageGrammarAccess.TupleTypeDefinitionElements getTupleTypeDefinitionAccess() {
		return gaTTMCConstraintLanguage.getTupleTypeDefinitionAccess();
	}
	
	public ParserRule getTupleTypeDefinitionRule() {
		return getTupleTypeDefinitionAccess().getRule();
	}

	//SubrangeTypeDefinition:
	//	{SubrangeTypeDefinition} "[" ("-" "inf" | lowerBound=Expression) "to" ("inf" | upperBound=Expression) "]";
	public TTMCConstraintLanguageGrammarAccess.SubrangeTypeDefinitionElements getSubrangeTypeDefinitionAccess() {
		return gaTTMCConstraintLanguage.getSubrangeTypeDefinitionAccess();
	}
	
	public ParserRule getSubrangeTypeDefinitionRule() {
		return getSubrangeTypeDefinitionAccess().getRule();
	}

	//SubTypeDefinition:
	//	"{" parameterDeclaration=ParameterDeclaration "|" expression=Expression "}";
	public TTMCConstraintLanguageGrammarAccess.SubTypeDefinitionElements getSubTypeDefinitionAccess() {
		return gaTTMCConstraintLanguage.getSubTypeDefinitionAccess();
	}
	
	public ParserRule getSubTypeDefinitionRule() {
		return getSubTypeDefinitionAccess().getRule();
	}

	//FunctionTypeDefinition:
	//	"function" "(" (parameterTypes+=Type ("," parameterTypes+=Type)*)? ")" ":" returnType=Type;
	public TTMCConstraintLanguageGrammarAccess.FunctionTypeDefinitionElements getFunctionTypeDefinitionAccess() {
		return gaTTMCConstraintLanguage.getFunctionTypeDefinitionAccess();
	}
	
	public ParserRule getFunctionTypeDefinitionRule() {
		return getFunctionTypeDefinitionAccess().getRule();
	}

	//////////////////////////////////////////
	//// Expression language
	//////////////////////////////////////////
	//Expression:
	//	IfThenElseExpression;
	public TTMCConstraintLanguageGrammarAccess.ExpressionElements getExpressionAccess() {
		return gaTTMCConstraintLanguage.getExpressionAccess();
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	////ternary, right-associative
	//IfThenElseExpression returns Expression:
	//	{IfThenElseExpression} "if" condition=Expression "then" then=Expression ("else" else=Expression) | EqualExpression;
	public TTMCConstraintLanguageGrammarAccess.IfThenElseExpressionElements getIfThenElseExpressionAccess() {
		return gaTTMCConstraintLanguage.getIfThenElseExpressionAccess();
	}
	
	public ParserRule getIfThenElseExpressionRule() {
		return getIfThenElseExpressionAccess().getRule();
	}

	////binary, right-associative
	//EqualExpression returns Expression:
	//	ImplyExpression ({EqualExpression.leftOperand=current} "equal" rightOperand=EqualExpression)?;
	public TTMCConstraintLanguageGrammarAccess.EqualExpressionElements getEqualExpressionAccess() {
		return gaTTMCConstraintLanguage.getEqualExpressionAccess();
	}
	
	public ParserRule getEqualExpressionRule() {
		return getEqualExpressionAccess().getRule();
	}

	////binary, right-associative
	//ImplyExpression returns Expression:
	//	OrExpression ({ImplyExpression.leftOperand=current} "imply" rightOperand=ImplyExpression)?;
	public TTMCConstraintLanguageGrammarAccess.ImplyExpressionElements getImplyExpressionAccess() {
		return gaTTMCConstraintLanguage.getImplyExpressionAccess();
	}
	
	public ParserRule getImplyExpressionRule() {
		return getImplyExpressionAccess().getRule();
	}

	////multiary
	//OrExpression returns Expression:
	//	AndExpression ({OrExpression.operands+=current} ("or" operands+=AndExpression)+)?;
	public TTMCConstraintLanguageGrammarAccess.OrExpressionElements getOrExpressionAccess() {
		return gaTTMCConstraintLanguage.getOrExpressionAccess();
	}
	
	public ParserRule getOrExpressionRule() {
		return getOrExpressionAccess().getRule();
	}

	////multiary
	//AndExpression returns Expression:
	//	ReleaseExpression ({AndExpression.operands+=current} ("and" operands+=ReleaseExpression)+)?;
	public TTMCConstraintLanguageGrammarAccess.AndExpressionElements getAndExpressionAccess() {
		return gaTTMCConstraintLanguage.getAndExpressionAccess();
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}

	////binary, left-associative
	//ReleaseExpression returns Expression:
	//	UntilExpression ({ReleaseExpression.leftOperand=current} "R" rightOperand=UntilExpression)*;
	public TTMCConstraintLanguageGrammarAccess.ReleaseExpressionElements getReleaseExpressionAccess() {
		return gaTTMCConstraintLanguage.getReleaseExpressionAccess();
	}
	
	public ParserRule getReleaseExpressionRule() {
		return getReleaseExpressionAccess().getRule();
	}

	////binary, left-associative
	//UntilExpression returns Expression:
	//	UnaryLogicExpression ({UntilExpression.leftOperand=current} "U" rightOperand=UnaryLogicExpression)*;
	public TTMCConstraintLanguageGrammarAccess.UntilExpressionElements getUntilExpressionAccess() {
		return gaTTMCConstraintLanguage.getUntilExpressionAccess();
	}
	
	public ParserRule getUntilExpressionRule() {
		return getUntilExpressionAccess().getRule();
	}

	////prefix unary, right-associative
	//UnaryLogicExpression returns Expression:
	//	NotExpression | ForallExpression | ExistsExpression | FunctionLiteralExpression | GloballyExpression |
	//	FinallyExpression | NextExpression | TemporalForallExpression | TemporalExistsExpression | LetExpression |
	//	InExpression;
	public TTMCConstraintLanguageGrammarAccess.UnaryLogicExpressionElements getUnaryLogicExpressionAccess() {
		return gaTTMCConstraintLanguage.getUnaryLogicExpressionAccess();
	}
	
	public ParserRule getUnaryLogicExpressionRule() {
		return getUnaryLogicExpressionAccess().getRule();
	}

	//NotExpression returns Expression:
	//	{NotExpression} => "not" operand=UnaryLogicExpression;
	public TTMCConstraintLanguageGrammarAccess.NotExpressionElements getNotExpressionAccess() {
		return gaTTMCConstraintLanguage.getNotExpressionAccess();
	}
	
	public ParserRule getNotExpressionRule() {
		return getNotExpressionAccess().getRule();
	}

	//ForallExpression returns Expression:
	//	{ForallExpression} => "forall" "(" (parameterDeclarations+=ParameterDeclaration (","
	//	parameterDeclarations+=ParameterDeclaration)*)? ")" ":" operand=UnaryLogicExpression;
	public TTMCConstraintLanguageGrammarAccess.ForallExpressionElements getForallExpressionAccess() {
		return gaTTMCConstraintLanguage.getForallExpressionAccess();
	}
	
	public ParserRule getForallExpressionRule() {
		return getForallExpressionAccess().getRule();
	}

	//ExistsExpression returns Expression:
	//	{ExistsExpression} => "exists" "(" (parameterDeclarations+=ParameterDeclaration (","
	//	parameterDeclarations+=ParameterDeclaration)*)? ")" ":" operand=UnaryLogicExpression;
	public TTMCConstraintLanguageGrammarAccess.ExistsExpressionElements getExistsExpressionAccess() {
		return gaTTMCConstraintLanguage.getExistsExpressionAccess();
	}
	
	public ParserRule getExistsExpressionRule() {
		return getExistsExpressionAccess().getRule();
	}

	//FunctionLiteralExpression returns Expression:
	//	{FunctionLiteralExpression} => "function" "(" (parameterDeclarations+=ParameterDeclaration (","
	//	parameterDeclarations+=ParameterDeclaration)*)? ")" ":" returnType=Type ":=" operand=UnaryLogicExpression;
	public TTMCConstraintLanguageGrammarAccess.FunctionLiteralExpressionElements getFunctionLiteralExpressionAccess() {
		return gaTTMCConstraintLanguage.getFunctionLiteralExpressionAccess();
	}
	
	public ParserRule getFunctionLiteralExpressionRule() {
		return getFunctionLiteralExpressionAccess().getRule();
	}

	//GloballyExpression returns Expression:
	//	{GloballyExpression} => "G" operand=UnaryLogicExpression;
	public TTMCConstraintLanguageGrammarAccess.GloballyExpressionElements getGloballyExpressionAccess() {
		return gaTTMCConstraintLanguage.getGloballyExpressionAccess();
	}
	
	public ParserRule getGloballyExpressionRule() {
		return getGloballyExpressionAccess().getRule();
	}

	//FinallyExpression returns Expression:
	//	{FinallyExpression} => "F" operand=UnaryLogicExpression;
	public TTMCConstraintLanguageGrammarAccess.FinallyExpressionElements getFinallyExpressionAccess() {
		return gaTTMCConstraintLanguage.getFinallyExpressionAccess();
	}
	
	public ParserRule getFinallyExpressionRule() {
		return getFinallyExpressionAccess().getRule();
	}

	//NextExpression returns Expression:
	//	{NextExpression} => "X" operand=UnaryLogicExpression;
	public TTMCConstraintLanguageGrammarAccess.NextExpressionElements getNextExpressionAccess() {
		return gaTTMCConstraintLanguage.getNextExpressionAccess();
	}
	
	public ParserRule getNextExpressionRule() {
		return getNextExpressionAccess().getRule();
	}

	//TemporalForallExpression returns Expression:
	//	{TemporalForallExpression} => "A" operand=UnaryLogicExpression;
	public TTMCConstraintLanguageGrammarAccess.TemporalForallExpressionElements getTemporalForallExpressionAccess() {
		return gaTTMCConstraintLanguage.getTemporalForallExpressionAccess();
	}
	
	public ParserRule getTemporalForallExpressionRule() {
		return getTemporalForallExpressionAccess().getRule();
	}

	//TemporalExistsExpression returns Expression:
	//	{TemporalExistsExpression} => "E" operand=UnaryLogicExpression;
	public TTMCConstraintLanguageGrammarAccess.TemporalExistsExpressionElements getTemporalExistsExpressionAccess() {
		return gaTTMCConstraintLanguage.getTemporalExistsExpressionAccess();
	}
	
	public ParserRule getTemporalExistsExpressionRule() {
		return getTemporalExistsExpressionAccess().getRule();
	}

	//LetExpression returns Expression:
	//	{LetExpression} "let" "(" letDeclarations+=LetDeclaration ("," letDeclarations+=LetDeclaration)* ")" "in"
	//	expression=UnaryLogicExpression;
	public TTMCConstraintLanguageGrammarAccess.LetExpressionElements getLetExpressionAccess() {
		return gaTTMCConstraintLanguage.getLetExpressionAccess();
	}
	
	public ParserRule getLetExpressionRule() {
		return getLetExpressionAccess().getRule();
	}

	////postfix unary, non-associative
	//InExpression returns Expression:
	//	EquivalenceExpression ({InExpression.operand=current} "in" type=Type)?;
	public TTMCConstraintLanguageGrammarAccess.InExpressionElements getInExpressionAccess() {
		return gaTTMCConstraintLanguage.getInExpressionAccess();
	}
	
	public ParserRule getInExpressionRule() {
		return getInExpressionAccess().getRule();
	}

	////binary, non-associative
	//EquivalenceExpression returns Expression:
	//	ComparisionExpression ({EqualityExpression.leftOperand=current} "=" rightOperand=ComparisionExpression |
	//	{InequalityExpression.leftOperand=current} "/=" rightOperand=ComparisionExpression)?;
	public TTMCConstraintLanguageGrammarAccess.EquivalenceExpressionElements getEquivalenceExpressionAccess() {
		return gaTTMCConstraintLanguage.getEquivalenceExpressionAccess();
	}
	
	public ParserRule getEquivalenceExpressionRule() {
		return getEquivalenceExpressionAccess().getRule();
	}

	////binary, non-associative
	//ComparisionExpression returns Expression:
	//	AdditiveExpression (({GreaterExpression.leftOperand=current} ">" | {GreaterEqualExpression.leftOperand=current} ">=" |
	//	{LessExpression.leftOperand=current} "<" | {LessEqualExpression.leftOperand=current} "<=")
	//	rightOperand=AdditiveExpression)*;
	public TTMCConstraintLanguageGrammarAccess.ComparisionExpressionElements getComparisionExpressionAccess() {
		return gaTTMCConstraintLanguage.getComparisionExpressionAccess();
	}
	
	public ParserRule getComparisionExpressionRule() {
		return getComparisionExpressionAccess().getRule();
	}

	////binary, left-associative
	//AdditiveExpression returns Expression:
	//	MultiplicativeExpression ({AddExpression.operands+=current} => ("+" operands+=MultiplicativeExpression)+ |
	//	{SubtractExpression.leftOperand=current} "-" rightOperand=MultiplicativeExpression)*;
	public TTMCConstraintLanguageGrammarAccess.AdditiveExpressionElements getAdditiveExpressionAccess() {
		return gaTTMCConstraintLanguage.getAdditiveExpressionAccess();
	}
	
	public ParserRule getAdditiveExpressionRule() {
		return getAdditiveExpressionAccess().getRule();
	}

	////binary, left-associative
	//MultiplicativeExpression returns Expression:
	//	SignumExpression ({MultiplyExpression.operands+=current} => ("*" operands+=SignumExpression)+ |
	//	({DivideExpression.leftOperand=current} "/" | {DivExpression.leftOperand=current} "div" |
	//	{ModExpression.leftOperand=current} "mod") rightOperand=SignumExpression)*;
	public TTMCConstraintLanguageGrammarAccess.MultiplicativeExpressionElements getMultiplicativeExpressionAccess() {
		return gaTTMCConstraintLanguage.getMultiplicativeExpressionAccess();
	}
	
	public ParserRule getMultiplicativeExpressionRule() {
		return getMultiplicativeExpressionAccess().getRule();
	}

	////binary (postfix unary), left-associative
	//AccessExpression returns Expression:
	//	PrimaryExpression ({ArrayAccessExpression.operand=current} "[" (parameters+=Expression ("," parameters+=Expression)*)
	//	"]" | {FunctionAccessExpression.operand=current} "(" (parameters+=Expression ("," parameters+=Expression)*) ")" |
	//	{RecordAccessExpression.operand=current} "." field=ID | {TupleAccessExpression.operand=current} "!" index=INTEGER |
	//	{PrimedExpression.operand=current} "\'")*;
	public TTMCConstraintLanguageGrammarAccess.AccessExpressionElements getAccessExpressionAccess() {
		return gaTTMCConstraintLanguage.getAccessExpressionAccess();
	}
	
	public ParserRule getAccessExpressionRule() {
		return getAccessExpressionAccess().getRule();
	}

	//ReferenceExpression:
	//	declaration=[Declaration];
	public TTMCConstraintLanguageGrammarAccess.ReferenceExpressionElements getReferenceExpressionAccess() {
		return gaTTMCConstraintLanguage.getReferenceExpressionAccess();
	}
	
	public ParserRule getReferenceExpressionRule() {
		return getReferenceExpressionAccess().getRule();
	}

	//LiteralExpression returns Expression:
	//	IntegerLiteralExpression | DecimalLiteralExpression | RationalLiteralExpression | BooleanLiteralExpression |
	//	ArrayLiteralExpression | RecordLiteralExpression | TupleLiteralExpression | EnumerationLiteralExpression;
	public TTMCConstraintLanguageGrammarAccess.LiteralExpressionElements getLiteralExpressionAccess() {
		return gaTTMCConstraintLanguage.getLiteralExpressionAccess();
	}
	
	public ParserRule getLiteralExpressionRule() {
		return getLiteralExpressionAccess().getRule();
	}

	//IntegerLiteralExpression:
	//	value=INTEGER;
	public TTMCConstraintLanguageGrammarAccess.IntegerLiteralExpressionElements getIntegerLiteralExpressionAccess() {
		return gaTTMCConstraintLanguage.getIntegerLiteralExpressionAccess();
	}
	
	public ParserRule getIntegerLiteralExpressionRule() {
		return getIntegerLiteralExpressionAccess().getRule();
	}

	//DecimalLiteralExpression:
	//	value=DECIMAL;
	public TTMCConstraintLanguageGrammarAccess.DecimalLiteralExpressionElements getDecimalLiteralExpressionAccess() {
		return gaTTMCConstraintLanguage.getDecimalLiteralExpressionAccess();
	}
	
	public ParserRule getDecimalLiteralExpressionRule() {
		return getDecimalLiteralExpressionAccess().getRule();
	}

	//RationalLiteralExpression:
	//	numerator=INTEGER "%" denominator=INTEGER;
	public TTMCConstraintLanguageGrammarAccess.RationalLiteralExpressionElements getRationalLiteralExpressionAccess() {
		return gaTTMCConstraintLanguage.getRationalLiteralExpressionAccess();
	}
	
	public ParserRule getRationalLiteralExpressionRule() {
		return getRationalLiteralExpressionAccess().getRule();
	}

	//BooleanLiteralExpression:
	//	TrueExpression | FalseExpression;
	public TTMCConstraintLanguageGrammarAccess.BooleanLiteralExpressionElements getBooleanLiteralExpressionAccess() {
		return gaTTMCConstraintLanguage.getBooleanLiteralExpressionAccess();
	}
	
	public ParserRule getBooleanLiteralExpressionRule() {
		return getBooleanLiteralExpressionAccess().getRule();
	}

	//TrueExpression:
	//	{TrueExpression} "true";
	public TTMCConstraintLanguageGrammarAccess.TrueExpressionElements getTrueExpressionAccess() {
		return gaTTMCConstraintLanguage.getTrueExpressionAccess();
	}
	
	public ParserRule getTrueExpressionRule() {
		return getTrueExpressionAccess().getRule();
	}

	//FalseExpression:
	//	{FalseExpression} "false";
	public TTMCConstraintLanguageGrammarAccess.FalseExpressionElements getFalseExpressionAccess() {
		return gaTTMCConstraintLanguage.getFalseExpressionAccess();
	}
	
	public ParserRule getFalseExpressionRule() {
		return getFalseExpressionAccess().getRule();
	}

	//ArrayLiteralExpression:
	//	"[" (parameterDeclarations+=ParameterDeclaration ("," parameterDeclarations+=ParameterDeclaration)*)? "|"
	//	operand=Expression "]";
	public TTMCConstraintLanguageGrammarAccess.ArrayLiteralExpressionElements getArrayLiteralExpressionAccess() {
		return gaTTMCConstraintLanguage.getArrayLiteralExpressionAccess();
	}
	
	public ParserRule getArrayLiteralExpressionRule() {
		return getArrayLiteralExpressionAccess().getRule();
	}

	//RecordLiteralExpression:
	//	"(#" fieldAssignments+=FieldAssignment ("," fieldAssignments+=FieldAssignment)* "#)";
	public TTMCConstraintLanguageGrammarAccess.RecordLiteralExpressionElements getRecordLiteralExpressionAccess() {
		return gaTTMCConstraintLanguage.getRecordLiteralExpressionAccess();
	}
	
	public ParserRule getRecordLiteralExpressionRule() {
		return getRecordLiteralExpressionAccess().getRule();
	}

	//FieldAssignment:
	//	reference=ID ":=" value=Expression;
	public TTMCConstraintLanguageGrammarAccess.FieldAssignmentElements getFieldAssignmentAccess() {
		return gaTTMCConstraintLanguage.getFieldAssignmentAccess();
	}
	
	public ParserRule getFieldAssignmentRule() {
		return getFieldAssignmentAccess().getRule();
	}

	//TupleLiteralExpression:
	//	"(#" expressions+=Expression ("," expressions+=Expression)* "#)";
	public TTMCConstraintLanguageGrammarAccess.TupleLiteralExpressionElements getTupleLiteralExpressionAccess() {
		return gaTTMCConstraintLanguage.getTupleLiteralExpressionAccess();
	}
	
	public ParserRule getTupleLiteralExpressionRule() {
		return getTupleLiteralExpressionAccess().getRule();
	}

	//EnumerationLiteralExpression:
	//	"::" reference=[EnumerationLiteralDefinition];
	public TTMCConstraintLanguageGrammarAccess.EnumerationLiteralExpressionElements getEnumerationLiteralExpressionAccess() {
		return gaTTMCConstraintLanguage.getEnumerationLiteralExpressionAccess();
	}
	
	public ParserRule getEnumerationLiteralExpressionRule() {
		return getEnumerationLiteralExpressionAccess().getRule();
	}

	/////////////////////////////////
	//// Basic Constraint
	/////////////////////////////////
	//BasicConstraintDefinition:
	//	"constraint" expression=Expression;
	public TTMCConstraintLanguageGrammarAccess.BasicConstraintDefinitionElements getBasicConstraintDefinitionAccess() {
		return gaTTMCConstraintLanguage.getBasicConstraintDefinitionAccess();
	}
	
	public ParserRule getBasicConstraintDefinitionRule() {
		return getBasicConstraintDefinitionAccess().getRule();
	}

	/////////////////////////////////
	//// Terminal
	/////////////////////////////////
	//terminal INT returns Ecore::EInt:
	//	"INT has been deactivated";
	public TerminalRule getINTRule() {
		return gaTTMCConstraintLanguage.getINTRule();
	} 

	//terminal STRING:
	//	"STRING has been deactivated";
	public TerminalRule getSTRINGRule() {
		return gaTTMCConstraintLanguage.getSTRINGRule();
	} 

	//terminal INTEGER returns Ecore::EBigInteger:
	//	"-"? "0".."9"+;
	public TerminalRule getINTEGERRule() {
		return gaTTMCConstraintLanguage.getINTEGERRule();
	} 

	//terminal DECIMAL returns Ecore::EBigDecimal:
	//	"-"? "0".."9"+ "." "0".."9"+;
	public TerminalRule getDECIMALRule() {
		return gaTTMCConstraintLanguage.getDECIMALRule();
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTTMCConstraintLanguage.getIDRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTTMCConstraintLanguage.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTTMCConstraintLanguage.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTTMCConstraintLanguage.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTTMCConstraintLanguage.getANY_OTHERRule();
	} 
}
