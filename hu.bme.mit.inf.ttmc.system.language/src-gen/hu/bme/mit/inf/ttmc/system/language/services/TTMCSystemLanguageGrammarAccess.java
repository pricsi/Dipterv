/*
 * generated by Xtext
 */
package hu.bme.mit.inf.ttmc.system.language.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import hu.bme.mit.inf.ttmc.constraint.language.services.TTMCConstraintLanguageGrammarAccess;

@Singleton
public class TTMCSystemLanguageGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class SystemSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SystemSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSpecificationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cParameterDeclarationsAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cParameterDeclarationsParameterDeclarationParserRuleCall_2_1_0_0 = (RuleCall)cParameterDeclarationsAssignment_2_1_0.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final Assignment cParameterDeclarationsAssignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final RuleCall cParameterDeclarationsParameterDeclarationParserRuleCall_2_1_1_1_0 = (RuleCall)cParameterDeclarationsAssignment_2_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cTypeDeclarationsAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cTypeDeclarationsTypeDeclarationParserRuleCall_4_0_0 = (RuleCall)cTypeDeclarationsAssignment_4_0.eContents().get(0);
		private final Assignment cFunctionDeclarationsAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cFunctionDeclarationsFunctionDeclarationParserRuleCall_4_1_0 = (RuleCall)cFunctionDeclarationsAssignment_4_1.eContents().get(0);
		private final Assignment cConstantDeclarationsAssignment_4_2 = (Assignment)cAlternatives_4.eContents().get(2);
		private final RuleCall cConstantDeclarationsConstantDeclarationParserRuleCall_4_2_0 = (RuleCall)cConstantDeclarationsAssignment_4_2.eContents().get(0);
		private final Assignment cBasicConstraintDefinitionsAssignment_4_3 = (Assignment)cAlternatives_4.eContents().get(3);
		private final RuleCall cBasicConstraintDefinitionsBasicConstraintDefinitionParserRuleCall_4_3_0 = (RuleCall)cBasicConstraintDefinitionsAssignment_4_3.eContents().get(0);
		private final Assignment cSystemDeclarationsAssignment_4_4 = (Assignment)cAlternatives_4.eContents().get(4);
		private final RuleCall cSystemDeclarationsSystemDeclarationParserRuleCall_4_4_0 = (RuleCall)cSystemDeclarationsAssignment_4_4.eContents().get(0);
		private final Assignment cPropertyDeclarationsAssignment_4_5 = (Assignment)cAlternatives_4.eContents().get(5);
		private final RuleCall cPropertyDeclarationsPropertyDeclarationParserRuleCall_4_5_0 = (RuleCall)cPropertyDeclarationsAssignment_4_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//SystemSpecification:
		//	"specification" name=ID ("(" (parameterDeclarations+=ParameterDeclaration (","
		//	parameterDeclarations+=ParameterDeclaration)*)? ")")? "{" (typeDeclarations+=TypeDeclaration |
		//	functionDeclarations+=FunctionDeclaration | constantDeclarations+=ConstantDeclaration |
		//	basicConstraintDefinitions+=BasicConstraintDefinition | systemDeclarations+=SystemDeclaration |
		//	propertyDeclarations+=PropertyDeclaration)* "}";
		@Override public ParserRule getRule() { return rule; }

		//"specification" name=ID ("(" (parameterDeclarations+=ParameterDeclaration (","
		//parameterDeclarations+=ParameterDeclaration)*)? ")")? "{" (typeDeclarations+=TypeDeclaration |
		//functionDeclarations+=FunctionDeclaration | constantDeclarations+=ConstantDeclaration |
		//basicConstraintDefinitions+=BasicConstraintDefinition | systemDeclarations+=SystemDeclaration |
		//propertyDeclarations+=PropertyDeclaration)* "}"
		public Group getGroup() { return cGroup; }

		//"specification"
		public Keyword getSpecificationKeyword_0() { return cSpecificationKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("(" (parameterDeclarations+=ParameterDeclaration ("," parameterDeclarations+=ParameterDeclaration)*)? ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//(parameterDeclarations+=ParameterDeclaration ("," parameterDeclarations+=ParameterDeclaration)*)?
		public Group getGroup_2_1() { return cGroup_2_1; }

		//parameterDeclarations+=ParameterDeclaration
		public Assignment getParameterDeclarationsAssignment_2_1_0() { return cParameterDeclarationsAssignment_2_1_0; }

		//ParameterDeclaration
		public RuleCall getParameterDeclarationsParameterDeclarationParserRuleCall_2_1_0_0() { return cParameterDeclarationsParameterDeclarationParserRuleCall_2_1_0_0; }

		//("," parameterDeclarations+=ParameterDeclaration)*
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }

		//","
		public Keyword getCommaKeyword_2_1_1_0() { return cCommaKeyword_2_1_1_0; }

		//parameterDeclarations+=ParameterDeclaration
		public Assignment getParameterDeclarationsAssignment_2_1_1_1() { return cParameterDeclarationsAssignment_2_1_1_1; }

		//ParameterDeclaration
		public RuleCall getParameterDeclarationsParameterDeclarationParserRuleCall_2_1_1_1_0() { return cParameterDeclarationsParameterDeclarationParserRuleCall_2_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//(typeDeclarations+=TypeDeclaration | functionDeclarations+=FunctionDeclaration |
		//constantDeclarations+=ConstantDeclaration | basicConstraintDefinitions+=BasicConstraintDefinition |
		//systemDeclarations+=SystemDeclaration | propertyDeclarations+=PropertyDeclaration)*
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//typeDeclarations+=TypeDeclaration
		public Assignment getTypeDeclarationsAssignment_4_0() { return cTypeDeclarationsAssignment_4_0; }

		//TypeDeclaration
		public RuleCall getTypeDeclarationsTypeDeclarationParserRuleCall_4_0_0() { return cTypeDeclarationsTypeDeclarationParserRuleCall_4_0_0; }

		//functionDeclarations+=FunctionDeclaration
		public Assignment getFunctionDeclarationsAssignment_4_1() { return cFunctionDeclarationsAssignment_4_1; }

		//FunctionDeclaration
		public RuleCall getFunctionDeclarationsFunctionDeclarationParserRuleCall_4_1_0() { return cFunctionDeclarationsFunctionDeclarationParserRuleCall_4_1_0; }

		//constantDeclarations+=ConstantDeclaration
		public Assignment getConstantDeclarationsAssignment_4_2() { return cConstantDeclarationsAssignment_4_2; }

		//ConstantDeclaration
		public RuleCall getConstantDeclarationsConstantDeclarationParserRuleCall_4_2_0() { return cConstantDeclarationsConstantDeclarationParserRuleCall_4_2_0; }

		//basicConstraintDefinitions+=BasicConstraintDefinition
		public Assignment getBasicConstraintDefinitionsAssignment_4_3() { return cBasicConstraintDefinitionsAssignment_4_3; }

		//BasicConstraintDefinition
		public RuleCall getBasicConstraintDefinitionsBasicConstraintDefinitionParserRuleCall_4_3_0() { return cBasicConstraintDefinitionsBasicConstraintDefinitionParserRuleCall_4_3_0; }

		//systemDeclarations+=SystemDeclaration
		public Assignment getSystemDeclarationsAssignment_4_4() { return cSystemDeclarationsAssignment_4_4; }

		//SystemDeclaration
		public RuleCall getSystemDeclarationsSystemDeclarationParserRuleCall_4_4_0() { return cSystemDeclarationsSystemDeclarationParserRuleCall_4_4_0; }

		//propertyDeclarations+=PropertyDeclaration
		public Assignment getPropertyDeclarationsAssignment_4_5() { return cPropertyDeclarationsAssignment_4_5; }

		//PropertyDeclaration
		public RuleCall getPropertyDeclarationsPropertyDeclarationParserRuleCall_4_5_0() { return cPropertyDeclarationsPropertyDeclarationParserRuleCall_4_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class SystemDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SystemDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSystemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cParameterDeclarationsAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cParameterDeclarationsParameterDeclarationParserRuleCall_2_1_0_0 = (RuleCall)cParameterDeclarationsAssignment_2_1_0.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final Assignment cParameterDeclarationsAssignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final RuleCall cParameterDeclarationsParameterDeclarationParserRuleCall_2_1_1_1_0 = (RuleCall)cParameterDeclarationsAssignment_2_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cColonEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSystemAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSystemSystemParserRuleCall_4_0 = (RuleCall)cSystemAssignment_4.eContents().get(0);
		
		//SystemDeclaration:
		//	"system" name=ID ("(" (parameterDeclarations+=ParameterDeclaration (","
		//	parameterDeclarations+=ParameterDeclaration)*)? ")")? ":=" system=System;
		@Override public ParserRule getRule() { return rule; }

		//"system" name=ID ("(" (parameterDeclarations+=ParameterDeclaration ("," parameterDeclarations+=ParameterDeclaration)*)?
		//")")? ":=" system=System
		public Group getGroup() { return cGroup; }

		//"system"
		public Keyword getSystemKeyword_0() { return cSystemKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("(" (parameterDeclarations+=ParameterDeclaration ("," parameterDeclarations+=ParameterDeclaration)*)? ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//(parameterDeclarations+=ParameterDeclaration ("," parameterDeclarations+=ParameterDeclaration)*)?
		public Group getGroup_2_1() { return cGroup_2_1; }

		//parameterDeclarations+=ParameterDeclaration
		public Assignment getParameterDeclarationsAssignment_2_1_0() { return cParameterDeclarationsAssignment_2_1_0; }

		//ParameterDeclaration
		public RuleCall getParameterDeclarationsParameterDeclarationParserRuleCall_2_1_0_0() { return cParameterDeclarationsParameterDeclarationParserRuleCall_2_1_0_0; }

		//("," parameterDeclarations+=ParameterDeclaration)*
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }

		//","
		public Keyword getCommaKeyword_2_1_1_0() { return cCommaKeyword_2_1_1_0; }

		//parameterDeclarations+=ParameterDeclaration
		public Assignment getParameterDeclarationsAssignment_2_1_1_1() { return cParameterDeclarationsAssignment_2_1_1_1; }

		//ParameterDeclaration
		public RuleCall getParameterDeclarationsParameterDeclarationParserRuleCall_2_1_1_1_0() { return cParameterDeclarationsParameterDeclarationParserRuleCall_2_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }

		//":="
		public Keyword getColonEqualsSignKeyword_3() { return cColonEqualsSignKeyword_3; }

		//system=System
		public Assignment getSystemAssignment_4() { return cSystemAssignment_4; }

		//System
		public RuleCall getSystemSystemParserRuleCall_4_0() { return cSystemSystemParserRuleCall_4_0; }
	}

	public class SystemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "System");
		private final RuleCall cAsynchronousCompositeSystemParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//System:
		//	AsynchronousCompositeSystem;
		@Override public ParserRule getRule() { return rule; }

		//AsynchronousCompositeSystem
		public RuleCall getAsynchronousCompositeSystemParserRuleCall() { return cAsynchronousCompositeSystemParserRuleCall; }
	}

	public class AsynchronousCompositeSystemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AsynchronousCompositeSystem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSynchronousCompositeSystemParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAsynchronousCompositeSystemLeftSystemAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cLeftSquareBracketRightSquareBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightSystemAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightSystemSynchronousCompositeSystemParserRuleCall_1_2_0 = (RuleCall)cRightSystemAssignment_1_2.eContents().get(0);
		
		//AsynchronousCompositeSystem returns System:
		//	SynchronousCompositeSystem ({AsynchronousCompositeSystem.leftSystem=current} "[]"
		//	rightSystem=SynchronousCompositeSystem)*;
		@Override public ParserRule getRule() { return rule; }

		//SynchronousCompositeSystem ({AsynchronousCompositeSystem.leftSystem=current} "[]"
		//rightSystem=SynchronousCompositeSystem)*
		public Group getGroup() { return cGroup; }

		//SynchronousCompositeSystem
		public RuleCall getSynchronousCompositeSystemParserRuleCall_0() { return cSynchronousCompositeSystemParserRuleCall_0; }

		//({AsynchronousCompositeSystem.leftSystem=current} "[]" rightSystem=SynchronousCompositeSystem)*
		public Group getGroup_1() { return cGroup_1; }

		//{AsynchronousCompositeSystem.leftSystem=current}
		public Action getAsynchronousCompositeSystemLeftSystemAction_1_0() { return cAsynchronousCompositeSystemLeftSystemAction_1_0; }

		//"[]"
		public Keyword getLeftSquareBracketRightSquareBracketKeyword_1_1() { return cLeftSquareBracketRightSquareBracketKeyword_1_1; }

		//rightSystem=SynchronousCompositeSystem
		public Assignment getRightSystemAssignment_1_2() { return cRightSystemAssignment_1_2; }

		//SynchronousCompositeSystem
		public RuleCall getRightSystemSynchronousCompositeSystemParserRuleCall_1_2_0() { return cRightSystemSynchronousCompositeSystemParserRuleCall_1_2_0; }
	}

	public class SynchronousCompositeSystemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SynchronousCompositeSystem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiSystemParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cSynchronousCompositeSystemLeftSystemAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightSystemAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightSystemMultiSystemParserRuleCall_1_2_0 = (RuleCall)cRightSystemAssignment_1_2.eContents().get(0);
		
		//SynchronousCompositeSystem returns System:
		//	MultiSystem ({SynchronousCompositeSystem.leftSystem=current} "||" rightSystem=MultiSystem)*;
		@Override public ParserRule getRule() { return rule; }

		//MultiSystem ({SynchronousCompositeSystem.leftSystem=current} "||" rightSystem=MultiSystem)*
		public Group getGroup() { return cGroup; }

		//MultiSystem
		public RuleCall getMultiSystemParserRuleCall_0() { return cMultiSystemParserRuleCall_0; }

		//({SynchronousCompositeSystem.leftSystem=current} "||" rightSystem=MultiSystem)*
		public Group getGroup_1() { return cGroup_1; }

		//{SynchronousCompositeSystem.leftSystem=current}
		public Action getSynchronousCompositeSystemLeftSystemAction_1_0() { return cSynchronousCompositeSystemLeftSystemAction_1_0; }

		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_1_1() { return cVerticalLineVerticalLineKeyword_1_1; }

		//rightSystem=MultiSystem
		public Assignment getRightSystemAssignment_1_2() { return cRightSystemAssignment_1_2; }

		//MultiSystem
		public RuleCall getRightSystemMultiSystemParserRuleCall_1_2_0() { return cRightSystemMultiSystemParserRuleCall_1_2_0; }
	}

	public class MultiSystemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MultiSystem");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSynchronousMultiSystemParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAsynchronousMultiSystemParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPrimarySystemParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//MultiSystem returns System:
		//	SynchronousMultiSystem | AsynchronousMultiSystem | PrimarySystem;
		@Override public ParserRule getRule() { return rule; }

		//SynchronousMultiSystem | AsynchronousMultiSystem | PrimarySystem
		public Alternatives getAlternatives() { return cAlternatives; }

		//SynchronousMultiSystem
		public RuleCall getSynchronousMultiSystemParserRuleCall_0() { return cSynchronousMultiSystemParserRuleCall_0; }

		//AsynchronousMultiSystem
		public RuleCall getAsynchronousMultiSystemParserRuleCall_1() { return cAsynchronousMultiSystemParserRuleCall_1; }

		//PrimarySystem
		public RuleCall getPrimarySystemParserRuleCall_2() { return cPrimarySystemParserRuleCall_2; }
	}

	public class SynchronousMultiSystemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SynchronousMultiSystem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSynchronousMultiSystemAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSyncKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cParameterDeclarationsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParameterDeclarationsParameterDeclarationParserRuleCall_3_0 = (RuleCall)cParameterDeclarationsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cParameterDeclarationsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cParameterDeclarationsParameterDeclarationParserRuleCall_4_1_0 = (RuleCall)cParameterDeclarationsAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cColonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cSystemAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cSystemMultiSystemParserRuleCall_7_0 = (RuleCall)cSystemAssignment_7.eContents().get(0);
		
		//SynchronousMultiSystem returns System:
		//	{SynchronousMultiSystem} => "sync" "(" parameterDeclarations+=ParameterDeclaration (","
		//	parameterDeclarations+=ParameterDeclaration)* ")" ":" system=MultiSystem;
		@Override public ParserRule getRule() { return rule; }

		//{SynchronousMultiSystem} => "sync" "(" parameterDeclarations+=ParameterDeclaration (","
		//parameterDeclarations+=ParameterDeclaration)* ")" ":" system=MultiSystem
		public Group getGroup() { return cGroup; }

		//{SynchronousMultiSystem}
		public Action getSynchronousMultiSystemAction_0() { return cSynchronousMultiSystemAction_0; }

		//=> "sync"
		public Keyword getSyncKeyword_1() { return cSyncKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//parameterDeclarations+=ParameterDeclaration
		public Assignment getParameterDeclarationsAssignment_3() { return cParameterDeclarationsAssignment_3; }

		//ParameterDeclaration
		public RuleCall getParameterDeclarationsParameterDeclarationParserRuleCall_3_0() { return cParameterDeclarationsParameterDeclarationParserRuleCall_3_0; }

		//("," parameterDeclarations+=ParameterDeclaration)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//parameterDeclarations+=ParameterDeclaration
		public Assignment getParameterDeclarationsAssignment_4_1() { return cParameterDeclarationsAssignment_4_1; }

		//ParameterDeclaration
		public RuleCall getParameterDeclarationsParameterDeclarationParserRuleCall_4_1_0() { return cParameterDeclarationsParameterDeclarationParserRuleCall_4_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//":"
		public Keyword getColonKeyword_6() { return cColonKeyword_6; }

		//system=MultiSystem
		public Assignment getSystemAssignment_7() { return cSystemAssignment_7; }

		//MultiSystem
		public RuleCall getSystemMultiSystemParserRuleCall_7_0() { return cSystemMultiSystemParserRuleCall_7_0; }
	}

	public class AsynchronousMultiSystemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AsynchronousMultiSystem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAsynchronousMultiSystemAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAsyncKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cParameterDeclarationsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParameterDeclarationsParameterDeclarationParserRuleCall_3_0 = (RuleCall)cParameterDeclarationsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cParameterDeclarationsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cParameterDeclarationsParameterDeclarationParserRuleCall_4_1_0 = (RuleCall)cParameterDeclarationsAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cColonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cSystemAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cSystemMultiSystemParserRuleCall_7_0 = (RuleCall)cSystemAssignment_7.eContents().get(0);
		
		//AsynchronousMultiSystem returns System:
		//	{AsynchronousMultiSystem} => "async" "(" parameterDeclarations+=ParameterDeclaration (","
		//	parameterDeclarations+=ParameterDeclaration)* ")" ":" system=MultiSystem;
		@Override public ParserRule getRule() { return rule; }

		//{AsynchronousMultiSystem} => "async" "(" parameterDeclarations+=ParameterDeclaration (","
		//parameterDeclarations+=ParameterDeclaration)* ")" ":" system=MultiSystem
		public Group getGroup() { return cGroup; }

		//{AsynchronousMultiSystem}
		public Action getAsynchronousMultiSystemAction_0() { return cAsynchronousMultiSystemAction_0; }

		//=> "async"
		public Keyword getAsyncKeyword_1() { return cAsyncKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//parameterDeclarations+=ParameterDeclaration
		public Assignment getParameterDeclarationsAssignment_3() { return cParameterDeclarationsAssignment_3; }

		//ParameterDeclaration
		public RuleCall getParameterDeclarationsParameterDeclarationParserRuleCall_3_0() { return cParameterDeclarationsParameterDeclarationParserRuleCall_3_0; }

		//("," parameterDeclarations+=ParameterDeclaration)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//parameterDeclarations+=ParameterDeclaration
		public Assignment getParameterDeclarationsAssignment_4_1() { return cParameterDeclarationsAssignment_4_1; }

		//ParameterDeclaration
		public RuleCall getParameterDeclarationsParameterDeclarationParserRuleCall_4_1_0() { return cParameterDeclarationsParameterDeclarationParserRuleCall_4_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//":"
		public Keyword getColonKeyword_6() { return cColonKeyword_6; }

		//system=MultiSystem
		public Assignment getSystemAssignment_7() { return cSystemAssignment_7; }

		//MultiSystem
		public RuleCall getSystemMultiSystemParserRuleCall_7_0() { return cSystemMultiSystemParserRuleCall_7_0; }
	}

	public class PrimarySystemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimarySystem");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSystemReferenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSystemDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cSystemParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//PrimarySystem returns System:
		//	SystemReference | SystemDefinition | "(" System ")";
		@Override public ParserRule getRule() { return rule; }

		//SystemReference | SystemDefinition | "(" System ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//SystemReference
		public RuleCall getSystemReferenceParserRuleCall_0() { return cSystemReferenceParserRuleCall_0; }

		//SystemDefinition
		public RuleCall getSystemDefinitionParserRuleCall_1() { return cSystemDefinitionParserRuleCall_1; }

		//"(" System ")"
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//System
		public RuleCall getSystemParserRuleCall_2_1() { return cSystemParserRuleCall_2_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}

	public class SystemReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SystemReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSystemReferenceAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cReferenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cReferenceSystemDeclarationCrossReference_1_0 = (CrossReference)cReferenceAssignment_1.eContents().get(0);
		private final RuleCall cReferenceSystemDeclarationIDTerminalRuleCall_1_0_1 = (RuleCall)cReferenceSystemDeclarationCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cParametersAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cParametersExpressionParserRuleCall_2_1_0_0 = (RuleCall)cParametersAssignment_2_1_0.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final Assignment cParametersAssignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final RuleCall cParametersExpressionParserRuleCall_2_1_1_1_0 = (RuleCall)cParametersAssignment_2_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//SystemReference returns System:
		//	{SystemReference} reference=[SystemDeclaration] ("(" (parameters+=Expression ("," parameters+=Expression)*)? ")")?;
		@Override public ParserRule getRule() { return rule; }

		//{SystemReference} reference=[SystemDeclaration] ("(" (parameters+=Expression ("," parameters+=Expression)*)? ")")?
		public Group getGroup() { return cGroup; }

		//{SystemReference}
		public Action getSystemReferenceAction_0() { return cSystemReferenceAction_0; }

		//reference=[SystemDeclaration]
		public Assignment getReferenceAssignment_1() { return cReferenceAssignment_1; }

		//[SystemDeclaration]
		public CrossReference getReferenceSystemDeclarationCrossReference_1_0() { return cReferenceSystemDeclarationCrossReference_1_0; }

		//ID
		public RuleCall getReferenceSystemDeclarationIDTerminalRuleCall_1_0_1() { return cReferenceSystemDeclarationIDTerminalRuleCall_1_0_1; }

		//("(" (parameters+=Expression ("," parameters+=Expression)*)? ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//(parameters+=Expression ("," parameters+=Expression)*)?
		public Group getGroup_2_1() { return cGroup_2_1; }

		//parameters+=Expression
		public Assignment getParametersAssignment_2_1_0() { return cParametersAssignment_2_1_0; }

		//Expression
		public RuleCall getParametersExpressionParserRuleCall_2_1_0_0() { return cParametersExpressionParserRuleCall_2_1_0_0; }

		//("," parameters+=Expression)*
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }

		//","
		public Keyword getCommaKeyword_2_1_1_0() { return cCommaKeyword_2_1_1_0; }

		//parameters+=Expression
		public Assignment getParametersAssignment_2_1_1_1() { return cParametersAssignment_2_1_1_1; }

		//Expression
		public RuleCall getParametersExpressionParserRuleCall_2_1_1_1_0() { return cParametersExpressionParserRuleCall_2_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}

	public class SystemDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SystemDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSystemDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cVariableDeclarationsAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cVariableDeclarationsVariableDeclarationParserRuleCall_2_0_0 = (RuleCall)cVariableDeclarationsAssignment_2_0.eContents().get(0);
		private final Assignment cDefinitionDeclarationsAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cDefinitionDeclarationsDefinitionDeclarationParserRuleCall_2_1_0 = (RuleCall)cDefinitionDeclarationsAssignment_2_1.eContents().get(0);
		private final Assignment cSystemConstraintDefinitionsAssignment_2_2 = (Assignment)cAlternatives_2.eContents().get(2);
		private final RuleCall cSystemConstraintDefinitionsSystemConstraintDefinitionParserRuleCall_2_2_0 = (RuleCall)cSystemConstraintDefinitionsAssignment_2_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SystemDefinition returns System:
		//	{SystemDefinition} "{" (variableDeclarations+=VariableDeclaration | definitionDeclarations+=DefinitionDeclaration |
		//	systemConstraintDefinitions+=SystemConstraintDefinition)* "}";
		@Override public ParserRule getRule() { return rule; }

		//{SystemDefinition} "{" (variableDeclarations+=VariableDeclaration | definitionDeclarations+=DefinitionDeclaration |
		//systemConstraintDefinitions+=SystemConstraintDefinition)* "}"
		public Group getGroup() { return cGroup; }

		//{SystemDefinition}
		public Action getSystemDefinitionAction_0() { return cSystemDefinitionAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//(variableDeclarations+=VariableDeclaration | definitionDeclarations+=DefinitionDeclaration |
		//systemConstraintDefinitions+=SystemConstraintDefinition)*
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//variableDeclarations+=VariableDeclaration
		public Assignment getVariableDeclarationsAssignment_2_0() { return cVariableDeclarationsAssignment_2_0; }

		//VariableDeclaration
		public RuleCall getVariableDeclarationsVariableDeclarationParserRuleCall_2_0_0() { return cVariableDeclarationsVariableDeclarationParserRuleCall_2_0_0; }

		//definitionDeclarations+=DefinitionDeclaration
		public Assignment getDefinitionDeclarationsAssignment_2_1() { return cDefinitionDeclarationsAssignment_2_1; }

		//DefinitionDeclaration
		public RuleCall getDefinitionDeclarationsDefinitionDeclarationParserRuleCall_2_1_0() { return cDefinitionDeclarationsDefinitionDeclarationParserRuleCall_2_1_0; }

		//systemConstraintDefinitions+=SystemConstraintDefinition
		public Assignment getSystemConstraintDefinitionsAssignment_2_2() { return cSystemConstraintDefinitionsAssignment_2_2; }

		//SystemConstraintDefinition
		public RuleCall getSystemConstraintDefinitionsSystemConstraintDefinitionParserRuleCall_2_2_0() { return cSystemConstraintDefinitionsSystemConstraintDefinitionParserRuleCall_2_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class DefinitionDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DefinitionDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefinitionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cExpressionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cExpressionExpressionParserRuleCall_5_0 = (RuleCall)cExpressionAssignment_5.eContents().get(0);
		
		//DefinitionDeclaration:
		//	"definition" name=ID ":" type=Type ":=" expression=Expression;
		@Override public ParserRule getRule() { return rule; }

		//"definition" name=ID ":" type=Type ":=" expression=Expression
		public Group getGroup() { return cGroup; }

		//"definition"
		public Keyword getDefinitionKeyword_0() { return cDefinitionKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//type=Type
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_3_0() { return cTypeTypeParserRuleCall_3_0; }

		//":="
		public Keyword getColonEqualsSignKeyword_4() { return cColonEqualsSignKeyword_4; }

		//expression=Expression
		public Assignment getExpressionAssignment_5() { return cExpressionAssignment_5; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_5_0() { return cExpressionExpressionParserRuleCall_5_0; }
	}

	public class VariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLocalVariableDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cGlobalVariableDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cInputVariableDeclarationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cOutputVariableDeclarationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		/// *
		// * Specifying different variable types
		// * / VariableDeclaration:
		//	LocalVariableDeclaration | GlobalVariableDeclaration | InputVariableDeclaration | OutputVariableDeclaration;
		@Override public ParserRule getRule() { return rule; }

		//LocalVariableDeclaration | GlobalVariableDeclaration | InputVariableDeclaration | OutputVariableDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }

		//LocalVariableDeclaration
		public RuleCall getLocalVariableDeclarationParserRuleCall_0() { return cLocalVariableDeclarationParserRuleCall_0; }

		//GlobalVariableDeclaration
		public RuleCall getGlobalVariableDeclarationParserRuleCall_1() { return cGlobalVariableDeclarationParserRuleCall_1; }

		//InputVariableDeclaration
		public RuleCall getInputVariableDeclarationParserRuleCall_2() { return cInputVariableDeclarationParserRuleCall_2; }

		//OutputVariableDeclaration
		public RuleCall getOutputVariableDeclarationParserRuleCall_3() { return cOutputVariableDeclarationParserRuleCall_3; }
	}

	public class LocalVariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LocalVariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLocalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cVarKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypeTypeParserRuleCall_4_0 = (RuleCall)cTypeAssignment_4.eContents().get(0);
		
		//LocalVariableDeclaration:
		//	"local" "var" name=ID ":" type=Type;
		@Override public ParserRule getRule() { return rule; }

		//"local" "var" name=ID ":" type=Type
		public Group getGroup() { return cGroup; }

		//"local"
		public Keyword getLocalKeyword_0() { return cLocalKeyword_0; }

		//"var"
		public Keyword getVarKeyword_1() { return cVarKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//type=Type
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_4_0() { return cTypeTypeParserRuleCall_4_0; }
	}

	public class GlobalVariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GlobalVariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGlobalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cVarKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypeTypeParserRuleCall_4_0 = (RuleCall)cTypeAssignment_4.eContents().get(0);
		
		//GlobalVariableDeclaration:
		//	"global" "var" name=ID ":" type=Type;
		@Override public ParserRule getRule() { return rule; }

		//"global" "var" name=ID ":" type=Type
		public Group getGroup() { return cGroup; }

		//"global"
		public Keyword getGlobalKeyword_0() { return cGlobalKeyword_0; }

		//"var"
		public Keyword getVarKeyword_1() { return cVarKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//type=Type
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_4_0() { return cTypeTypeParserRuleCall_4_0; }
	}

	public class InputVariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InputVariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInputKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cVarKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypeTypeParserRuleCall_4_0 = (RuleCall)cTypeAssignment_4.eContents().get(0);
		
		//InputVariableDeclaration:
		//	"input" "var" name=ID ":" type=Type;
		@Override public ParserRule getRule() { return rule; }

		//"input" "var" name=ID ":" type=Type
		public Group getGroup() { return cGroup; }

		//"input"
		public Keyword getInputKeyword_0() { return cInputKeyword_0; }

		//"var"
		public Keyword getVarKeyword_1() { return cVarKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//type=Type
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_4_0() { return cTypeTypeParserRuleCall_4_0; }
	}

	public class OutputVariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OutputVariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOutputKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cVarKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypeTypeParserRuleCall_4_0 = (RuleCall)cTypeAssignment_4.eContents().get(0);
		
		//OutputVariableDeclaration:
		//	"output" "var" name=ID ":" type=Type;
		@Override public ParserRule getRule() { return rule; }

		//"output" "var" name=ID ":" type=Type
		public Group getGroup() { return cGroup; }

		//"output"
		public Keyword getOutputKeyword_0() { return cOutputKeyword_0; }

		//"var"
		public Keyword getVarKeyword_1() { return cVarKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//type=Type
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_4_0() { return cTypeTypeParserRuleCall_4_0; }
	}

	public class SystemConstraintDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SystemConstraintDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInvariantConstraintDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInitialConstraintDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTransitionConstraintDefinitionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//SystemConstraintDefinition:
		//	InvariantConstraintDefinition | InitialConstraintDefinition | TransitionConstraintDefinition;
		@Override public ParserRule getRule() { return rule; }

		//InvariantConstraintDefinition | InitialConstraintDefinition | TransitionConstraintDefinition
		public Alternatives getAlternatives() { return cAlternatives; }

		//InvariantConstraintDefinition
		public RuleCall getInvariantConstraintDefinitionParserRuleCall_0() { return cInvariantConstraintDefinitionParserRuleCall_0; }

		//InitialConstraintDefinition
		public RuleCall getInitialConstraintDefinitionParserRuleCall_1() { return cInitialConstraintDefinitionParserRuleCall_1; }

		//TransitionConstraintDefinition
		public RuleCall getTransitionConstraintDefinitionParserRuleCall_2() { return cTransitionConstraintDefinitionParserRuleCall_2; }
	}

	public class InvariantConstraintDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InvariantConstraintDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInvariantKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//InvariantConstraintDefinition:
		//	"invariant" expression=Expression;
		@Override public ParserRule getRule() { return rule; }

		//"invariant" expression=Expression
		public Group getGroup() { return cGroup; }

		//"invariant"
		public Keyword getInvariantKeyword_0() { return cInvariantKeyword_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
	}

	public class InitialConstraintDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InitialConstraintDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInitialKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//InitialConstraintDefinition:
		//	"initial" expression=Expression;
		@Override public ParserRule getRule() { return rule; }

		//"initial" expression=Expression
		public Group getGroup() { return cGroup; }

		//"initial"
		public Keyword getInitialKeyword_0() { return cInitialKeyword_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
	}

	public class TransitionConstraintDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TransitionConstraintDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTransitionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//TransitionConstraintDefinition:
		//	"transition" expression=Expression;
		@Override public ParserRule getRule() { return rule; }

		//"transition" expression=Expression
		public Group getGroup() { return cGroup; }

		//"transition"
		public Keyword getTransitionKeyword_0() { return cTransitionKeyword_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
	}

	public class PropertyDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPropertyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSystemAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSystemSystemParserRuleCall_3_0 = (RuleCall)cSystemAssignment_3.eContents().get(0);
		private final Keyword cModelsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cExpressionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cExpressionExpressionParserRuleCall_5_0 = (RuleCall)cExpressionAssignment_5.eContents().get(0);
		
		//PropertyDeclaration:
		//	"property" name=ID ":" system=System "models" expression=Expression;
		@Override public ParserRule getRule() { return rule; }

		//"property" name=ID ":" system=System "models" expression=Expression
		public Group getGroup() { return cGroup; }

		//"property"
		public Keyword getPropertyKeyword_0() { return cPropertyKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//system=System
		public Assignment getSystemAssignment_3() { return cSystemAssignment_3; }

		//System
		public RuleCall getSystemSystemParserRuleCall_3_0() { return cSystemSystemParserRuleCall_3_0; }

		//"models"
		public Keyword getModelsKeyword_4() { return cModelsKeyword_4; }

		//expression=Expression
		public Assignment getExpressionAssignment_5() { return cExpressionAssignment_5; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_5_0() { return cExpressionExpressionParserRuleCall_5_0; }
	}
	
	
	private final SystemSpecificationElements pSystemSpecification;
	private final SystemDeclarationElements pSystemDeclaration;
	private final SystemElements pSystem;
	private final AsynchronousCompositeSystemElements pAsynchronousCompositeSystem;
	private final SynchronousCompositeSystemElements pSynchronousCompositeSystem;
	private final MultiSystemElements pMultiSystem;
	private final SynchronousMultiSystemElements pSynchronousMultiSystem;
	private final AsynchronousMultiSystemElements pAsynchronousMultiSystem;
	private final PrimarySystemElements pPrimarySystem;
	private final SystemReferenceElements pSystemReference;
	private final SystemDefinitionElements pSystemDefinition;
	private final DefinitionDeclarationElements pDefinitionDeclaration;
	private final VariableDeclarationElements pVariableDeclaration;
	private final LocalVariableDeclarationElements pLocalVariableDeclaration;
	private final GlobalVariableDeclarationElements pGlobalVariableDeclaration;
	private final InputVariableDeclarationElements pInputVariableDeclaration;
	private final OutputVariableDeclarationElements pOutputVariableDeclaration;
	private final SystemConstraintDefinitionElements pSystemConstraintDefinition;
	private final InvariantConstraintDefinitionElements pInvariantConstraintDefinition;
	private final InitialConstraintDefinitionElements pInitialConstraintDefinition;
	private final TransitionConstraintDefinitionElements pTransitionConstraintDefinition;
	private final PropertyDeclarationElements pPropertyDeclaration;
	
	private final Grammar grammar;

	private final TTMCConstraintLanguageGrammarAccess gaTTMCConstraintLanguage;

	@Inject
	public TTMCSystemLanguageGrammarAccess(GrammarProvider grammarProvider,
		TTMCConstraintLanguageGrammarAccess gaTTMCConstraintLanguage) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTTMCConstraintLanguage = gaTTMCConstraintLanguage;
		this.pSystemSpecification = new SystemSpecificationElements();
		this.pSystemDeclaration = new SystemDeclarationElements();
		this.pSystem = new SystemElements();
		this.pAsynchronousCompositeSystem = new AsynchronousCompositeSystemElements();
		this.pSynchronousCompositeSystem = new SynchronousCompositeSystemElements();
		this.pMultiSystem = new MultiSystemElements();
		this.pSynchronousMultiSystem = new SynchronousMultiSystemElements();
		this.pAsynchronousMultiSystem = new AsynchronousMultiSystemElements();
		this.pPrimarySystem = new PrimarySystemElements();
		this.pSystemReference = new SystemReferenceElements();
		this.pSystemDefinition = new SystemDefinitionElements();
		this.pDefinitionDeclaration = new DefinitionDeclarationElements();
		this.pVariableDeclaration = new VariableDeclarationElements();
		this.pLocalVariableDeclaration = new LocalVariableDeclarationElements();
		this.pGlobalVariableDeclaration = new GlobalVariableDeclarationElements();
		this.pInputVariableDeclaration = new InputVariableDeclarationElements();
		this.pOutputVariableDeclaration = new OutputVariableDeclarationElements();
		this.pSystemConstraintDefinition = new SystemConstraintDefinitionElements();
		this.pInvariantConstraintDefinition = new InvariantConstraintDefinitionElements();
		this.pInitialConstraintDefinition = new InitialConstraintDefinitionElements();
		this.pTransitionConstraintDefinition = new TransitionConstraintDefinitionElements();
		this.pPropertyDeclaration = new PropertyDeclarationElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("hu.bme.mit.inf.ttmc.system.language.TTMCSystemLanguage".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TTMCConstraintLanguageGrammarAccess getTTMCConstraintLanguageGrammarAccess() {
		return gaTTMCConstraintLanguage;
	}

	
	//SystemSpecification:
	//	"specification" name=ID ("(" (parameterDeclarations+=ParameterDeclaration (","
	//	parameterDeclarations+=ParameterDeclaration)*)? ")")? "{" (typeDeclarations+=TypeDeclaration |
	//	functionDeclarations+=FunctionDeclaration | constantDeclarations+=ConstantDeclaration |
	//	basicConstraintDefinitions+=BasicConstraintDefinition | systemDeclarations+=SystemDeclaration |
	//	propertyDeclarations+=PropertyDeclaration)* "}";
	public SystemSpecificationElements getSystemSpecificationAccess() {
		return pSystemSpecification;
	}
	
	public ParserRule getSystemSpecificationRule() {
		return getSystemSpecificationAccess().getRule();
	}

	//SystemDeclaration:
	//	"system" name=ID ("(" (parameterDeclarations+=ParameterDeclaration (","
	//	parameterDeclarations+=ParameterDeclaration)*)? ")")? ":=" system=System;
	public SystemDeclarationElements getSystemDeclarationAccess() {
		return pSystemDeclaration;
	}
	
	public ParserRule getSystemDeclarationRule() {
		return getSystemDeclarationAccess().getRule();
	}

	//System:
	//	AsynchronousCompositeSystem;
	public SystemElements getSystemAccess() {
		return pSystem;
	}
	
	public ParserRule getSystemRule() {
		return getSystemAccess().getRule();
	}

	//AsynchronousCompositeSystem returns System:
	//	SynchronousCompositeSystem ({AsynchronousCompositeSystem.leftSystem=current} "[]"
	//	rightSystem=SynchronousCompositeSystem)*;
	public AsynchronousCompositeSystemElements getAsynchronousCompositeSystemAccess() {
		return pAsynchronousCompositeSystem;
	}
	
	public ParserRule getAsynchronousCompositeSystemRule() {
		return getAsynchronousCompositeSystemAccess().getRule();
	}

	//SynchronousCompositeSystem returns System:
	//	MultiSystem ({SynchronousCompositeSystem.leftSystem=current} "||" rightSystem=MultiSystem)*;
	public SynchronousCompositeSystemElements getSynchronousCompositeSystemAccess() {
		return pSynchronousCompositeSystem;
	}
	
	public ParserRule getSynchronousCompositeSystemRule() {
		return getSynchronousCompositeSystemAccess().getRule();
	}

	//MultiSystem returns System:
	//	SynchronousMultiSystem | AsynchronousMultiSystem | PrimarySystem;
	public MultiSystemElements getMultiSystemAccess() {
		return pMultiSystem;
	}
	
	public ParserRule getMultiSystemRule() {
		return getMultiSystemAccess().getRule();
	}

	//SynchronousMultiSystem returns System:
	//	{SynchronousMultiSystem} => "sync" "(" parameterDeclarations+=ParameterDeclaration (","
	//	parameterDeclarations+=ParameterDeclaration)* ")" ":" system=MultiSystem;
	public SynchronousMultiSystemElements getSynchronousMultiSystemAccess() {
		return pSynchronousMultiSystem;
	}
	
	public ParserRule getSynchronousMultiSystemRule() {
		return getSynchronousMultiSystemAccess().getRule();
	}

	//AsynchronousMultiSystem returns System:
	//	{AsynchronousMultiSystem} => "async" "(" parameterDeclarations+=ParameterDeclaration (","
	//	parameterDeclarations+=ParameterDeclaration)* ")" ":" system=MultiSystem;
	public AsynchronousMultiSystemElements getAsynchronousMultiSystemAccess() {
		return pAsynchronousMultiSystem;
	}
	
	public ParserRule getAsynchronousMultiSystemRule() {
		return getAsynchronousMultiSystemAccess().getRule();
	}

	//PrimarySystem returns System:
	//	SystemReference | SystemDefinition | "(" System ")";
	public PrimarySystemElements getPrimarySystemAccess() {
		return pPrimarySystem;
	}
	
	public ParserRule getPrimarySystemRule() {
		return getPrimarySystemAccess().getRule();
	}

	//SystemReference returns System:
	//	{SystemReference} reference=[SystemDeclaration] ("(" (parameters+=Expression ("," parameters+=Expression)*)? ")")?;
	public SystemReferenceElements getSystemReferenceAccess() {
		return pSystemReference;
	}
	
	public ParserRule getSystemReferenceRule() {
		return getSystemReferenceAccess().getRule();
	}

	//SystemDefinition returns System:
	//	{SystemDefinition} "{" (variableDeclarations+=VariableDeclaration | definitionDeclarations+=DefinitionDeclaration |
	//	systemConstraintDefinitions+=SystemConstraintDefinition)* "}";
	public SystemDefinitionElements getSystemDefinitionAccess() {
		return pSystemDefinition;
	}
	
	public ParserRule getSystemDefinitionRule() {
		return getSystemDefinitionAccess().getRule();
	}

	//DefinitionDeclaration:
	//	"definition" name=ID ":" type=Type ":=" expression=Expression;
	public DefinitionDeclarationElements getDefinitionDeclarationAccess() {
		return pDefinitionDeclaration;
	}
	
	public ParserRule getDefinitionDeclarationRule() {
		return getDefinitionDeclarationAccess().getRule();
	}

	/// *
	// * Specifying different variable types
	// * / VariableDeclaration:
	//	LocalVariableDeclaration | GlobalVariableDeclaration | InputVariableDeclaration | OutputVariableDeclaration;
	public VariableDeclarationElements getVariableDeclarationAccess() {
		return pVariableDeclaration;
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}

	//LocalVariableDeclaration:
	//	"local" "var" name=ID ":" type=Type;
	public LocalVariableDeclarationElements getLocalVariableDeclarationAccess() {
		return pLocalVariableDeclaration;
	}
	
	public ParserRule getLocalVariableDeclarationRule() {
		return getLocalVariableDeclarationAccess().getRule();
	}

	//GlobalVariableDeclaration:
	//	"global" "var" name=ID ":" type=Type;
	public GlobalVariableDeclarationElements getGlobalVariableDeclarationAccess() {
		return pGlobalVariableDeclaration;
	}
	
	public ParserRule getGlobalVariableDeclarationRule() {
		return getGlobalVariableDeclarationAccess().getRule();
	}

	//InputVariableDeclaration:
	//	"input" "var" name=ID ":" type=Type;
	public InputVariableDeclarationElements getInputVariableDeclarationAccess() {
		return pInputVariableDeclaration;
	}
	
	public ParserRule getInputVariableDeclarationRule() {
		return getInputVariableDeclarationAccess().getRule();
	}

	//OutputVariableDeclaration:
	//	"output" "var" name=ID ":" type=Type;
	public OutputVariableDeclarationElements getOutputVariableDeclarationAccess() {
		return pOutputVariableDeclaration;
	}
	
	public ParserRule getOutputVariableDeclarationRule() {
		return getOutputVariableDeclarationAccess().getRule();
	}

	//SystemConstraintDefinition:
	//	InvariantConstraintDefinition | InitialConstraintDefinition | TransitionConstraintDefinition;
	public SystemConstraintDefinitionElements getSystemConstraintDefinitionAccess() {
		return pSystemConstraintDefinition;
	}
	
	public ParserRule getSystemConstraintDefinitionRule() {
		return getSystemConstraintDefinitionAccess().getRule();
	}

	//InvariantConstraintDefinition:
	//	"invariant" expression=Expression;
	public InvariantConstraintDefinitionElements getInvariantConstraintDefinitionAccess() {
		return pInvariantConstraintDefinition;
	}
	
	public ParserRule getInvariantConstraintDefinitionRule() {
		return getInvariantConstraintDefinitionAccess().getRule();
	}

	//InitialConstraintDefinition:
	//	"initial" expression=Expression;
	public InitialConstraintDefinitionElements getInitialConstraintDefinitionAccess() {
		return pInitialConstraintDefinition;
	}
	
	public ParserRule getInitialConstraintDefinitionRule() {
		return getInitialConstraintDefinitionAccess().getRule();
	}

	//TransitionConstraintDefinition:
	//	"transition" expression=Expression;
	public TransitionConstraintDefinitionElements getTransitionConstraintDefinitionAccess() {
		return pTransitionConstraintDefinition;
	}
	
	public ParserRule getTransitionConstraintDefinitionRule() {
		return getTransitionConstraintDefinitionAccess().getRule();
	}

	//PropertyDeclaration:
	//	"property" name=ID ":" system=System "models" expression=Expression;
	public PropertyDeclarationElements getPropertyDeclarationAccess() {
		return pPropertyDeclaration;
	}
	
	public ParserRule getPropertyDeclarationRule() {
		return getPropertyDeclarationAccess().getRule();
	}

	/////////////////////////////////////////////
	//ConstraintSpecification:
	//	"specification" name=ID ("(" (parameterDeclarations+=ParameterDeclaration (","
	//	parameterDeclarations+=ParameterDeclaration)*)? ")")? "{" (typeDeclarations+=TypeDeclaration |
	//	constantDeclarations+=ConstantDeclaration | functionDeclarations+=FunctionDeclaration |
	//	basicConstraintDefinitions+=BasicConstraintDefinition)* "}";
	public TTMCConstraintLanguageGrammarAccess.ConstraintSpecificationElements getConstraintSpecificationAccess() {
		return gaTTMCConstraintLanguage.getConstraintSpecificationAccess();
	}
	
	public ParserRule getConstraintSpecificationRule() {
		return getConstraintSpecificationAccess().getRule();
	}

	/////////////////////////////////////////////
	//ParameterDeclaration:
	//	{ParameterDeclaration} name=ID ":" type=Type;
	public TTMCConstraintLanguageGrammarAccess.ParameterDeclarationElements getParameterDeclarationAccess() {
		return gaTTMCConstraintLanguage.getParameterDeclarationAccess();
	}
	
	public ParserRule getParameterDeclarationRule() {
		return getParameterDeclarationAccess().getRule();
	}

	//FieldDeclaration:
	//	{FieldDeclaration} name=ID ":" type=Type;
	public TTMCConstraintLanguageGrammarAccess.FieldDeclarationElements getFieldDeclarationAccess() {
		return gaTTMCConstraintLanguage.getFieldDeclarationAccess();
	}
	
	public ParserRule getFieldDeclarationRule() {
		return getFieldDeclarationAccess().getRule();
	}

	//LetDeclaration:
	//	{LetDeclaration} name=ID ":" type=Type ":=" expression=Expression;
	public TTMCConstraintLanguageGrammarAccess.LetDeclarationElements getLetDeclarationAccess() {
		return gaTTMCConstraintLanguage.getLetDeclarationAccess();
	}
	
	public ParserRule getLetDeclarationRule() {
		return getLetDeclarationAccess().getRule();
	}

	//ConstantDeclaration:
	//	"const" name=ID ":" type=Type (":=" expression=Expression)?;
	public TTMCConstraintLanguageGrammarAccess.ConstantDeclarationElements getConstantDeclarationAccess() {
		return gaTTMCConstraintLanguage.getConstantDeclarationAccess();
	}
	
	public ParserRule getConstantDeclarationRule() {
		return getConstantDeclarationAccess().getRule();
	}

	//FunctionDeclaration:
	//	"function" name=ID ("(" (parameterDeclarations+=ParameterDeclaration (","
	//	parameterDeclarations+=ParameterDeclaration)*)? ")")? ":" type=Type (":=" expression=Expression)?;
	public TTMCConstraintLanguageGrammarAccess.FunctionDeclarationElements getFunctionDeclarationAccess() {
		return gaTTMCConstraintLanguage.getFunctionDeclarationAccess();
	}
	
	public ParserRule getFunctionDeclarationRule() {
		return getFunctionDeclarationAccess().getRule();
	}

	//////////////////////////////////////////
	//// Type language
	//////////////////////////////////////////
	//Type:
	//	TypeReference | TypeDefinition;
	public TTMCConstraintLanguageGrammarAccess.TypeElements getTypeAccess() {
		return gaTTMCConstraintLanguage.getTypeAccess();
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//TypeDeclaration:
	//	"type" name=ID ":" type=Type;
	public TTMCConstraintLanguageGrammarAccess.TypeDeclarationElements getTypeDeclarationAccess() {
		return gaTTMCConstraintLanguage.getTypeDeclarationAccess();
	}
	
	public ParserRule getTypeDeclarationRule() {
		return getTypeDeclarationAccess().getRule();
	}

	//TypeReference:
	//	reference=[TypeDeclaration];
	public TTMCConstraintLanguageGrammarAccess.TypeReferenceElements getTypeReferenceAccess() {
		return gaTTMCConstraintLanguage.getTypeReferenceAccess();
	}
	
	public ParserRule getTypeReferenceRule() {
		return getTypeReferenceAccess().getRule();
	}

	//TypeDefinition:
	//	NaturalTypeDefinition | IntegerTypeDefinition | BooleanTypeDefinition | RealTypeDefinition | ArrayTypeDefinition |
	//	EnumerationTypeDefinition | RecordTypeDefinition | TupleTypeDefinition | SubrangeTypeDefinition | SubTypeDefinition |
	//	FunctionTypeDefinition;
	public TTMCConstraintLanguageGrammarAccess.TypeDefinitionElements getTypeDefinitionAccess() {
		return gaTTMCConstraintLanguage.getTypeDefinitionAccess();
	}
	
	public ParserRule getTypeDefinitionRule() {
		return getTypeDefinitionAccess().getRule();
	}

	//NaturalTypeDefinition returns BasicTypeDefinition:
	//	{NaturalTypeDefinition} "natural";
	public TTMCConstraintLanguageGrammarAccess.NaturalTypeDefinitionElements getNaturalTypeDefinitionAccess() {
		return gaTTMCConstraintLanguage.getNaturalTypeDefinitionAccess();
	}
	
	public ParserRule getNaturalTypeDefinitionRule() {
		return getNaturalTypeDefinitionAccess().getRule();
	}

	//IntegerTypeDefinition returns BasicTypeDefinition:
	//	{IntegerTypeDefinition} "integer";
	public TTMCConstraintLanguageGrammarAccess.IntegerTypeDefinitionElements getIntegerTypeDefinitionAccess() {
		return gaTTMCConstraintLanguage.getIntegerTypeDefinitionAccess();
	}
	
	public ParserRule getIntegerTypeDefinitionRule() {
		return getIntegerTypeDefinitionAccess().getRule();
	}

	//BooleanTypeDefinition returns BasicTypeDefinition:
	//	{BooleanTypeDefinition} "boolean";
	public TTMCConstraintLanguageGrammarAccess.BooleanTypeDefinitionElements getBooleanTypeDefinitionAccess() {
		return gaTTMCConstraintLanguage.getBooleanTypeDefinitionAccess();
	}
	
	public ParserRule getBooleanTypeDefinitionRule() {
		return getBooleanTypeDefinitionAccess().getRule();
	}

	//RealTypeDefinition:
	//	{RealTypeDefinition} "real";
	public TTMCConstraintLanguageGrammarAccess.RealTypeDefinitionElements getRealTypeDefinitionAccess() {
		return gaTTMCConstraintLanguage.getRealTypeDefinitionAccess();
	}
	
	public ParserRule getRealTypeDefinitionRule() {
		return getRealTypeDefinitionAccess().getRule();
	}

	//ArrayTypeDefinition:
	//	"array" indexTypes+=Type ("," indexTypes+=Type)* "of" elementType=Type;
	public TTMCConstraintLanguageGrammarAccess.ArrayTypeDefinitionElements getArrayTypeDefinitionAccess() {
		return gaTTMCConstraintLanguage.getArrayTypeDefinitionAccess();
	}
	
	public ParserRule getArrayTypeDefinitionRule() {
		return getArrayTypeDefinitionAccess().getRule();
	}

	//EnumerationTypeDefinition:
	//	"enum" "{" literals+=EnumerationLiteralDefinition ("," literals+=EnumerationLiteralDefinition)* "}";
	public TTMCConstraintLanguageGrammarAccess.EnumerationTypeDefinitionElements getEnumerationTypeDefinitionAccess() {
		return gaTTMCConstraintLanguage.getEnumerationTypeDefinitionAccess();
	}
	
	public ParserRule getEnumerationTypeDefinitionRule() {
		return getEnumerationTypeDefinitionAccess().getRule();
	}

	//EnumerationLiteralDefinition:
	//	name=ID;
	public TTMCConstraintLanguageGrammarAccess.EnumerationLiteralDefinitionElements getEnumerationLiteralDefinitionAccess() {
		return gaTTMCConstraintLanguage.getEnumerationLiteralDefinitionAccess();
	}
	
	public ParserRule getEnumerationLiteralDefinitionRule() {
		return getEnumerationLiteralDefinitionAccess().getRule();
	}

	//RecordTypeDefinition:
	//	"record" "{" fieldDeclarations+=FieldDeclaration ("," fieldDeclarations+=FieldDeclaration)* "}";
	public TTMCConstraintLanguageGrammarAccess.RecordTypeDefinitionElements getRecordTypeDefinitionAccess() {
		return gaTTMCConstraintLanguage.getRecordTypeDefinitionAccess();
	}
	
	public ParserRule getRecordTypeDefinitionRule() {
		return getRecordTypeDefinitionAccess().getRule();
	}

	//TupleTypeDefinition:
	//	"tuple" "{" types+=Type ("," types+=Type)* "}";
	public TTMCConstraintLanguageGrammarAccess.TupleTypeDefinitionElements getTupleTypeDefinitionAccess() {
		return gaTTMCConstraintLanguage.getTupleTypeDefinitionAccess();
	}
	
	public ParserRule getTupleTypeDefinitionRule() {
		return getTupleTypeDefinitionAccess().getRule();
	}

	//SubrangeTypeDefinition:
	//	{SubrangeTypeDefinition} "[" ("-" "inf" | lowerBound=Expression) "to" ("inf" | upperBound=Expression) "]";
	public TTMCConstraintLanguageGrammarAccess.SubrangeTypeDefinitionElements getSubrangeTypeDefinitionAccess() {
		return gaTTMCConstraintLanguage.getSubrangeTypeDefinitionAccess();
	}
	
	public ParserRule getSubrangeTypeDefinitionRule() {
		return getSubrangeTypeDefinitionAccess().getRule();
	}

	//SubTypeDefinition:
	//	"{" parameterDeclaration=ParameterDeclaration "|" expression=Expression "}";
	public TTMCConstraintLanguageGrammarAccess.SubTypeDefinitionElements getSubTypeDefinitionAccess() {
		return gaTTMCConstraintLanguage.getSubTypeDefinitionAccess();
	}
	
	public ParserRule getSubTypeDefinitionRule() {
		return getSubTypeDefinitionAccess().getRule();
	}

	//FunctionTypeDefinition:
	//	"function" "(" (parameterTypes+=Type ("," parameterTypes+=Type)*)? ")" ":" returnType=Type;
	public TTMCConstraintLanguageGrammarAccess.FunctionTypeDefinitionElements getFunctionTypeDefinitionAccess() {
		return gaTTMCConstraintLanguage.getFunctionTypeDefinitionAccess();
	}
	
	public ParserRule getFunctionTypeDefinitionRule() {
		return getFunctionTypeDefinitionAccess().getRule();
	}

	//////////////////////////////////////////
	//// Expression language
	//////////////////////////////////////////
	//Expression:
	//	IfThenElseExpression;
	public TTMCConstraintLanguageGrammarAccess.ExpressionElements getExpressionAccess() {
		return gaTTMCConstraintLanguage.getExpressionAccess();
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	////ternary, right-associative
	//IfThenElseExpression returns Expression:
	//	{IfThenElseExpression} "if" condition=Expression "then" then=Expression ("else" else=Expression) | EqualExpression;
	public TTMCConstraintLanguageGrammarAccess.IfThenElseExpressionElements getIfThenElseExpressionAccess() {
		return gaTTMCConstraintLanguage.getIfThenElseExpressionAccess();
	}
	
	public ParserRule getIfThenElseExpressionRule() {
		return getIfThenElseExpressionAccess().getRule();
	}

	////binary, right-associative
	//EqualExpression returns Expression:
	//	ImplyExpression ({EqualExpression.leftOperand=current} "equal" rightOperand=EqualExpression)?;
	public TTMCConstraintLanguageGrammarAccess.EqualExpressionElements getEqualExpressionAccess() {
		return gaTTMCConstraintLanguage.getEqualExpressionAccess();
	}
	
	public ParserRule getEqualExpressionRule() {
		return getEqualExpressionAccess().getRule();
	}

	////binary, right-associative
	//ImplyExpression returns Expression:
	//	OrExpression ({ImplyExpression.leftOperand=current} "imply" rightOperand=ImplyExpression)?;
	public TTMCConstraintLanguageGrammarAccess.ImplyExpressionElements getImplyExpressionAccess() {
		return gaTTMCConstraintLanguage.getImplyExpressionAccess();
	}
	
	public ParserRule getImplyExpressionRule() {
		return getImplyExpressionAccess().getRule();
	}

	////multiary
	//OrExpression returns Expression:
	//	AndExpression ({OrExpression.operands+=current} ("or" operands+=AndExpression)+)?;
	public TTMCConstraintLanguageGrammarAccess.OrExpressionElements getOrExpressionAccess() {
		return gaTTMCConstraintLanguage.getOrExpressionAccess();
	}
	
	public ParserRule getOrExpressionRule() {
		return getOrExpressionAccess().getRule();
	}

	////multiary
	//AndExpression returns Expression:
	//	ReleaseExpression ({AndExpression.operands+=current} ("and" operands+=ReleaseExpression)+)?;
	public TTMCConstraintLanguageGrammarAccess.AndExpressionElements getAndExpressionAccess() {
		return gaTTMCConstraintLanguage.getAndExpressionAccess();
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}

	////binary, left-associative
	//ReleaseExpression returns Expression:
	//	UntilExpression ({ReleaseExpression.leftOperand=current} "R" rightOperand=UntilExpression)*;
	public TTMCConstraintLanguageGrammarAccess.ReleaseExpressionElements getReleaseExpressionAccess() {
		return gaTTMCConstraintLanguage.getReleaseExpressionAccess();
	}
	
	public ParserRule getReleaseExpressionRule() {
		return getReleaseExpressionAccess().getRule();
	}

	////binary, left-associative
	//UntilExpression returns Expression:
	//	UnaryLogicExpression ({UntilExpression.leftOperand=current} "U" rightOperand=UnaryLogicExpression)*;
	public TTMCConstraintLanguageGrammarAccess.UntilExpressionElements getUntilExpressionAccess() {
		return gaTTMCConstraintLanguage.getUntilExpressionAccess();
	}
	
	public ParserRule getUntilExpressionRule() {
		return getUntilExpressionAccess().getRule();
	}

	////prefix unary, right-associative
	//UnaryLogicExpression returns Expression:
	//	NotExpression | ForallExpression | ExistsExpression | FunctionLiteralExpression | GloballyExpression |
	//	FinallyExpression | NextExpression | TemporalForallExpression | TemporalExistsExpression | LetExpression |
	//	InExpression;
	public TTMCConstraintLanguageGrammarAccess.UnaryLogicExpressionElements getUnaryLogicExpressionAccess() {
		return gaTTMCConstraintLanguage.getUnaryLogicExpressionAccess();
	}
	
	public ParserRule getUnaryLogicExpressionRule() {
		return getUnaryLogicExpressionAccess().getRule();
	}

	//NotExpression returns Expression:
	//	{NotExpression} => "not" operand=UnaryLogicExpression;
	public TTMCConstraintLanguageGrammarAccess.NotExpressionElements getNotExpressionAccess() {
		return gaTTMCConstraintLanguage.getNotExpressionAccess();
	}
	
	public ParserRule getNotExpressionRule() {
		return getNotExpressionAccess().getRule();
	}

	//ForallExpression returns Expression:
	//	{ForallExpression} => "forall" "(" (parameterDeclarations+=ParameterDeclaration (","
	//	parameterDeclarations+=ParameterDeclaration)*)? ")" ":" operand=UnaryLogicExpression;
	public TTMCConstraintLanguageGrammarAccess.ForallExpressionElements getForallExpressionAccess() {
		return gaTTMCConstraintLanguage.getForallExpressionAccess();
	}
	
	public ParserRule getForallExpressionRule() {
		return getForallExpressionAccess().getRule();
	}

	//ExistsExpression returns Expression:
	//	{ExistsExpression} => "exists" "(" (parameterDeclarations+=ParameterDeclaration (","
	//	parameterDeclarations+=ParameterDeclaration)*)? ")" ":" operand=UnaryLogicExpression;
	public TTMCConstraintLanguageGrammarAccess.ExistsExpressionElements getExistsExpressionAccess() {
		return gaTTMCConstraintLanguage.getExistsExpressionAccess();
	}
	
	public ParserRule getExistsExpressionRule() {
		return getExistsExpressionAccess().getRule();
	}

	//FunctionLiteralExpression returns Expression:
	//	{FunctionLiteralExpression} => "function" "(" (parameterDeclarations+=ParameterDeclaration (","
	//	parameterDeclarations+=ParameterDeclaration)*)? ")" ":" returnType=Type ":=" operand=UnaryLogicExpression;
	public TTMCConstraintLanguageGrammarAccess.FunctionLiteralExpressionElements getFunctionLiteralExpressionAccess() {
		return gaTTMCConstraintLanguage.getFunctionLiteralExpressionAccess();
	}
	
	public ParserRule getFunctionLiteralExpressionRule() {
		return getFunctionLiteralExpressionAccess().getRule();
	}

	//GloballyExpression returns Expression:
	//	{GloballyExpression} => "G" operand=UnaryLogicExpression;
	public TTMCConstraintLanguageGrammarAccess.GloballyExpressionElements getGloballyExpressionAccess() {
		return gaTTMCConstraintLanguage.getGloballyExpressionAccess();
	}
	
	public ParserRule getGloballyExpressionRule() {
		return getGloballyExpressionAccess().getRule();
	}

	//FinallyExpression returns Expression:
	//	{FinallyExpression} => "F" operand=UnaryLogicExpression;
	public TTMCConstraintLanguageGrammarAccess.FinallyExpressionElements getFinallyExpressionAccess() {
		return gaTTMCConstraintLanguage.getFinallyExpressionAccess();
	}
	
	public ParserRule getFinallyExpressionRule() {
		return getFinallyExpressionAccess().getRule();
	}

	//NextExpression returns Expression:
	//	{NextExpression} => "X" operand=UnaryLogicExpression;
	public TTMCConstraintLanguageGrammarAccess.NextExpressionElements getNextExpressionAccess() {
		return gaTTMCConstraintLanguage.getNextExpressionAccess();
	}
	
	public ParserRule getNextExpressionRule() {
		return getNextExpressionAccess().getRule();
	}

	//TemporalForallExpression returns Expression:
	//	{TemporalForallExpression} => "A" operand=UnaryLogicExpression;
	public TTMCConstraintLanguageGrammarAccess.TemporalForallExpressionElements getTemporalForallExpressionAccess() {
		return gaTTMCConstraintLanguage.getTemporalForallExpressionAccess();
	}
	
	public ParserRule getTemporalForallExpressionRule() {
		return getTemporalForallExpressionAccess().getRule();
	}

	//TemporalExistsExpression returns Expression:
	//	{TemporalExistsExpression} => "E" operand=UnaryLogicExpression;
	public TTMCConstraintLanguageGrammarAccess.TemporalExistsExpressionElements getTemporalExistsExpressionAccess() {
		return gaTTMCConstraintLanguage.getTemporalExistsExpressionAccess();
	}
	
	public ParserRule getTemporalExistsExpressionRule() {
		return getTemporalExistsExpressionAccess().getRule();
	}

	//LetExpression returns Expression:
	//	{LetExpression} "let" "(" letDeclarations+=LetDeclaration ("," letDeclarations+=LetDeclaration)* ")" "in"
	//	expression=UnaryLogicExpression;
	public TTMCConstraintLanguageGrammarAccess.LetExpressionElements getLetExpressionAccess() {
		return gaTTMCConstraintLanguage.getLetExpressionAccess();
	}
	
	public ParserRule getLetExpressionRule() {
		return getLetExpressionAccess().getRule();
	}

	////postfix unary, non-associative
	//InExpression returns Expression:
	//	EquivalenceExpression ({InExpression.operand=current} "in" type=Type)?;
	public TTMCConstraintLanguageGrammarAccess.InExpressionElements getInExpressionAccess() {
		return gaTTMCConstraintLanguage.getInExpressionAccess();
	}
	
	public ParserRule getInExpressionRule() {
		return getInExpressionAccess().getRule();
	}

	////binary, non-associative
	//EquivalenceExpression returns Expression:
	//	ComparisionExpression ({EqualityExpression.leftOperand=current} "=" rightOperand=ComparisionExpression |
	//	{InequalityExpression.leftOperand=current} "/=" rightOperand=ComparisionExpression)?;
	public TTMCConstraintLanguageGrammarAccess.EquivalenceExpressionElements getEquivalenceExpressionAccess() {
		return gaTTMCConstraintLanguage.getEquivalenceExpressionAccess();
	}
	
	public ParserRule getEquivalenceExpressionRule() {
		return getEquivalenceExpressionAccess().getRule();
	}

	////binary, non-associative
	//ComparisionExpression returns Expression:
	//	AdditiveExpression (({GreaterExpression.leftOperand=current} ">" | {GreaterEqualExpression.leftOperand=current} ">="
	//	| {LessExpression.leftOperand=current} "<" | {LessEqualExpression.leftOperand=current} "<=")
	//	rightOperand=AdditiveExpression)*;
	public TTMCConstraintLanguageGrammarAccess.ComparisionExpressionElements getComparisionExpressionAccess() {
		return gaTTMCConstraintLanguage.getComparisionExpressionAccess();
	}
	
	public ParserRule getComparisionExpressionRule() {
		return getComparisionExpressionAccess().getRule();
	}

	////binary, left-associative
	//AdditiveExpression returns Expression:
	//	MultiplicativeExpression ({AddExpression.operands+=current} => ("+" operands+=MultiplicativeExpression)+ |
	//	{SubtractExpression.leftOperand=current} "-" rightOperand=MultiplicativeExpression)*;
	public TTMCConstraintLanguageGrammarAccess.AdditiveExpressionElements getAdditiveExpressionAccess() {
		return gaTTMCConstraintLanguage.getAdditiveExpressionAccess();
	}
	
	public ParserRule getAdditiveExpressionRule() {
		return getAdditiveExpressionAccess().getRule();
	}

	////binary, left-associative
	//MultiplicativeExpression returns Expression:
	//	SignumExpression ({MultiplyExpression.operands+=current} => ("*" operands+=SignumExpression)+ |
	//	({DivideExpression.leftOperand=current} "/" | {DivExpression.leftOperand=current} "div" |
	//	{ModExpression.leftOperand=current} "mod") rightOperand=SignumExpression)*;
	public TTMCConstraintLanguageGrammarAccess.MultiplicativeExpressionElements getMultiplicativeExpressionAccess() {
		return gaTTMCConstraintLanguage.getMultiplicativeExpressionAccess();
	}
	
	public ParserRule getMultiplicativeExpressionRule() {
		return getMultiplicativeExpressionAccess().getRule();
	}

	////prefix unary, right-associative
	////non-associative
	////{UnaryMinusExpression} => '-' expression=ValueAccessExpression | ValueAccessExpression
	//SignumExpression returns Expression:
	//	{UnaryMinusExpression} => "-" operand=SignumExpression | {UnaryPlusExpression} => "+" operand=SignumExpression |
	//	AccessExpression;
	public TTMCConstraintLanguageGrammarAccess.SignumExpressionElements getSignumExpressionAccess() {
		return gaTTMCConstraintLanguage.getSignumExpressionAccess();
	}
	
	public ParserRule getSignumExpressionRule() {
		return getSignumExpressionAccess().getRule();
	}

	////binary (postfix unary), left-associative
	//AccessExpression returns Expression:
	//	PrimaryExpression ({ArrayAccessExpression.operand=current} "[" (parameters+=Expression ("," parameters+=Expression)*)
	//	"]" | {FunctionAccessExpression.operand=current} "(" (parameters+=Expression ("," parameters+=Expression)*) ")" |
	//	{RecordAccessExpression.operand=current} "." field=ID | {TupleAccessExpression.operand=current} "!" index=INTEGER |
	//	{PrimedExpression.operand=current} "\'")*;
	public TTMCConstraintLanguageGrammarAccess.AccessExpressionElements getAccessExpressionAccess() {
		return gaTTMCConstraintLanguage.getAccessExpressionAccess();
	}
	
	public ParserRule getAccessExpressionRule() {
		return getAccessExpressionAccess().getRule();
	}

	//////postfix unary, non-associative
	////PrimedExpression returns Expression:
	////	PrimaryExpression ({PrimedExpression.operand=current} '^')?
	////	//left-associative
	////	//ValueAccessExpression ({PrimedExpression.expression=current} '^')*
	////;
	//PrimaryExpression returns Expression:
	//	LiteralExpression | ReferenceExpression | "(" Expression ")";
	public TTMCConstraintLanguageGrammarAccess.PrimaryExpressionElements getPrimaryExpressionAccess() {
		return gaTTMCConstraintLanguage.getPrimaryExpressionAccess();
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}

	//ReferenceExpression:
	//	declaration=[Declaration];
	public TTMCConstraintLanguageGrammarAccess.ReferenceExpressionElements getReferenceExpressionAccess() {
		return gaTTMCConstraintLanguage.getReferenceExpressionAccess();
	}
	
	public ParserRule getReferenceExpressionRule() {
		return getReferenceExpressionAccess().getRule();
	}

	//LiteralExpression returns Expression:
	//	IntegerLiteralExpression | DecimalLiteralExpression | RationalLiteralExpression | BooleanLiteralExpression |
	//	ArrayLiteralExpression | RecordLiteralExpression | TupleLiteralExpression | EnumerationLiteralExpression;
	public TTMCConstraintLanguageGrammarAccess.LiteralExpressionElements getLiteralExpressionAccess() {
		return gaTTMCConstraintLanguage.getLiteralExpressionAccess();
	}
	
	public ParserRule getLiteralExpressionRule() {
		return getLiteralExpressionAccess().getRule();
	}

	//IntegerLiteralExpression:
	//	value=INTEGER;
	public TTMCConstraintLanguageGrammarAccess.IntegerLiteralExpressionElements getIntegerLiteralExpressionAccess() {
		return gaTTMCConstraintLanguage.getIntegerLiteralExpressionAccess();
	}
	
	public ParserRule getIntegerLiteralExpressionRule() {
		return getIntegerLiteralExpressionAccess().getRule();
	}

	//DecimalLiteralExpression:
	//	value=DECIMAL;
	public TTMCConstraintLanguageGrammarAccess.DecimalLiteralExpressionElements getDecimalLiteralExpressionAccess() {
		return gaTTMCConstraintLanguage.getDecimalLiteralExpressionAccess();
	}
	
	public ParserRule getDecimalLiteralExpressionRule() {
		return getDecimalLiteralExpressionAccess().getRule();
	}

	//RationalLiteralExpression:
	//	numerator=INTEGER "%" denominator=INTEGER;
	public TTMCConstraintLanguageGrammarAccess.RationalLiteralExpressionElements getRationalLiteralExpressionAccess() {
		return gaTTMCConstraintLanguage.getRationalLiteralExpressionAccess();
	}
	
	public ParserRule getRationalLiteralExpressionRule() {
		return getRationalLiteralExpressionAccess().getRule();
	}

	//BooleanLiteralExpression:
	//	TrueExpression | FalseExpression;
	public TTMCConstraintLanguageGrammarAccess.BooleanLiteralExpressionElements getBooleanLiteralExpressionAccess() {
		return gaTTMCConstraintLanguage.getBooleanLiteralExpressionAccess();
	}
	
	public ParserRule getBooleanLiteralExpressionRule() {
		return getBooleanLiteralExpressionAccess().getRule();
	}

	//TrueExpression:
	//	{TrueExpression} "true";
	public TTMCConstraintLanguageGrammarAccess.TrueExpressionElements getTrueExpressionAccess() {
		return gaTTMCConstraintLanguage.getTrueExpressionAccess();
	}
	
	public ParserRule getTrueExpressionRule() {
		return getTrueExpressionAccess().getRule();
	}

	//FalseExpression:
	//	{FalseExpression} "false";
	public TTMCConstraintLanguageGrammarAccess.FalseExpressionElements getFalseExpressionAccess() {
		return gaTTMCConstraintLanguage.getFalseExpressionAccess();
	}
	
	public ParserRule getFalseExpressionRule() {
		return getFalseExpressionAccess().getRule();
	}

	//ArrayLiteralExpression:
	//	"[" (parameterDeclarations+=ParameterDeclaration ("," parameterDeclarations+=ParameterDeclaration)*)? "|"
	//	operand=Expression "]";
	public TTMCConstraintLanguageGrammarAccess.ArrayLiteralExpressionElements getArrayLiteralExpressionAccess() {
		return gaTTMCConstraintLanguage.getArrayLiteralExpressionAccess();
	}
	
	public ParserRule getArrayLiteralExpressionRule() {
		return getArrayLiteralExpressionAccess().getRule();
	}

	//RecordLiteralExpression:
	//	"(#" fieldAssignments+=FieldAssignment ("," fieldAssignments+=FieldAssignment)* "#)";
	public TTMCConstraintLanguageGrammarAccess.RecordLiteralExpressionElements getRecordLiteralExpressionAccess() {
		return gaTTMCConstraintLanguage.getRecordLiteralExpressionAccess();
	}
	
	public ParserRule getRecordLiteralExpressionRule() {
		return getRecordLiteralExpressionAccess().getRule();
	}

	//FieldAssignment:
	//	reference=ID ":=" value=Expression;
	public TTMCConstraintLanguageGrammarAccess.FieldAssignmentElements getFieldAssignmentAccess() {
		return gaTTMCConstraintLanguage.getFieldAssignmentAccess();
	}
	
	public ParserRule getFieldAssignmentRule() {
		return getFieldAssignmentAccess().getRule();
	}

	//TupleLiteralExpression:
	//	"(#" expressions+=Expression ("," expressions+=Expression)* "#)";
	public TTMCConstraintLanguageGrammarAccess.TupleLiteralExpressionElements getTupleLiteralExpressionAccess() {
		return gaTTMCConstraintLanguage.getTupleLiteralExpressionAccess();
	}
	
	public ParserRule getTupleLiteralExpressionRule() {
		return getTupleLiteralExpressionAccess().getRule();
	}

	//EnumerationLiteralExpression:
	//	"::" reference=[EnumerationLiteralDefinition];
	public TTMCConstraintLanguageGrammarAccess.EnumerationLiteralExpressionElements getEnumerationLiteralExpressionAccess() {
		return gaTTMCConstraintLanguage.getEnumerationLiteralExpressionAccess();
	}
	
	public ParserRule getEnumerationLiteralExpressionRule() {
		return getEnumerationLiteralExpressionAccess().getRule();
	}

	/////////////////////////////////
	//// Basic Constraint
	/////////////////////////////////
	//BasicConstraintDefinition:
	//	"constraint" expression=Expression;
	public TTMCConstraintLanguageGrammarAccess.BasicConstraintDefinitionElements getBasicConstraintDefinitionAccess() {
		return gaTTMCConstraintLanguage.getBasicConstraintDefinitionAccess();
	}
	
	public ParserRule getBasicConstraintDefinitionRule() {
		return getBasicConstraintDefinitionAccess().getRule();
	}

	/////////////////////////////////
	//// Terminal
	/////////////////////////////////
	//terminal INT returns Ecore::EInt:
	//	"INT has been deactivated";
	public TerminalRule getINTRule() {
		return gaTTMCConstraintLanguage.getINTRule();
	} 

	//terminal STRING:
	//	"STRING has been deactivated";
	public TerminalRule getSTRINGRule() {
		return gaTTMCConstraintLanguage.getSTRINGRule();
	} 

	//terminal INTEGER returns Ecore::EBigInteger:
	//	"-"? "0".."9"+;
	public TerminalRule getINTEGERRule() {
		return gaTTMCConstraintLanguage.getINTEGERRule();
	} 

	//terminal DECIMAL returns Ecore::EBigDecimal:
	//	"-"? "0".."9"+ "." "0".."9"+;
	public TerminalRule getDECIMALRule() {
		return gaTTMCConstraintLanguage.getDECIMALRule();
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTTMCConstraintLanguage.getIDRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTTMCConstraintLanguage.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTTMCConstraintLanguage.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTTMCConstraintLanguage.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTTMCConstraintLanguage.getANY_OTHERRule();
	} 
}
