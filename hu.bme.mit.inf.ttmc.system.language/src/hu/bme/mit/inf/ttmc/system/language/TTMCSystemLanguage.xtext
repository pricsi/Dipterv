// automatically generated by Xtext
grammar hu.bme.mit.inf.ttmc.system.language.TTMCSystemLanguage with hu.bme.mit.inf.ttmc.constraint.language.TTMCConstraintLanguage

import "http://www.inf.mit.bme.hu/ttmc/TTMCSystem" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.inf.mit.bme.hu/ttmc/TTMCConstraint" as TTMCConstraint

SystemSpecification returns SystemSpecification:
	'specification' name=ID ('(' ((parameterDeclarations+=ParameterDeclaration)(',' parameterDeclarations+=ParameterDeclaration)*)? ')')? '{'
		(
			typeDeclarations+=TypeDeclaration |
			functionDeclarations+=FunctionDeclaration |
			constantDeclarations+=ConstantDeclaration |
			basicConstraintDefinitions+=BasicConstraintDefinition |
			systemDeclarations+=SystemDeclaration |
			propertyDeclarations+=PropertyDeclaration
		)*
	'}'
;

SystemDeclaration returns SystemDeclaration:
	'system' name=ID ('(' ((parameterDeclarations+=ParameterDeclaration)(',' parameterDeclarations+=ParameterDeclaration)*)? ')')? ':=' system=System
;

System returns System:
	AsynchronousCompositeSystem
;


AsynchronousCompositeSystem returns System:
	SynchronousCompositeSystem ({AsynchronousCompositeSystem.leftSystem=current} '[]' rightSystem=SynchronousCompositeSystem)*
;

SynchronousCompositeSystem returns System:
	MultiSystem ({SynchronousCompositeSystem.leftSystem=current} '||' rightSystem=MultiSystem)*
;

MultiSystem returns System:
	SynchronousMultiSystem |
	AsynchronousMultiSystem |
	PrimarySystem
;

SynchronousMultiSystem returns System:
	{SynchronousMultiSystem} => 'sync' '(' (parameterDeclarations+=ParameterDeclaration)(',' parameterDeclarations+=ParameterDeclaration)* ')' ':' system=MultiSystem
;

AsynchronousMultiSystem returns System:
	{AsynchronousMultiSystem} => 'async' '(' (parameterDeclarations+=ParameterDeclaration)(',' parameterDeclarations+=ParameterDeclaration)* ')' ':' system=MultiSystem
;

PrimarySystem returns System:
	SystemReference | SystemDefinition | '(' System ')'
;

SystemReference returns System:
	{SystemReference} reference=[SystemDeclaration] ('(' ((parameters+=Expression)(',' parameters+=Expression)*)? ')')?
;

SystemDefinition returns System:
	{SystemDefinition} '{'
		(
			variableDeclarations+=VariableDeclaration |
			definitionDeclarations+=DefinitionDeclaration |
			systemConstraintDefinitions+=SystemConstraintDefinition
		)*
	'}'
;

DefinitionDeclaration returns DefinitionDeclaration:
	'definition' name=ID ':' type=Type ':=' expression=Expression
;


/*
 * Specifying different variable types
 */
VariableDeclaration returns VariableDeclaration:
	LocalVariableDeclaration |
	GlobalVariableDeclaration |
	InputVariableDeclaration |
	OutputVariableDeclaration
;

LocalVariableDeclaration returns LocalVariableDeclaration:
	'local' 'var' name=ID ':' type=Type
;

GlobalVariableDeclaration returns GlobalVariableDeclaration:
	'global' 'var' name=ID ':' type=Type
;

InputVariableDeclaration returns InputVariableDeclaration:
	'input' 'var' name=ID ':' type=Type
;

OutputVariableDeclaration returns OutputVariableDeclaration:
	'output' 'var' name=ID ':' type=Type
;

SystemConstraintDefinition returns SystemConstraintDefinition:
	InvariantConstraintDefinition | InitialConstraintDefinition | TransitionConstraintDefinition
;

InvariantConstraintDefinition returns InvariantConstraintDefinition:
	'invariant' expression=Expression
;

InitialConstraintDefinition returns InitialConstraintDefinition:
	'initial' expression=Expression
;

TransitionConstraintDefinition returns TransitionConstraintDefinition:
	'transition' expression=Expression
;

PropertyDeclaration returns PropertyDeclaration:
	'property' name=ID ':' system=System 'models' expression=Expression
;