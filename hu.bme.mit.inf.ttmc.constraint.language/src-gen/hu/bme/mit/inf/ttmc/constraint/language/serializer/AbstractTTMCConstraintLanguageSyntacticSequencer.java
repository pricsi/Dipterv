/*
 * generated by Xtext
 */
package hu.bme.mit.inf.ttmc.constraint.language.serializer;

import com.google.inject.Inject;
import hu.bme.mit.inf.ttmc.constraint.language.services.TTMCConstraintLanguageGrammarAccess;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public abstract class AbstractTTMCConstraintLanguageSyntacticSequencer extends AbstractSyntacticSequencer {

	protected TTMCConstraintLanguageGrammarAccess grammarAccess;
	protected AbstractElementAlias match_ConstraintSpecification___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q;
	protected AbstractElementAlias match_FunctionDeclaration___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q;
	protected AbstractElementAlias match_PrimaryExpression_LeftParenthesisKeyword_2_0_a;
	protected AbstractElementAlias match_PrimaryExpression_LeftParenthesisKeyword_2_0_p;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (TTMCConstraintLanguageGrammarAccess) access;
		match_ConstraintSpecification___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getConstraintSpecificationAccess().getLeftParenthesisKeyword_2_0()), new TokenAlias(false, false, grammarAccess.getConstraintSpecificationAccess().getRightParenthesisKeyword_2_2()));
		match_FunctionDeclaration___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getFunctionDeclarationAccess().getLeftParenthesisKeyword_2_0()), new TokenAlias(false, false, grammarAccess.getFunctionDeclarationAccess().getRightParenthesisKeyword_2_2()));
		match_PrimaryExpression_LeftParenthesisKeyword_2_0_a = new TokenAlias(true, true, grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_2_0());
		match_PrimaryExpression_LeftParenthesisKeyword_2_0_p = new TokenAlias(true, false, grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_2_0());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if(match_ConstraintSpecification___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q.equals(syntax))
				emit_ConstraintSpecification___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_FunctionDeclaration___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q.equals(syntax))
				emit_FunctionDeclaration___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_PrimaryExpression_LeftParenthesisKeyword_2_0_a.equals(syntax))
				emit_PrimaryExpression_LeftParenthesisKeyword_2_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_PrimaryExpression_LeftParenthesisKeyword_2_0_p.equals(syntax))
				emit_PrimaryExpression_LeftParenthesisKeyword_2_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ('(' ')')?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID (ambiguity) '{' '}' (rule end)
	 *     name=ID (ambiguity) '{' basicConstraintDefinitions+=BasicConstraintDefinition
	 *     name=ID (ambiguity) '{' constantDeclarations+=ConstantDeclaration
	 *     name=ID (ambiguity) '{' functionDeclarations+=FunctionDeclaration
	 *     name=ID (ambiguity) '{' typeDeclarations+=TypeDeclaration
	 */
	protected void emit_ConstraintSpecification___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('(' ')')?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID (ambiguity) ':' type=Type
	 */
	protected void emit_FunctionDeclaration___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '(#' expressions+=Expression
	 *     (rule start) (ambiguity) '(#' fieldAssignments+=FieldAssignment
	 *     (rule start) (ambiguity) '+' operand=SignumExpression
	 *     (rule start) (ambiguity) '-' operand=SignumExpression
	 *     (rule start) (ambiguity) '::' reference=[EnumerationLiteralDefinition|ID]
	 *     (rule start) (ambiguity) 'A' operand=UnaryLogicExpression
	 *     (rule start) (ambiguity) 'E' operand=UnaryLogicExpression
	 *     (rule start) (ambiguity) 'F' operand=UnaryLogicExpression
	 *     (rule start) (ambiguity) 'G' operand=UnaryLogicExpression
	 *     (rule start) (ambiguity) 'X' operand=UnaryLogicExpression
	 *     (rule start) (ambiguity) '[' '|' operand=Expression
	 *     (rule start) (ambiguity) '[' parameterDeclarations+=ParameterDeclaration
	 *     (rule start) (ambiguity) 'exists' '(' ')' ':' operand=UnaryLogicExpression
	 *     (rule start) (ambiguity) 'exists' '(' parameterDeclarations+=ParameterDeclaration
	 *     (rule start) (ambiguity) 'false' (rule start)
	 *     (rule start) (ambiguity) 'forall' '(' ')' ':' operand=UnaryLogicExpression
	 *     (rule start) (ambiguity) 'forall' '(' parameterDeclarations+=ParameterDeclaration
	 *     (rule start) (ambiguity) 'function' '(' ')' ':' returnType=Type
	 *     (rule start) (ambiguity) 'function' '(' parameterDeclarations+=ParameterDeclaration
	 *     (rule start) (ambiguity) 'if' condition=Expression
	 *     (rule start) (ambiguity) 'let' '(' letDeclarations+=LetDeclaration
	 *     (rule start) (ambiguity) 'not' operand=UnaryLogicExpression
	 *     (rule start) (ambiguity) 'true' (rule start)
	 *     (rule start) (ambiguity) declaration=[Declaration|ID]
	 *     (rule start) (ambiguity) numerator=INTEGER
	 *     (rule start) (ambiguity) value=DECIMAL
	 *     (rule start) (ambiguity) value=INTEGER
	 *     (rule start) (ambiguity) {AddExpression.operands+=}
	 *     (rule start) (ambiguity) {AndExpression.operands+=}
	 *     (rule start) (ambiguity) {ArrayAccessExpression.operand=}
	 *     (rule start) (ambiguity) {DivExpression.leftOperand=}
	 *     (rule start) (ambiguity) {DivideExpression.leftOperand=}
	 *     (rule start) (ambiguity) {EqualExpression.leftOperand=}
	 *     (rule start) (ambiguity) {EqualityExpression.leftOperand=}
	 *     (rule start) (ambiguity) {FunctionAccessExpression.operand=}
	 *     (rule start) (ambiguity) {GreaterEqualExpression.leftOperand=}
	 *     (rule start) (ambiguity) {GreaterExpression.leftOperand=}
	 *     (rule start) (ambiguity) {ImplyExpression.leftOperand=}
	 *     (rule start) (ambiguity) {InExpression.operand=}
	 *     (rule start) (ambiguity) {InequalityExpression.leftOperand=}
	 *     (rule start) (ambiguity) {LessEqualExpression.leftOperand=}
	 *     (rule start) (ambiguity) {LessExpression.leftOperand=}
	 *     (rule start) (ambiguity) {ModExpression.leftOperand=}
	 *     (rule start) (ambiguity) {MultiplyExpression.operands+=}
	 *     (rule start) (ambiguity) {OrExpression.operands+=}
	 *     (rule start) (ambiguity) {PrimedExpression.operand=}
	 *     (rule start) (ambiguity) {RecordAccessExpression.operand=}
	 *     (rule start) (ambiguity) {ReleaseExpression.leftOperand=}
	 *     (rule start) (ambiguity) {SubtractExpression.leftOperand=}
	 *     (rule start) (ambiguity) {TupleAccessExpression.operand=}
	 *     (rule start) (ambiguity) {UntilExpression.leftOperand=}
	 */
	protected void emit_PrimaryExpression_LeftParenthesisKeyword_2_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '+' operand=SignumExpression
	 *     (rule start) (ambiguity) '-' operand=SignumExpression
	 *     (rule start) (ambiguity) 'A' operand=UnaryLogicExpression
	 *     (rule start) (ambiguity) 'E' operand=UnaryLogicExpression
	 *     (rule start) (ambiguity) 'F' operand=UnaryLogicExpression
	 *     (rule start) (ambiguity) 'G' operand=UnaryLogicExpression
	 *     (rule start) (ambiguity) 'X' operand=UnaryLogicExpression
	 *     (rule start) (ambiguity) 'exists' '(' ')' ':' operand=UnaryLogicExpression
	 *     (rule start) (ambiguity) 'exists' '(' parameterDeclarations+=ParameterDeclaration
	 *     (rule start) (ambiguity) 'forall' '(' ')' ':' operand=UnaryLogicExpression
	 *     (rule start) (ambiguity) 'forall' '(' parameterDeclarations+=ParameterDeclaration
	 *     (rule start) (ambiguity) 'function' '(' ')' ':' returnType=Type
	 *     (rule start) (ambiguity) 'function' '(' parameterDeclarations+=ParameterDeclaration
	 *     (rule start) (ambiguity) 'if' condition=Expression
	 *     (rule start) (ambiguity) 'let' '(' letDeclarations+=LetDeclaration
	 *     (rule start) (ambiguity) 'not' operand=UnaryLogicExpression
	 *     (rule start) (ambiguity) {AddExpression.operands+=}
	 *     (rule start) (ambiguity) {AndExpression.operands+=}
	 *     (rule start) (ambiguity) {ArrayAccessExpression.operand=}
	 *     (rule start) (ambiguity) {DivExpression.leftOperand=}
	 *     (rule start) (ambiguity) {DivideExpression.leftOperand=}
	 *     (rule start) (ambiguity) {EqualExpression.leftOperand=}
	 *     (rule start) (ambiguity) {EqualityExpression.leftOperand=}
	 *     (rule start) (ambiguity) {FunctionAccessExpression.operand=}
	 *     (rule start) (ambiguity) {GreaterEqualExpression.leftOperand=}
	 *     (rule start) (ambiguity) {GreaterExpression.leftOperand=}
	 *     (rule start) (ambiguity) {ImplyExpression.leftOperand=}
	 *     (rule start) (ambiguity) {InExpression.operand=}
	 *     (rule start) (ambiguity) {InequalityExpression.leftOperand=}
	 *     (rule start) (ambiguity) {LessEqualExpression.leftOperand=}
	 *     (rule start) (ambiguity) {LessExpression.leftOperand=}
	 *     (rule start) (ambiguity) {ModExpression.leftOperand=}
	 *     (rule start) (ambiguity) {MultiplyExpression.operands+=}
	 *     (rule start) (ambiguity) {OrExpression.operands+=}
	 *     (rule start) (ambiguity) {PrimedExpression.operand=}
	 *     (rule start) (ambiguity) {RecordAccessExpression.operand=}
	 *     (rule start) (ambiguity) {ReleaseExpression.leftOperand=}
	 *     (rule start) (ambiguity) {SubtractExpression.leftOperand=}
	 *     (rule start) (ambiguity) {TupleAccessExpression.operand=}
	 *     (rule start) (ambiguity) {UntilExpression.leftOperand=}
	 */
	protected void emit_PrimaryExpression_LeftParenthesisKeyword_2_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
