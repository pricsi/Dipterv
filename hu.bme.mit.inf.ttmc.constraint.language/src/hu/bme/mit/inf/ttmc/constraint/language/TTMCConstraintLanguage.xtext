grammar hu.bme.mit.inf.ttmc.constraint.language.TTMCConstraintLanguage with org.eclipse.xtext.common.Terminals

import "http://www.inf.mit.bme.hu/ttmc/TTMCConstraint"
import "http://www.eclipse.org/emf/2002/Ecore" as Ecore

///////////////////////////////////////////

ConstraintSpecification returns ConstraintSpecification:
	"specification" name=ID ('(' ((parameterDeclarations+=ParameterDeclaration)(',' parameterDeclarations+=ParameterDeclaration)*)? ')')? '{'
		(
			typeDeclarations+=TypeDeclaration |
			constantDeclarations+=ConstantDeclaration |
			functionDeclarations+=FunctionDeclaration |
			basicConstraintDefinitions+=BasicConstraintDefinition
		)*
	'}'
;




///////////////////////////////////////////

ParameterDeclaration returns ParameterDeclaration:
	{ParameterDeclaration} name=ID ':' type=Type
;

FieldDeclaration returns FieldDeclaration:
	{FieldDeclaration} name=ID ':' type=Type
;

LetDeclaration returns LetDeclaration:
	{LetDeclaration} name=ID ':' type=Type ':=' expression=Expression
;

ConstantDeclaration returns ConstantDeclaration:
	'const' name=ID ':' type=Type ( ':=' expression=Expression )?
;

FunctionDeclaration returns FunctionDeclaration:
	'function' name=ID ('(' ((parameterDeclarations+=ParameterDeclaration)(',' parameterDeclarations+=ParameterDeclaration)*)? ')')? ':' type=Type ( ':=' expression=Expression )?
;

////////////////////////////////////////
// Type language
////////////////////////////////////////

Type returns Type:
	TypeReference | TypeDefinition
;

TypeDeclaration returns TypeDeclaration:
	'type' name=ID ':' type=Type
;

TypeReference returns TypeReference:
	reference=[TypeDeclaration]
;

TypeDefinition returns TypeDefinition:
	NaturalTypeDefinition |
	IntegerTypeDefinition |
	BooleanTypeDefinition |
	RealTypeDefinition |
	ArrayTypeDefinition |
	EnumerationTypeDefinition |
	RecordTypeDefinition |
	TupleTypeDefinition |
	SubrangeTypeDefinition |
	SubTypeDefinition |
	FunctionTypeDefinition
;

NaturalTypeDefinition returns BasicTypeDefinition:
	{NaturalTypeDefinition} 'natural'
;

IntegerTypeDefinition returns BasicTypeDefinition:
	{IntegerTypeDefinition} 'integer'
;

BooleanTypeDefinition returns BasicTypeDefinition:
	{BooleanTypeDefinition} 'boolean'
;

RealTypeDefinition returns RealTypeDefinition:
	{RealTypeDefinition} 'real'
;

ArrayTypeDefinition returns ArrayTypeDefinition:
	'array' (indexTypes+=Type)(',' indexTypes+=Type)* 'of' elementType=Type
;

EnumerationTypeDefinition returns EnumerationTypeDefinition:
	'enum' '{' (literals+=EnumerationLiteralDefinition)(',' literals+=EnumerationLiteralDefinition)* '}'
;

EnumerationLiteralDefinition:
	name=ID
;

RecordTypeDefinition returns RecordTypeDefinition:
	'record' '{' (fieldDeclarations+=FieldDeclaration)(',' fieldDeclarations+=FieldDeclaration)* '}'
;

TupleTypeDefinition returns TupleTypeDefinition:
	'tuple' '{' (types+=Type)(',' types+=Type)* '}'
;

SubrangeTypeDefinition returns SubrangeTypeDefinition:
	{SubrangeTypeDefinition} '[' ('-' 'inf' | lowerBound=Expression) 'to' ('inf' | upperBound=Expression) ']'
;

SubTypeDefinition returns SubTypeDefinition:
	'{' parameterDeclaration=ParameterDeclaration '|' expression=Expression '}'
;

FunctionTypeDefinition returns FunctionTypeDefinition:
	'function' '(' ((parameterTypes+=Type)(',' parameterTypes+=Type)*)? ')' ':' returnType=Type
;

////////////////////////////////////////
// Expression language
////////////////////////////////////////

Expression returns Expression:
	IfThenElseExpression
;

//ternary, right-associative
IfThenElseExpression returns Expression:
	{IfThenElseExpression} 'if' condition=Expression 'then' then=Expression (=>'else' else=Expression) |
	EqualExpression
;

//binary, right-associative
EqualExpression returns Expression:
	ImplyExpression ({EqualExpression.leftOperand=current} 'equal' rightOperand=EqualExpression)?
;

//binary, right-associative
ImplyExpression returns Expression:
 	OrExpression ({ImplyExpression.leftOperand=current} 'imply' rightOperand=ImplyExpression)?
;

//multiary
OrExpression returns Expression:
	AndExpression ({OrExpression.operands+=current} ('or' operands+=AndExpression)+)?
;

//multiary
AndExpression returns Expression:
	ReleaseExpression ({AndExpression.operands+=current} ('and' operands+=ReleaseExpression)+)?
;

//binary, left-associative
ReleaseExpression returns Expression:
	UntilExpression ({ReleaseExpression.leftOperand=current} 'R' rightOperand=UntilExpression)*
;

//binary, left-associative
UntilExpression returns Expression:
	UnaryLogicExpression ({UntilExpression.leftOperand=current} 'U' rightOperand=UnaryLogicExpression)*
;

//prefix unary, right-associative
UnaryLogicExpression returns Expression:
	NotExpression |
	ForallExpression |
	ExistsExpression |
	FunctionLiteralExpression |
	GloballyExpression |
	FinallyExpression |
	NextExpression |
	TemporalForallExpression |
	TemporalExistsExpression |
	LetExpression |
	
	InExpression
;

NotExpression returns Expression:
	{NotExpression} => 'not' operand=UnaryLogicExpression
;

ForallExpression returns Expression:
	{ForallExpression} => 'forall' '(' ((parameterDeclarations+=ParameterDeclaration)(',' parameterDeclarations+=ParameterDeclaration)*)? ')' ':' operand=UnaryLogicExpression
;

ExistsExpression returns Expression:
	{ExistsExpression} => 'exists' '(' ((parameterDeclarations+=ParameterDeclaration)(',' parameterDeclarations+=ParameterDeclaration)*)? ')' ':' operand=UnaryLogicExpression
;

FunctionLiteralExpression returns Expression:
	{FunctionLiteralExpression} => 'function' '(' ((parameterDeclarations+=ParameterDeclaration)(',' parameterDeclarations+=ParameterDeclaration)*)? ')' ':' returnType=Type ':=' operand=UnaryLogicExpression
;


GloballyExpression returns Expression:
	{GloballyExpression} => 'G' operand=UnaryLogicExpression
;

FinallyExpression returns Expression:
	{FinallyExpression} => 'F' operand=UnaryLogicExpression
;

NextExpression returns Expression:
	{NextExpression} => 'X' operand=UnaryLogicExpression
;

TemporalForallExpression returns Expression:
	{TemporalForallExpression} => 'A' operand=UnaryLogicExpression
;

TemporalExistsExpression returns Expression:
	{TemporalExistsExpression} => 'E' operand=UnaryLogicExpression
;

LetExpression returns Expression:
	{LetExpression} 'let' '(' (letDeclarations+=LetDeclaration)(',' letDeclarations+=LetDeclaration)* ')' 'in' expression=UnaryLogicExpression
;

//postfix unary, non-associative
InExpression returns Expression:
	EquivalenceExpression ({InExpression.operand=current} 'in' type=Type)?
;

//binary, non-associative
EquivalenceExpression returns Expression:
	ComparisionExpression (
		{EqualityExpression.leftOperand=current} '=' rightOperand=ComparisionExpression |
		{InequalityExpression.leftOperand=current} '/=' rightOperand=ComparisionExpression
	)?
;

//binary, non-associative
ComparisionExpression returns Expression:
	AdditiveExpression (
		(
			{GreaterExpression.leftOperand=current} '>' |
			{GreaterEqualExpression.leftOperand=current} '>=' |
			{LessExpression.leftOperand=current} '<' |
			{LessEqualExpression.leftOperand=current} '<='
		) rightOperand=AdditiveExpression
	)*
;



//binary, left-associative
AdditiveExpression returns Expression:
	MultiplicativeExpression (
		{AddExpression.operands+=current} => ('+' operands+=MultiplicativeExpression)+ |
		{SubtractExpression.leftOperand=current} '-' rightOperand=MultiplicativeExpression
	)*
;

//binary, left-associative
MultiplicativeExpression returns Expression:
	SignumExpression (
		{MultiplyExpression.operands+=current} => ('*' operands+=SignumExpression)+ |
		(
			{DivideExpression.leftOperand=current} '/' |
			{DivExpression.leftOperand=current} 'div' |
			{ModExpression.leftOperand=current} 'mod'
		) rightOperand=SignumExpression
	)*
;

//prefix unary, right-associative
SignumExpression returns Expression:
	{UnaryMinusExpression} => '-' operand=SignumExpression |
	{UnaryPlusExpression} => '+' operand=SignumExpression |
	AccessExpression
	
	//non-associative
	//{UnaryMinusExpression} => '-' expression=ValueAccessExpression | ValueAccessExpression
;

//binary (postfix unary), left-associative
AccessExpression returns Expression:
	PrimaryExpression (
		{ArrayAccessExpression.operand=current} '[' ((parameters+=Expression)(',' parameters+=Expression)*) ']' |
		{FunctionAccessExpression.operand=current} '(' ((parameters+=Expression)(',' parameters+=Expression)*) ')' |
		{RecordAccessExpression.operand=current} '.' field=ID |
		{TupleAccessExpression.operand=current} '!' index=INTEGER |
		{PrimedExpression.operand=current} "'"
	)*
;

////postfix unary, non-associative
//PrimedExpression returns Expression:
//	PrimaryExpression ({PrimedExpression.operand=current} '^')?
//	//left-associative
//	//ValueAccessExpression ({PrimedExpression.expression=current} '^')*
//;

PrimaryExpression returns Expression:
	LiteralExpression | ReferenceExpression | '(' Expression ')'
;

ReferenceExpression returns ReferenceExpression:
	declaration=[Declaration]
;

LiteralExpression returns Expression:
	IntegerLiteralExpression |
	DecimalLiteralExpression |
	RationalLiteralExpression |
	BooleanLiteralExpression |
	ArrayLiteralExpression |
	RecordLiteralExpression |
	TupleLiteralExpression |
	EnumerationLiteralExpression
;

IntegerLiteralExpression:
	value=INTEGER
;

DecimalLiteralExpression:
	value=DECIMAL
;

RationalLiteralExpression:
	numerator=INTEGER '%' denominator=INTEGER
;

BooleanLiteralExpression:
	TrueExpression | FalseExpression
;

TrueExpression returns TrueExpression:
	{TrueExpression} 'true'
;

FalseExpression returns FalseExpression:
	{FalseExpression} 'false'
;

ArrayLiteralExpression:
	'[' ((parameterDeclarations+=ParameterDeclaration)(',' parameterDeclarations+=ParameterDeclaration)*)? '|' operand=Expression ']'
;

RecordLiteralExpression:
	'(#' (fieldAssignments+=FieldAssignment)(',' fieldAssignments+=FieldAssignment)* '#)'
;

FieldAssignment:
	reference=ID ':=' value=Expression
;

TupleLiteralExpression:
	'(#' (expressions+=Expression)(',' expressions+=Expression)* '#)'
;

EnumerationLiteralExpression:
	'::' reference=[EnumerationLiteralDefinition]
;


///////////////////////////////
// Basic Constraint
///////////////////////////////

BasicConstraintDefinition returns BasicConstraintDefinition:
	'constraint' expression=Expression
;

///////////////////////////////
// Terminal
///////////////////////////////

terminal INT returns Ecore::EInt:
	'INT has been deactivated'
;

terminal STRING returns Ecore::EString:
	'STRING has been deactivated'
;

terminal INTEGER returns Ecore::EBigInteger:
	'-'? ('0'..'9')+
;

terminal DECIMAL returns Ecore::EBigDecimal:
	'-'? ('0'..'9')+ '.' ('0'..'9')+
;