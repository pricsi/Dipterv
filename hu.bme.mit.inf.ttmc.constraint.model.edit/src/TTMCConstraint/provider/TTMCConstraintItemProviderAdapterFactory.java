/**
 */
package TTMCConstraint.provider;

import TTMCConstraint.util.TTMCConstraintAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class TTMCConstraintItemProviderAdapterFactory extends TTMCConstraintAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public TTMCConstraintItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link TTMCConstraint.ParametrizedElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParametrizedElementItemProvider parametrizedElementItemProvider;

	/**
	 * This creates an adapter for a {@link TTMCConstraint.ParametrizedElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParametrizedElementAdapter() {
		if (parametrizedElementItemProvider == null) {
			parametrizedElementItemProvider = new ParametrizedElementItemProvider(this);
		}

		return parametrizedElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TTMCConstraint.ConstraintSpecification} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConstraintSpecificationItemProvider constraintSpecificationItemProvider;

	/**
	 * This creates an adapter for a {@link TTMCConstraint.ConstraintSpecification}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConstraintSpecificationAdapter() {
		if (constraintSpecificationItemProvider == null) {
			constraintSpecificationItemProvider = new ConstraintSpecificationItemProvider(this);
		}

		return constraintSpecificationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TTMCConstraint.ParameterDeclaration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParameterDeclarationItemProvider parameterDeclarationItemProvider;

	/**
	 * This creates an adapter for a {@link TTMCConstraint.ParameterDeclaration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParameterDeclarationAdapter() {
		if (parameterDeclarationItemProvider == null) {
			parameterDeclarationItemProvider = new ParameterDeclarationItemProvider(this);
		}

		return parameterDeclarationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TTMCConstraint.FieldDeclaration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FieldDeclarationItemProvider fieldDeclarationItemProvider;

	/**
	 * This creates an adapter for a {@link TTMCConstraint.FieldDeclaration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFieldDeclarationAdapter() {
		if (fieldDeclarationItemProvider == null) {
			fieldDeclarationItemProvider = new FieldDeclarationItemProvider(this);
		}

		return fieldDeclarationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TTMCConstraint.LetDeclaration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LetDeclarationItemProvider letDeclarationItemProvider;

	/**
	 * This creates an adapter for a {@link TTMCConstraint.LetDeclaration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLetDeclarationAdapter() {
		if (letDeclarationItemProvider == null) {
			letDeclarationItemProvider = new LetDeclarationItemProvider(this);
		}

		return letDeclarationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TTMCConstraint.ConstantDeclaration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConstantDeclarationItemProvider constantDeclarationItemProvider;

	/**
	 * This creates an adapter for a {@link TTMCConstraint.ConstantDeclaration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConstantDeclarationAdapter() {
		if (constantDeclarationItemProvider == null) {
			constantDeclarationItemProvider = new ConstantDeclarationItemProvider(this);
		}

		return constantDeclarationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TTMCConstraint.FunctionDeclaration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FunctionDeclarationItemProvider functionDeclarationItemProvider;

	/**
	 * This creates an adapter for a {@link TTMCConstraint.FunctionDeclaration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFunctionDeclarationAdapter() {
		if (functionDeclarationItemProvider == null) {
			functionDeclarationItemProvider = new FunctionDeclarationItemProvider(this);
		}

		return functionDeclarationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TTMCConstraint.Type} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypeItemProvider typeItemProvider;

	/**
	 * This creates an adapter for a {@link TTMCConstraint.Type}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypeAdapter() {
		if (typeItemProvider == null) {
			typeItemProvider = new TypeItemProvider(this);
		}

		return typeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TTMCConstraint.TypeDeclaration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypeDeclarationItemProvider typeDeclarationItemProvider;

	/**
	 * This creates an adapter for a {@link TTMCConstraint.TypeDeclaration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypeDeclarationAdapter() {
		if (typeDeclarationItemProvider == null) {
			typeDeclarationItemProvider = new TypeDeclarationItemProvider(this);
		}

		return typeDeclarationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TTMCConstraint.TypeReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypeReferenceItemProvider typeReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link TTMCConstraint.TypeReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypeReferenceAdapter() {
		if (typeReferenceItemProvider == null) {
			typeReferenceItemProvider = new TypeReferenceItemProvider(this);
		}

		return typeReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TTMCConstraint.TypeDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypeDefinitionItemProvider typeDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link TTMCConstraint.TypeDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypeDefinitionAdapter() {
		if (typeDefinitionItemProvider == null) {
			typeDefinitionItemProvider = new TypeDefinitionItemProvider(this);
		}

		return typeDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TTMCConstraint.IntegerTypeDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntegerTypeDefinitionItemProvider integerTypeDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link TTMCConstraint.IntegerTypeDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntegerTypeDefinitionAdapter() {
		if (integerTypeDefinitionItemProvider == null) {
			integerTypeDefinitionItemProvider = new IntegerTypeDefinitionItemProvider(this);
		}

		return integerTypeDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TTMCConstraint.NaturalTypeDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NaturalTypeDefinitionItemProvider naturalTypeDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link TTMCConstraint.NaturalTypeDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNaturalTypeDefinitionAdapter() {
		if (naturalTypeDefinitionItemProvider == null) {
			naturalTypeDefinitionItemProvider = new NaturalTypeDefinitionItemProvider(this);
		}

		return naturalTypeDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TTMCConstraint.BooleanTypeDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BooleanTypeDefinitionItemProvider booleanTypeDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link TTMCConstraint.BooleanTypeDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBooleanTypeDefinitionAdapter() {
		if (booleanTypeDefinitionItemProvider == null) {
			booleanTypeDefinitionItemProvider = new BooleanTypeDefinitionItemProvider(this);
		}

		return booleanTypeDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TTMCConstraint.RealTypeDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RealTypeDefinitionItemProvider realTypeDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link TTMCConstraint.RealTypeDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRealTypeDefinitionAdapter() {
		if (realTypeDefinitionItemProvider == null) {
			realTypeDefinitionItemProvider = new RealTypeDefinitionItemProvider(this);
		}

		return realTypeDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TTMCConstraint.SubrangeTypeDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SubrangeTypeDefinitionItemProvider subrangeTypeDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link TTMCConstraint.SubrangeTypeDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSubrangeTypeDefinitionAdapter() {
		if (subrangeTypeDefinitionItemProvider == null) {
			subrangeTypeDefinitionItemProvider = new SubrangeTypeDefinitionItemProvider(this);
		}

		return subrangeTypeDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TTMCConstraint.SubTypeDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SubTypeDefinitionItemProvider subTypeDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link TTMCConstraint.SubTypeDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSubTypeDefinitionAdapter() {
		if (subTypeDefinitionItemProvider == null) {
			subTypeDefinitionItemProvider = new SubTypeDefinitionItemProvider(this);
		}

		return subTypeDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TTMCConstraint.EnumerationTypeDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EnumerationTypeDefinitionItemProvider enumerationTypeDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link TTMCConstraint.EnumerationTypeDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEnumerationTypeDefinitionAdapter() {
		if (enumerationTypeDefinitionItemProvider == null) {
			enumerationTypeDefinitionItemProvider = new EnumerationTypeDefinitionItemProvider(this);
		}

		return enumerationTypeDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TTMCConstraint.EnumerationLiteralDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EnumerationLiteralDefinitionItemProvider enumerationLiteralDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link TTMCConstraint.EnumerationLiteralDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEnumerationLiteralDefinitionAdapter() {
		if (enumerationLiteralDefinitionItemProvider == null) {
			enumerationLiteralDefinitionItemProvider = new EnumerationLiteralDefinitionItemProvider(this);
		}

		return enumerationLiteralDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TTMCConstraint.FunctionTypeDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FunctionTypeDefinitionItemProvider functionTypeDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link TTMCConstraint.FunctionTypeDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFunctionTypeDefinitionAdapter() {
		if (functionTypeDefinitionItemProvider == null) {
			functionTypeDefinitionItemProvider = new FunctionTypeDefinitionItemProvider(this);
		}

		return functionTypeDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TTMCConstraint.ArrayTypeDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ArrayTypeDefinitionItemProvider arrayTypeDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link TTMCConstraint.ArrayTypeDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createArrayTypeDefinitionAdapter() {
		if (arrayTypeDefinitionItemProvider == null) {
			arrayTypeDefinitionItemProvider = new ArrayTypeDefinitionItemProvider(this);
		}

		return arrayTypeDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TTMCConstraint.TupleTypeDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TupleTypeDefinitionItemProvider tupleTypeDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link TTMCConstraint.TupleTypeDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTupleTypeDefinitionAdapter() {
		if (tupleTypeDefinitionItemProvider == null) {
			tupleTypeDefinitionItemProvider = new TupleTypeDefinitionItemProvider(this);
		}

		return tupleTypeDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TTMCConstraint.RecordTypeDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RecordTypeDefinitionItemProvider recordTypeDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link TTMCConstraint.RecordTypeDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRecordTypeDefinitionAdapter() {
		if (recordTypeDefinitionItemProvider == null) {
			recordTypeDefinitionItemProvider = new RecordTypeDefinitionItemProvider(this);
		}

		return recordTypeDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TTMCConstraint.BasicConstraintDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BasicConstraintDefinitionItemProvider basicConstraintDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link TTMCConstraint.BasicConstraintDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBasicConstraintDefinitionAdapter() {
		if (basicConstraintDefinitionItemProvider == null) {
			basicConstraintDefinitionItemProvider = new BasicConstraintDefinitionItemProvider(this);
		}

		return basicConstraintDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TTMCConstraint.IntegerLiteralExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntegerLiteralExpressionItemProvider integerLiteralExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link TTMCConstraint.IntegerLiteralExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntegerLiteralExpressionAdapter() {
		if (integerLiteralExpressionItemProvider == null) {
			integerLiteralExpressionItemProvider = new IntegerLiteralExpressionItemProvider(this);
		}

		return integerLiteralExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TTMCConstraint.DecimalLiteralExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DecimalLiteralExpressionItemProvider decimalLiteralExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link TTMCConstraint.DecimalLiteralExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDecimalLiteralExpressionAdapter() {
		if (decimalLiteralExpressionItemProvider == null) {
			decimalLiteralExpressionItemProvider = new DecimalLiteralExpressionItemProvider(this);
		}

		return decimalLiteralExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TTMCConstraint.RationalLiteralExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RationalLiteralExpressionItemProvider rationalLiteralExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link TTMCConstraint.RationalLiteralExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRationalLiteralExpressionAdapter() {
		if (rationalLiteralExpressionItemProvider == null) {
			rationalLiteralExpressionItemProvider = new RationalLiteralExpressionItemProvider(this);
		}

		return rationalLiteralExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TTMCConstraint.TrueExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TrueExpressionItemProvider trueExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link TTMCConstraint.TrueExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTrueExpressionAdapter() {
		if (trueExpressionItemProvider == null) {
			trueExpressionItemProvider = new TrueExpressionItemProvider(this);
		}

		return trueExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TTMCConstraint.FalseExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FalseExpressionItemProvider falseExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link TTMCConstraint.FalseExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFalseExpressionAdapter() {
		if (falseExpressionItemProvider == null) {
			falseExpressionItemProvider = new FalseExpressionItemProvider(this);
		}

		return falseExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TTMCConstraint.ArrayLiteralExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ArrayLiteralExpressionItemProvider arrayLiteralExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link TTMCConstraint.ArrayLiteralExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createArrayLiteralExpressionAdapter() {
		if (arrayLiteralExpressionItemProvider == null) {
			arrayLiteralExpressionItemProvider = new ArrayLiteralExpressionItemProvider(this);
		}

		return arrayLiteralExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TTMCConstraint.FunctionLiteralExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FunctionLiteralExpressionItemProvider functionLiteralExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link TTMCConstraint.FunctionLiteralExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFunctionLiteralExpressionAdapter() {
		if (functionLiteralExpressionItemProvider == null) {
			functionLiteralExpressionItemProvider = new FunctionLiteralExpressionItemProvider(this);
		}

		return functionLiteralExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TTMCConstraint.RecordLiteralExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RecordLiteralExpressionItemProvider recordLiteralExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link TTMCConstraint.RecordLiteralExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRecordLiteralExpressionAdapter() {
		if (recordLiteralExpressionItemProvider == null) {
			recordLiteralExpressionItemProvider = new RecordLiteralExpressionItemProvider(this);
		}

		return recordLiteralExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TTMCConstraint.FieldAssignment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FieldAssignmentItemProvider fieldAssignmentItemProvider;

	/**
	 * This creates an adapter for a {@link TTMCConstraint.FieldAssignment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFieldAssignmentAdapter() {
		if (fieldAssignmentItemProvider == null) {
			fieldAssignmentItemProvider = new FieldAssignmentItemProvider(this);
		}

		return fieldAssignmentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TTMCConstraint.EnumerationLiteralExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EnumerationLiteralExpressionItemProvider enumerationLiteralExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link TTMCConstraint.EnumerationLiteralExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEnumerationLiteralExpressionAdapter() {
		if (enumerationLiteralExpressionItemProvider == null) {
			enumerationLiteralExpressionItemProvider = new EnumerationLiteralExpressionItemProvider(this);
		}

		return enumerationLiteralExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TTMCConstraint.TupleLiteralExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TupleLiteralExpressionItemProvider tupleLiteralExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link TTMCConstraint.TupleLiteralExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTupleLiteralExpressionAdapter() {
		if (tupleLiteralExpressionItemProvider == null) {
			tupleLiteralExpressionItemProvider = new TupleLiteralExpressionItemProvider(this);
		}

		return tupleLiteralExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TTMCConstraint.ReferenceExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReferenceExpressionItemProvider referenceExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link TTMCConstraint.ReferenceExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReferenceExpressionAdapter() {
		if (referenceExpressionItemProvider == null) {
			referenceExpressionItemProvider = new ReferenceExpressionItemProvider(this);
		}

		return referenceExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TTMCConstraint.IfThenElseExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IfThenElseExpressionItemProvider ifThenElseExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link TTMCConstraint.IfThenElseExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIfThenElseExpressionAdapter() {
		if (ifThenElseExpressionItemProvider == null) {
			ifThenElseExpressionItemProvider = new IfThenElseExpressionItemProvider(this);
		}

		return ifThenElseExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TTMCConstraint.LetExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LetExpressionItemProvider letExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link TTMCConstraint.LetExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLetExpressionAdapter() {
		if (letExpressionItemProvider == null) {
			letExpressionItemProvider = new LetExpressionItemProvider(this);
		}

		return letExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TTMCConstraint.EqualExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EqualExpressionItemProvider equalExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link TTMCConstraint.EqualExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEqualExpressionAdapter() {
		if (equalExpressionItemProvider == null) {
			equalExpressionItemProvider = new EqualExpressionItemProvider(this);
		}

		return equalExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TTMCConstraint.ImplyExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ImplyExpressionItemProvider implyExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link TTMCConstraint.ImplyExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createImplyExpressionAdapter() {
		if (implyExpressionItemProvider == null) {
			implyExpressionItemProvider = new ImplyExpressionItemProvider(this);
		}

		return implyExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TTMCConstraint.OrExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OrExpressionItemProvider orExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link TTMCConstraint.OrExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOrExpressionAdapter() {
		if (orExpressionItemProvider == null) {
			orExpressionItemProvider = new OrExpressionItemProvider(this);
		}

		return orExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TTMCConstraint.AndExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AndExpressionItemProvider andExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link TTMCConstraint.AndExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAndExpressionAdapter() {
		if (andExpressionItemProvider == null) {
			andExpressionItemProvider = new AndExpressionItemProvider(this);
		}

		return andExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TTMCConstraint.ReleaseExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReleaseExpressionItemProvider releaseExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link TTMCConstraint.ReleaseExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReleaseExpressionAdapter() {
		if (releaseExpressionItemProvider == null) {
			releaseExpressionItemProvider = new ReleaseExpressionItemProvider(this);
		}

		return releaseExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TTMCConstraint.UntilExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UntilExpressionItemProvider untilExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link TTMCConstraint.UntilExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUntilExpressionAdapter() {
		if (untilExpressionItemProvider == null) {
			untilExpressionItemProvider = new UntilExpressionItemProvider(this);
		}

		return untilExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TTMCConstraint.NotExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NotExpressionItemProvider notExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link TTMCConstraint.NotExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNotExpressionAdapter() {
		if (notExpressionItemProvider == null) {
			notExpressionItemProvider = new NotExpressionItemProvider(this);
		}

		return notExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TTMCConstraint.ForallExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ForallExpressionItemProvider forallExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link TTMCConstraint.ForallExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createForallExpressionAdapter() {
		if (forallExpressionItemProvider == null) {
			forallExpressionItemProvider = new ForallExpressionItemProvider(this);
		}

		return forallExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TTMCConstraint.ExistsExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExistsExpressionItemProvider existsExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link TTMCConstraint.ExistsExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExistsExpressionAdapter() {
		if (existsExpressionItemProvider == null) {
			existsExpressionItemProvider = new ExistsExpressionItemProvider(this);
		}

		return existsExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TTMCConstraint.GloballyExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GloballyExpressionItemProvider globallyExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link TTMCConstraint.GloballyExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGloballyExpressionAdapter() {
		if (globallyExpressionItemProvider == null) {
			globallyExpressionItemProvider = new GloballyExpressionItemProvider(this);
		}

		return globallyExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TTMCConstraint.FinallyExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FinallyExpressionItemProvider finallyExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link TTMCConstraint.FinallyExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFinallyExpressionAdapter() {
		if (finallyExpressionItemProvider == null) {
			finallyExpressionItemProvider = new FinallyExpressionItemProvider(this);
		}

		return finallyExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TTMCConstraint.NextExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NextExpressionItemProvider nextExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link TTMCConstraint.NextExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNextExpressionAdapter() {
		if (nextExpressionItemProvider == null) {
			nextExpressionItemProvider = new NextExpressionItemProvider(this);
		}

		return nextExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TTMCConstraint.TemporalForallExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TemporalForallExpressionItemProvider temporalForallExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link TTMCConstraint.TemporalForallExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTemporalForallExpressionAdapter() {
		if (temporalForallExpressionItemProvider == null) {
			temporalForallExpressionItemProvider = new TemporalForallExpressionItemProvider(this);
		}

		return temporalForallExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TTMCConstraint.TemporalExistsExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TemporalExistsExpressionItemProvider temporalExistsExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link TTMCConstraint.TemporalExistsExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTemporalExistsExpressionAdapter() {
		if (temporalExistsExpressionItemProvider == null) {
			temporalExistsExpressionItemProvider = new TemporalExistsExpressionItemProvider(this);
		}

		return temporalExistsExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TTMCConstraint.InExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InExpressionItemProvider inExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link TTMCConstraint.InExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInExpressionAdapter() {
		if (inExpressionItemProvider == null) {
			inExpressionItemProvider = new InExpressionItemProvider(this);
		}

		return inExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TTMCConstraint.PrimedExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PrimedExpressionItemProvider primedExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link TTMCConstraint.PrimedExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPrimedExpressionAdapter() {
		if (primedExpressionItemProvider == null) {
			primedExpressionItemProvider = new PrimedExpressionItemProvider(this);
		}

		return primedExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TTMCConstraint.EqualityExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EqualityExpressionItemProvider equalityExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link TTMCConstraint.EqualityExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEqualityExpressionAdapter() {
		if (equalityExpressionItemProvider == null) {
			equalityExpressionItemProvider = new EqualityExpressionItemProvider(this);
		}

		return equalityExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TTMCConstraint.InequalityExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InequalityExpressionItemProvider inequalityExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link TTMCConstraint.InequalityExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInequalityExpressionAdapter() {
		if (inequalityExpressionItemProvider == null) {
			inequalityExpressionItemProvider = new InequalityExpressionItemProvider(this);
		}

		return inequalityExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TTMCConstraint.GreaterExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GreaterExpressionItemProvider greaterExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link TTMCConstraint.GreaterExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGreaterExpressionAdapter() {
		if (greaterExpressionItemProvider == null) {
			greaterExpressionItemProvider = new GreaterExpressionItemProvider(this);
		}

		return greaterExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TTMCConstraint.GreaterEqualExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GreaterEqualExpressionItemProvider greaterEqualExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link TTMCConstraint.GreaterEqualExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGreaterEqualExpressionAdapter() {
		if (greaterEqualExpressionItemProvider == null) {
			greaterEqualExpressionItemProvider = new GreaterEqualExpressionItemProvider(this);
		}

		return greaterEqualExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TTMCConstraint.LessExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LessExpressionItemProvider lessExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link TTMCConstraint.LessExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLessExpressionAdapter() {
		if (lessExpressionItemProvider == null) {
			lessExpressionItemProvider = new LessExpressionItemProvider(this);
		}

		return lessExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TTMCConstraint.LessEqualExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LessEqualExpressionItemProvider lessEqualExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link TTMCConstraint.LessEqualExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLessEqualExpressionAdapter() {
		if (lessEqualExpressionItemProvider == null) {
			lessEqualExpressionItemProvider = new LessEqualExpressionItemProvider(this);
		}

		return lessEqualExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TTMCConstraint.AddExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AddExpressionItemProvider addExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link TTMCConstraint.AddExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAddExpressionAdapter() {
		if (addExpressionItemProvider == null) {
			addExpressionItemProvider = new AddExpressionItemProvider(this);
		}

		return addExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TTMCConstraint.SubtractExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SubtractExpressionItemProvider subtractExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link TTMCConstraint.SubtractExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSubtractExpressionAdapter() {
		if (subtractExpressionItemProvider == null) {
			subtractExpressionItemProvider = new SubtractExpressionItemProvider(this);
		}

		return subtractExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TTMCConstraint.MultiplyExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MultiplyExpressionItemProvider multiplyExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link TTMCConstraint.MultiplyExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMultiplyExpressionAdapter() {
		if (multiplyExpressionItemProvider == null) {
			multiplyExpressionItemProvider = new MultiplyExpressionItemProvider(this);
		}

		return multiplyExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TTMCConstraint.DivideExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DivideExpressionItemProvider divideExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link TTMCConstraint.DivideExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDivideExpressionAdapter() {
		if (divideExpressionItemProvider == null) {
			divideExpressionItemProvider = new DivideExpressionItemProvider(this);
		}

		return divideExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TTMCConstraint.DivExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DivExpressionItemProvider divExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link TTMCConstraint.DivExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDivExpressionAdapter() {
		if (divExpressionItemProvider == null) {
			divExpressionItemProvider = new DivExpressionItemProvider(this);
		}

		return divExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TTMCConstraint.ModExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModExpressionItemProvider modExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link TTMCConstraint.ModExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModExpressionAdapter() {
		if (modExpressionItemProvider == null) {
			modExpressionItemProvider = new ModExpressionItemProvider(this);
		}

		return modExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TTMCConstraint.UnaryMinusExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnaryMinusExpressionItemProvider unaryMinusExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link TTMCConstraint.UnaryMinusExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnaryMinusExpressionAdapter() {
		if (unaryMinusExpressionItemProvider == null) {
			unaryMinusExpressionItemProvider = new UnaryMinusExpressionItemProvider(this);
		}

		return unaryMinusExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TTMCConstraint.UnaryPlusExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnaryPlusExpressionItemProvider unaryPlusExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link TTMCConstraint.UnaryPlusExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnaryPlusExpressionAdapter() {
		if (unaryPlusExpressionItemProvider == null) {
			unaryPlusExpressionItemProvider = new UnaryPlusExpressionItemProvider(this);
		}

		return unaryPlusExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TTMCConstraint.FunctionAccessExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FunctionAccessExpressionItemProvider functionAccessExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link TTMCConstraint.FunctionAccessExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFunctionAccessExpressionAdapter() {
		if (functionAccessExpressionItemProvider == null) {
			functionAccessExpressionItemProvider = new FunctionAccessExpressionItemProvider(this);
		}

		return functionAccessExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TTMCConstraint.ArrayAccessExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ArrayAccessExpressionItemProvider arrayAccessExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link TTMCConstraint.ArrayAccessExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createArrayAccessExpressionAdapter() {
		if (arrayAccessExpressionItemProvider == null) {
			arrayAccessExpressionItemProvider = new ArrayAccessExpressionItemProvider(this);
		}

		return arrayAccessExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TTMCConstraint.TupleAccessExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TupleAccessExpressionItemProvider tupleAccessExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link TTMCConstraint.TupleAccessExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTupleAccessExpressionAdapter() {
		if (tupleAccessExpressionItemProvider == null) {
			tupleAccessExpressionItemProvider = new TupleAccessExpressionItemProvider(this);
		}

		return tupleAccessExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TTMCConstraint.RecordAccessExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RecordAccessExpressionItemProvider recordAccessExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link TTMCConstraint.RecordAccessExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRecordAccessExpressionAdapter() {
		if (recordAccessExpressionItemProvider == null) {
			recordAccessExpressionItemProvider = new RecordAccessExpressionItemProvider(this);
		}

		return recordAccessExpressionItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (parametrizedElementItemProvider != null) parametrizedElementItemProvider.dispose();
		if (constraintSpecificationItemProvider != null) constraintSpecificationItemProvider.dispose();
		if (parameterDeclarationItemProvider != null) parameterDeclarationItemProvider.dispose();
		if (fieldDeclarationItemProvider != null) fieldDeclarationItemProvider.dispose();
		if (letDeclarationItemProvider != null) letDeclarationItemProvider.dispose();
		if (constantDeclarationItemProvider != null) constantDeclarationItemProvider.dispose();
		if (functionDeclarationItemProvider != null) functionDeclarationItemProvider.dispose();
		if (typeItemProvider != null) typeItemProvider.dispose();
		if (typeDeclarationItemProvider != null) typeDeclarationItemProvider.dispose();
		if (typeReferenceItemProvider != null) typeReferenceItemProvider.dispose();
		if (typeDefinitionItemProvider != null) typeDefinitionItemProvider.dispose();
		if (integerTypeDefinitionItemProvider != null) integerTypeDefinitionItemProvider.dispose();
		if (naturalTypeDefinitionItemProvider != null) naturalTypeDefinitionItemProvider.dispose();
		if (booleanTypeDefinitionItemProvider != null) booleanTypeDefinitionItemProvider.dispose();
		if (realTypeDefinitionItemProvider != null) realTypeDefinitionItemProvider.dispose();
		if (subrangeTypeDefinitionItemProvider != null) subrangeTypeDefinitionItemProvider.dispose();
		if (subTypeDefinitionItemProvider != null) subTypeDefinitionItemProvider.dispose();
		if (enumerationTypeDefinitionItemProvider != null) enumerationTypeDefinitionItemProvider.dispose();
		if (enumerationLiteralDefinitionItemProvider != null) enumerationLiteralDefinitionItemProvider.dispose();
		if (functionTypeDefinitionItemProvider != null) functionTypeDefinitionItemProvider.dispose();
		if (arrayTypeDefinitionItemProvider != null) arrayTypeDefinitionItemProvider.dispose();
		if (tupleTypeDefinitionItemProvider != null) tupleTypeDefinitionItemProvider.dispose();
		if (recordTypeDefinitionItemProvider != null) recordTypeDefinitionItemProvider.dispose();
		if (basicConstraintDefinitionItemProvider != null) basicConstraintDefinitionItemProvider.dispose();
		if (integerLiteralExpressionItemProvider != null) integerLiteralExpressionItemProvider.dispose();
		if (decimalLiteralExpressionItemProvider != null) decimalLiteralExpressionItemProvider.dispose();
		if (rationalLiteralExpressionItemProvider != null) rationalLiteralExpressionItemProvider.dispose();
		if (trueExpressionItemProvider != null) trueExpressionItemProvider.dispose();
		if (falseExpressionItemProvider != null) falseExpressionItemProvider.dispose();
		if (arrayLiteralExpressionItemProvider != null) arrayLiteralExpressionItemProvider.dispose();
		if (functionLiteralExpressionItemProvider != null) functionLiteralExpressionItemProvider.dispose();
		if (recordLiteralExpressionItemProvider != null) recordLiteralExpressionItemProvider.dispose();
		if (fieldAssignmentItemProvider != null) fieldAssignmentItemProvider.dispose();
		if (enumerationLiteralExpressionItemProvider != null) enumerationLiteralExpressionItemProvider.dispose();
		if (tupleLiteralExpressionItemProvider != null) tupleLiteralExpressionItemProvider.dispose();
		if (referenceExpressionItemProvider != null) referenceExpressionItemProvider.dispose();
		if (ifThenElseExpressionItemProvider != null) ifThenElseExpressionItemProvider.dispose();
		if (letExpressionItemProvider != null) letExpressionItemProvider.dispose();
		if (equalExpressionItemProvider != null) equalExpressionItemProvider.dispose();
		if (implyExpressionItemProvider != null) implyExpressionItemProvider.dispose();
		if (orExpressionItemProvider != null) orExpressionItemProvider.dispose();
		if (andExpressionItemProvider != null) andExpressionItemProvider.dispose();
		if (releaseExpressionItemProvider != null) releaseExpressionItemProvider.dispose();
		if (untilExpressionItemProvider != null) untilExpressionItemProvider.dispose();
		if (notExpressionItemProvider != null) notExpressionItemProvider.dispose();
		if (forallExpressionItemProvider != null) forallExpressionItemProvider.dispose();
		if (existsExpressionItemProvider != null) existsExpressionItemProvider.dispose();
		if (globallyExpressionItemProvider != null) globallyExpressionItemProvider.dispose();
		if (finallyExpressionItemProvider != null) finallyExpressionItemProvider.dispose();
		if (nextExpressionItemProvider != null) nextExpressionItemProvider.dispose();
		if (temporalForallExpressionItemProvider != null) temporalForallExpressionItemProvider.dispose();
		if (temporalExistsExpressionItemProvider != null) temporalExistsExpressionItemProvider.dispose();
		if (inExpressionItemProvider != null) inExpressionItemProvider.dispose();
		if (primedExpressionItemProvider != null) primedExpressionItemProvider.dispose();
		if (equalityExpressionItemProvider != null) equalityExpressionItemProvider.dispose();
		if (inequalityExpressionItemProvider != null) inequalityExpressionItemProvider.dispose();
		if (greaterExpressionItemProvider != null) greaterExpressionItemProvider.dispose();
		if (greaterEqualExpressionItemProvider != null) greaterEqualExpressionItemProvider.dispose();
		if (lessExpressionItemProvider != null) lessExpressionItemProvider.dispose();
		if (lessEqualExpressionItemProvider != null) lessEqualExpressionItemProvider.dispose();
		if (addExpressionItemProvider != null) addExpressionItemProvider.dispose();
		if (subtractExpressionItemProvider != null) subtractExpressionItemProvider.dispose();
		if (multiplyExpressionItemProvider != null) multiplyExpressionItemProvider.dispose();
		if (divideExpressionItemProvider != null) divideExpressionItemProvider.dispose();
		if (divExpressionItemProvider != null) divExpressionItemProvider.dispose();
		if (modExpressionItemProvider != null) modExpressionItemProvider.dispose();
		if (unaryMinusExpressionItemProvider != null) unaryMinusExpressionItemProvider.dispose();
		if (unaryPlusExpressionItemProvider != null) unaryPlusExpressionItemProvider.dispose();
		if (functionAccessExpressionItemProvider != null) functionAccessExpressionItemProvider.dispose();
		if (arrayAccessExpressionItemProvider != null) arrayAccessExpressionItemProvider.dispose();
		if (tupleAccessExpressionItemProvider != null) tupleAccessExpressionItemProvider.dispose();
		if (recordAccessExpressionItemProvider != null) recordAccessExpressionItemProvider.dispose();
	}

}
