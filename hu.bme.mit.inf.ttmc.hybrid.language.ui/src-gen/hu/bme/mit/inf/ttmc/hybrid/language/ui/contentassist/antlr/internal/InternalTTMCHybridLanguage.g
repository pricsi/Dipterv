/*
 * generated by Xtext
 */
grammar InternalTTMCHybridLanguage;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
	
}

@lexer::header {
package hu.bme.mit.inf.ttmc.hybrid.language.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package hu.bme.mit.inf.ttmc.hybrid.language.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import hu.bme.mit.inf.ttmc.hybrid.language.services.TTMCHybridLanguageGrammarAccess;

}

@parser::members {
 
 	private TTMCHybridLanguageGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(TTMCHybridLanguageGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleHybridSpecification
entryRuleHybridSpecification 
:
{ before(grammarAccess.getHybridSpecificationRule()); }
	 ruleHybridSpecification
{ after(grammarAccess.getHybridSpecificationRule()); } 
	 EOF 
;

// Rule HybridSpecification
ruleHybridSpecification
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getHybridSpecificationAccess().getGroup()); }
(rule__HybridSpecification__Group__0)
{ after(grammarAccess.getHybridSpecificationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTypeDefinition
entryRuleTypeDefinition 
:
{ before(grammarAccess.getTypeDefinitionRule()); }
	 ruleTypeDefinition
{ after(grammarAccess.getTypeDefinitionRule()); } 
	 EOF 
;

// Rule TypeDefinition
ruleTypeDefinition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeDefinitionAccess().getAlternatives()); }
(rule__TypeDefinition__Alternatives)
{ after(grammarAccess.getTypeDefinitionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleClockTypeDefinition
entryRuleClockTypeDefinition 
:
{ before(grammarAccess.getClockTypeDefinitionRule()); }
	 ruleClockTypeDefinition
{ after(grammarAccess.getClockTypeDefinitionRule()); } 
	 EOF 
;

// Rule ClockTypeDefinition
ruleClockTypeDefinition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getClockTypeDefinitionAccess().getGroup()); }
(rule__ClockTypeDefinition__Group__0)
{ after(grammarAccess.getClockTypeDefinitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression 
:
{ before(grammarAccess.getPrimaryExpressionRule()); }
	 rulePrimaryExpression
{ after(grammarAccess.getPrimaryExpressionRule()); } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
(rule__PrimaryExpression__Alternatives)
{ after(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLocationReferenceExpression
entryRuleLocationReferenceExpression 
:
{ before(grammarAccess.getLocationReferenceExpressionRule()); }
	 ruleLocationReferenceExpression
{ after(grammarAccess.getLocationReferenceExpressionRule()); } 
	 EOF 
;

// Rule LocationReferenceExpression
ruleLocationReferenceExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLocationReferenceExpressionAccess().getGroup()); }
(rule__LocationReferenceExpression__Group__0)
{ after(grammarAccess.getLocationReferenceExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSignumExpression
entryRuleSignumExpression 
:
{ before(grammarAccess.getSignumExpressionRule()); }
	 ruleSignumExpression
{ after(grammarAccess.getSignumExpressionRule()); } 
	 EOF 
;

// Rule SignumExpression
ruleSignumExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSignumExpressionAccess().getAlternatives()); }
(rule__SignumExpression__Alternatives)
{ after(grammarAccess.getSignumExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleHybridAutomatonDeclaration
entryRuleHybridAutomatonDeclaration 
:
{ before(grammarAccess.getHybridAutomatonDeclarationRule()); }
	 ruleHybridAutomatonDeclaration
{ after(grammarAccess.getHybridAutomatonDeclarationRule()); } 
	 EOF 
;

// Rule HybridAutomatonDeclaration
ruleHybridAutomatonDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getHybridAutomatonDeclarationAccess().getGroup()); }
(rule__HybridAutomatonDeclaration__Group__0)
{ after(grammarAccess.getHybridAutomatonDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleHybridAutomaton
entryRuleHybridAutomaton 
:
{ before(grammarAccess.getHybridAutomatonRule()); }
	 ruleHybridAutomaton
{ after(grammarAccess.getHybridAutomatonRule()); } 
	 EOF 
;

// Rule HybridAutomaton
ruleHybridAutomaton
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getHybridAutomatonAccess().getHybridAutomatonDefinitionParserRuleCall()); }
	ruleHybridAutomatonDefinition
{ after(grammarAccess.getHybridAutomatonAccess().getHybridAutomatonDefinitionParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleHybridAutomatonDefinition
entryRuleHybridAutomatonDefinition 
:
{ before(grammarAccess.getHybridAutomatonDefinitionRule()); }
	 ruleHybridAutomatonDefinition
{ after(grammarAccess.getHybridAutomatonDefinitionRule()); } 
	 EOF 
;

// Rule HybridAutomatonDefinition
ruleHybridAutomatonDefinition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getHybridAutomatonDefinitionAccess().getGroup()); }
(rule__HybridAutomatonDefinition__Group__0)
{ after(grammarAccess.getHybridAutomatonDefinitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariableDeclaration
entryRuleVariableDeclaration 
:
{ before(grammarAccess.getVariableDeclarationRule()); }
	 ruleVariableDeclaration
{ after(grammarAccess.getVariableDeclarationRule()); } 
	 EOF 
;

// Rule VariableDeclaration
ruleVariableDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariableDeclarationAccess().getAlternatives()); }
(rule__VariableDeclaration__Alternatives)
{ after(grammarAccess.getVariableDeclarationAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGlobalVariableDeclaration
entryRuleGlobalVariableDeclaration 
:
{ before(grammarAccess.getGlobalVariableDeclarationRule()); }
	 ruleGlobalVariableDeclaration
{ after(grammarAccess.getGlobalVariableDeclarationRule()); } 
	 EOF 
;

// Rule GlobalVariableDeclaration
ruleGlobalVariableDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGlobalVariableDeclarationAccess().getGroup()); }
(rule__GlobalVariableDeclaration__Group__0)
{ after(grammarAccess.getGlobalVariableDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLocalVariableDeclaration
entryRuleLocalVariableDeclaration 
:
{ before(grammarAccess.getLocalVariableDeclarationRule()); }
	 ruleLocalVariableDeclaration
{ after(grammarAccess.getLocalVariableDeclarationRule()); } 
	 EOF 
;

// Rule LocalVariableDeclaration
ruleLocalVariableDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLocalVariableDeclarationAccess().getGroup()); }
(rule__LocalVariableDeclaration__Group__0)
{ after(grammarAccess.getLocalVariableDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLocation
entryRuleLocation 
:
{ before(grammarAccess.getLocationRule()); }
	 ruleLocation
{ after(grammarAccess.getLocationRule()); } 
	 EOF 
;

// Rule Location
ruleLocation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLocationAccess().getGroup()); }
(rule__Location__Group__0)
{ after(grammarAccess.getLocationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTransition
entryRuleTransition 
:
{ before(grammarAccess.getTransitionRule()); }
	 ruleTransition
{ after(grammarAccess.getTransitionRule()); } 
	 EOF 
;

// Rule Transition
ruleTransition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTransitionAccess().getGroup()); }
(rule__Transition__Group__0)
{ after(grammarAccess.getTransitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAssignment
entryRuleAssignment 
:
{ before(grammarAccess.getAssignmentRule()); }
	 ruleAssignment
{ after(grammarAccess.getAssignmentRule()); } 
	 EOF 
;

// Rule Assignment
ruleAssignment
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAssignmentAccess().getGroup()); }
(rule__Assignment__Group__0)
{ after(grammarAccess.getAssignmentAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCondition
entryRuleCondition 
:
{ before(grammarAccess.getConditionRule()); }
	 ruleCondition
{ after(grammarAccess.getConditionRule()); } 
	 EOF 
;

// Rule Condition
ruleCondition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConditionAccess().getAlternatives()); }
(rule__Condition__Alternatives)
{ after(grammarAccess.getConditionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInitialCondition
entryRuleInitialCondition 
:
{ before(grammarAccess.getInitialConditionRule()); }
	 ruleInitialCondition
{ after(grammarAccess.getInitialConditionRule()); } 
	 EOF 
;

// Rule InitialCondition
ruleInitialCondition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInitialConditionAccess().getGroup()); }
(rule__InitialCondition__Group__0)
{ after(grammarAccess.getInitialConditionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInvariantCondition
entryRuleInvariantCondition 
:
{ before(grammarAccess.getInvariantConditionRule()); }
	 ruleInvariantCondition
{ after(grammarAccess.getInvariantConditionRule()); } 
	 EOF 
;

// Rule InvariantCondition
ruleInvariantCondition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInvariantConditionAccess().getGroup()); }
(rule__InvariantCondition__Group__0)
{ after(grammarAccess.getInvariantConditionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFlowCondition
entryRuleFlowCondition 
:
{ before(grammarAccess.getFlowConditionRule()); }
	 ruleFlowCondition
{ after(grammarAccess.getFlowConditionRule()); } 
	 EOF 
;

// Rule FlowCondition
ruleFlowCondition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFlowConditionAccess().getGroup()); }
(rule__FlowCondition__Group__0)
{ after(grammarAccess.getFlowConditionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePropertyDeclaration
entryRulePropertyDeclaration 
:
{ before(grammarAccess.getPropertyDeclarationRule()); }
	 rulePropertyDeclaration
{ after(grammarAccess.getPropertyDeclarationRule()); } 
	 EOF 
;

// Rule PropertyDeclaration
rulePropertyDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPropertyDeclarationAccess().getGroup()); }
(rule__PropertyDeclaration__Group__0)
{ after(grammarAccess.getPropertyDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleParameterDeclaration
entryRuleParameterDeclaration 
:
{ before(grammarAccess.getParameterDeclarationRule()); }
	 ruleParameterDeclaration
{ after(grammarAccess.getParameterDeclarationRule()); } 
	 EOF 
;

// Rule ParameterDeclaration
ruleParameterDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParameterDeclarationAccess().getGroup()); }
(rule__ParameterDeclaration__Group__0)
{ after(grammarAccess.getParameterDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFieldDeclaration
entryRuleFieldDeclaration 
:
{ before(grammarAccess.getFieldDeclarationRule()); }
	 ruleFieldDeclaration
{ after(grammarAccess.getFieldDeclarationRule()); } 
	 EOF 
;

// Rule FieldDeclaration
ruleFieldDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFieldDeclarationAccess().getGroup()); }
(rule__FieldDeclaration__Group__0)
{ after(grammarAccess.getFieldDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLetDeclaration
entryRuleLetDeclaration 
:
{ before(grammarAccess.getLetDeclarationRule()); }
	 ruleLetDeclaration
{ after(grammarAccess.getLetDeclarationRule()); } 
	 EOF 
;

// Rule LetDeclaration
ruleLetDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLetDeclarationAccess().getGroup()); }
(rule__LetDeclaration__Group__0)
{ after(grammarAccess.getLetDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConstantDeclaration
entryRuleConstantDeclaration 
:
{ before(grammarAccess.getConstantDeclarationRule()); }
	 ruleConstantDeclaration
{ after(grammarAccess.getConstantDeclarationRule()); } 
	 EOF 
;

// Rule ConstantDeclaration
ruleConstantDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConstantDeclarationAccess().getGroup()); }
(rule__ConstantDeclaration__Group__0)
{ after(grammarAccess.getConstantDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunctionDeclaration
entryRuleFunctionDeclaration 
:
{ before(grammarAccess.getFunctionDeclarationRule()); }
	 ruleFunctionDeclaration
{ after(grammarAccess.getFunctionDeclarationRule()); } 
	 EOF 
;

// Rule FunctionDeclaration
ruleFunctionDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getGroup()); }
(rule__FunctionDeclaration__Group__0)
{ after(grammarAccess.getFunctionDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleType
entryRuleType 
:
{ before(grammarAccess.getTypeRule()); }
	 ruleType
{ after(grammarAccess.getTypeRule()); } 
	 EOF 
;

// Rule Type
ruleType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeAccess().getAlternatives()); }
(rule__Type__Alternatives)
{ after(grammarAccess.getTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTypeDeclaration
entryRuleTypeDeclaration 
:
{ before(grammarAccess.getTypeDeclarationRule()); }
	 ruleTypeDeclaration
{ after(grammarAccess.getTypeDeclarationRule()); } 
	 EOF 
;

// Rule TypeDeclaration
ruleTypeDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeDeclarationAccess().getGroup()); }
(rule__TypeDeclaration__Group__0)
{ after(grammarAccess.getTypeDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTypeReference
entryRuleTypeReference 
:
{ before(grammarAccess.getTypeReferenceRule()); }
	 ruleTypeReference
{ after(grammarAccess.getTypeReferenceRule()); } 
	 EOF 
;

// Rule TypeReference
ruleTypeReference
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeReferenceAccess().getReferenceAssignment()); }
(rule__TypeReference__ReferenceAssignment)
{ after(grammarAccess.getTypeReferenceAccess().getReferenceAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNaturalTypeDefinition
entryRuleNaturalTypeDefinition 
:
{ before(grammarAccess.getNaturalTypeDefinitionRule()); }
	 ruleNaturalTypeDefinition
{ after(grammarAccess.getNaturalTypeDefinitionRule()); } 
	 EOF 
;

// Rule NaturalTypeDefinition
ruleNaturalTypeDefinition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNaturalTypeDefinitionAccess().getGroup()); }
(rule__NaturalTypeDefinition__Group__0)
{ after(grammarAccess.getNaturalTypeDefinitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIntegerTypeDefinition
entryRuleIntegerTypeDefinition 
:
{ before(grammarAccess.getIntegerTypeDefinitionRule()); }
	 ruleIntegerTypeDefinition
{ after(grammarAccess.getIntegerTypeDefinitionRule()); } 
	 EOF 
;

// Rule IntegerTypeDefinition
ruleIntegerTypeDefinition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIntegerTypeDefinitionAccess().getGroup()); }
(rule__IntegerTypeDefinition__Group__0)
{ after(grammarAccess.getIntegerTypeDefinitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBooleanTypeDefinition
entryRuleBooleanTypeDefinition 
:
{ before(grammarAccess.getBooleanTypeDefinitionRule()); }
	 ruleBooleanTypeDefinition
{ after(grammarAccess.getBooleanTypeDefinitionRule()); } 
	 EOF 
;

// Rule BooleanTypeDefinition
ruleBooleanTypeDefinition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBooleanTypeDefinitionAccess().getGroup()); }
(rule__BooleanTypeDefinition__Group__0)
{ after(grammarAccess.getBooleanTypeDefinitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRealTypeDefinition
entryRuleRealTypeDefinition 
:
{ before(grammarAccess.getRealTypeDefinitionRule()); }
	 ruleRealTypeDefinition
{ after(grammarAccess.getRealTypeDefinitionRule()); } 
	 EOF 
;

// Rule RealTypeDefinition
ruleRealTypeDefinition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRealTypeDefinitionAccess().getGroup()); }
(rule__RealTypeDefinition__Group__0)
{ after(grammarAccess.getRealTypeDefinitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleArrayTypeDefinition
entryRuleArrayTypeDefinition 
:
{ before(grammarAccess.getArrayTypeDefinitionRule()); }
	 ruleArrayTypeDefinition
{ after(grammarAccess.getArrayTypeDefinitionRule()); } 
	 EOF 
;

// Rule ArrayTypeDefinition
ruleArrayTypeDefinition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getArrayTypeDefinitionAccess().getGroup()); }
(rule__ArrayTypeDefinition__Group__0)
{ after(grammarAccess.getArrayTypeDefinitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEnumerationTypeDefinition
entryRuleEnumerationTypeDefinition 
:
{ before(grammarAccess.getEnumerationTypeDefinitionRule()); }
	 ruleEnumerationTypeDefinition
{ after(grammarAccess.getEnumerationTypeDefinitionRule()); } 
	 EOF 
;

// Rule EnumerationTypeDefinition
ruleEnumerationTypeDefinition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEnumerationTypeDefinitionAccess().getGroup()); }
(rule__EnumerationTypeDefinition__Group__0)
{ after(grammarAccess.getEnumerationTypeDefinitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEnumerationLiteralDefinition
entryRuleEnumerationLiteralDefinition 
:
{ before(grammarAccess.getEnumerationLiteralDefinitionRule()); }
	 ruleEnumerationLiteralDefinition
{ after(grammarAccess.getEnumerationLiteralDefinitionRule()); } 
	 EOF 
;

// Rule EnumerationLiteralDefinition
ruleEnumerationLiteralDefinition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEnumerationLiteralDefinitionAccess().getNameAssignment()); }
(rule__EnumerationLiteralDefinition__NameAssignment)
{ after(grammarAccess.getEnumerationLiteralDefinitionAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRecordTypeDefinition
entryRuleRecordTypeDefinition 
:
{ before(grammarAccess.getRecordTypeDefinitionRule()); }
	 ruleRecordTypeDefinition
{ after(grammarAccess.getRecordTypeDefinitionRule()); } 
	 EOF 
;

// Rule RecordTypeDefinition
ruleRecordTypeDefinition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRecordTypeDefinitionAccess().getGroup()); }
(rule__RecordTypeDefinition__Group__0)
{ after(grammarAccess.getRecordTypeDefinitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTupleTypeDefinition
entryRuleTupleTypeDefinition 
:
{ before(grammarAccess.getTupleTypeDefinitionRule()); }
	 ruleTupleTypeDefinition
{ after(grammarAccess.getTupleTypeDefinitionRule()); } 
	 EOF 
;

// Rule TupleTypeDefinition
ruleTupleTypeDefinition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTupleTypeDefinitionAccess().getGroup()); }
(rule__TupleTypeDefinition__Group__0)
{ after(grammarAccess.getTupleTypeDefinitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSubrangeTypeDefinition
entryRuleSubrangeTypeDefinition 
:
{ before(grammarAccess.getSubrangeTypeDefinitionRule()); }
	 ruleSubrangeTypeDefinition
{ after(grammarAccess.getSubrangeTypeDefinitionRule()); } 
	 EOF 
;

// Rule SubrangeTypeDefinition
ruleSubrangeTypeDefinition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSubrangeTypeDefinitionAccess().getGroup()); }
(rule__SubrangeTypeDefinition__Group__0)
{ after(grammarAccess.getSubrangeTypeDefinitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSubTypeDefinition
entryRuleSubTypeDefinition 
:
{ before(grammarAccess.getSubTypeDefinitionRule()); }
	 ruleSubTypeDefinition
{ after(grammarAccess.getSubTypeDefinitionRule()); } 
	 EOF 
;

// Rule SubTypeDefinition
ruleSubTypeDefinition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSubTypeDefinitionAccess().getGroup()); }
(rule__SubTypeDefinition__Group__0)
{ after(grammarAccess.getSubTypeDefinitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunctionTypeDefinition
entryRuleFunctionTypeDefinition 
:
{ before(grammarAccess.getFunctionTypeDefinitionRule()); }
	 ruleFunctionTypeDefinition
{ after(grammarAccess.getFunctionTypeDefinitionRule()); } 
	 EOF 
;

// Rule FunctionTypeDefinition
ruleFunctionTypeDefinition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunctionTypeDefinitionAccess().getGroup()); }
(rule__FunctionTypeDefinition__Group__0)
{ after(grammarAccess.getFunctionTypeDefinitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpression
entryRuleExpression 
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionAccess().getIfThenElseExpressionParserRuleCall()); }
	ruleIfThenElseExpression
{ after(grammarAccess.getExpressionAccess().getIfThenElseExpressionParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIfThenElseExpression
entryRuleIfThenElseExpression 
:
{ before(grammarAccess.getIfThenElseExpressionRule()); }
	 ruleIfThenElseExpression
{ after(grammarAccess.getIfThenElseExpressionRule()); } 
	 EOF 
;

// Rule IfThenElseExpression
ruleIfThenElseExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIfThenElseExpressionAccess().getAlternatives()); }
(rule__IfThenElseExpression__Alternatives)
{ after(grammarAccess.getIfThenElseExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEqualExpression
entryRuleEqualExpression 
:
{ before(grammarAccess.getEqualExpressionRule()); }
	 ruleEqualExpression
{ after(grammarAccess.getEqualExpressionRule()); } 
	 EOF 
;

// Rule EqualExpression
ruleEqualExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEqualExpressionAccess().getGroup()); }
(rule__EqualExpression__Group__0)
{ after(grammarAccess.getEqualExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleImplyExpression
entryRuleImplyExpression 
:
{ before(grammarAccess.getImplyExpressionRule()); }
	 ruleImplyExpression
{ after(grammarAccess.getImplyExpressionRule()); } 
	 EOF 
;

// Rule ImplyExpression
ruleImplyExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getImplyExpressionAccess().getGroup()); }
(rule__ImplyExpression__Group__0)
{ after(grammarAccess.getImplyExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOrExpression
entryRuleOrExpression 
:
{ before(grammarAccess.getOrExpressionRule()); }
	 ruleOrExpression
{ after(grammarAccess.getOrExpressionRule()); } 
	 EOF 
;

// Rule OrExpression
ruleOrExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOrExpressionAccess().getGroup()); }
(rule__OrExpression__Group__0)
{ after(grammarAccess.getOrExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAndExpression
entryRuleAndExpression 
:
{ before(grammarAccess.getAndExpressionRule()); }
	 ruleAndExpression
{ after(grammarAccess.getAndExpressionRule()); } 
	 EOF 
;

// Rule AndExpression
ruleAndExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAndExpressionAccess().getGroup()); }
(rule__AndExpression__Group__0)
{ after(grammarAccess.getAndExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleReleaseExpression
entryRuleReleaseExpression 
:
{ before(grammarAccess.getReleaseExpressionRule()); }
	 ruleReleaseExpression
{ after(grammarAccess.getReleaseExpressionRule()); } 
	 EOF 
;

// Rule ReleaseExpression
ruleReleaseExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getReleaseExpressionAccess().getGroup()); }
(rule__ReleaseExpression__Group__0)
{ after(grammarAccess.getReleaseExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUntilExpression
entryRuleUntilExpression 
:
{ before(grammarAccess.getUntilExpressionRule()); }
	 ruleUntilExpression
{ after(grammarAccess.getUntilExpressionRule()); } 
	 EOF 
;

// Rule UntilExpression
ruleUntilExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUntilExpressionAccess().getGroup()); }
(rule__UntilExpression__Group__0)
{ after(grammarAccess.getUntilExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnaryLogicExpression
entryRuleUnaryLogicExpression 
:
{ before(grammarAccess.getUnaryLogicExpressionRule()); }
	 ruleUnaryLogicExpression
{ after(grammarAccess.getUnaryLogicExpressionRule()); } 
	 EOF 
;

// Rule UnaryLogicExpression
ruleUnaryLogicExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnaryLogicExpressionAccess().getAlternatives()); }
(rule__UnaryLogicExpression__Alternatives)
{ after(grammarAccess.getUnaryLogicExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNotExpression
entryRuleNotExpression 
:
{ before(grammarAccess.getNotExpressionRule()); }
	 ruleNotExpression
{ after(grammarAccess.getNotExpressionRule()); } 
	 EOF 
;

// Rule NotExpression
ruleNotExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNotExpressionAccess().getGroup()); }
(rule__NotExpression__Group__0)
{ after(grammarAccess.getNotExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleForallExpression
entryRuleForallExpression 
:
{ before(grammarAccess.getForallExpressionRule()); }
	 ruleForallExpression
{ after(grammarAccess.getForallExpressionRule()); } 
	 EOF 
;

// Rule ForallExpression
ruleForallExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getForallExpressionAccess().getGroup()); }
(rule__ForallExpression__Group__0)
{ after(grammarAccess.getForallExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExistsExpression
entryRuleExistsExpression 
:
{ before(grammarAccess.getExistsExpressionRule()); }
	 ruleExistsExpression
{ after(grammarAccess.getExistsExpressionRule()); } 
	 EOF 
;

// Rule ExistsExpression
ruleExistsExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExistsExpressionAccess().getGroup()); }
(rule__ExistsExpression__Group__0)
{ after(grammarAccess.getExistsExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunctionLiteralExpression
entryRuleFunctionLiteralExpression 
:
{ before(grammarAccess.getFunctionLiteralExpressionRule()); }
	 ruleFunctionLiteralExpression
{ after(grammarAccess.getFunctionLiteralExpressionRule()); } 
	 EOF 
;

// Rule FunctionLiteralExpression
ruleFunctionLiteralExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunctionLiteralExpressionAccess().getGroup()); }
(rule__FunctionLiteralExpression__Group__0)
{ after(grammarAccess.getFunctionLiteralExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGloballyExpression
entryRuleGloballyExpression 
:
{ before(grammarAccess.getGloballyExpressionRule()); }
	 ruleGloballyExpression
{ after(grammarAccess.getGloballyExpressionRule()); } 
	 EOF 
;

// Rule GloballyExpression
ruleGloballyExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGloballyExpressionAccess().getGroup()); }
(rule__GloballyExpression__Group__0)
{ after(grammarAccess.getGloballyExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFinallyExpression
entryRuleFinallyExpression 
:
{ before(grammarAccess.getFinallyExpressionRule()); }
	 ruleFinallyExpression
{ after(grammarAccess.getFinallyExpressionRule()); } 
	 EOF 
;

// Rule FinallyExpression
ruleFinallyExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFinallyExpressionAccess().getGroup()); }
(rule__FinallyExpression__Group__0)
{ after(grammarAccess.getFinallyExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNextExpression
entryRuleNextExpression 
:
{ before(grammarAccess.getNextExpressionRule()); }
	 ruleNextExpression
{ after(grammarAccess.getNextExpressionRule()); } 
	 EOF 
;

// Rule NextExpression
ruleNextExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNextExpressionAccess().getGroup()); }
(rule__NextExpression__Group__0)
{ after(grammarAccess.getNextExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTemporalForallExpression
entryRuleTemporalForallExpression 
:
{ before(grammarAccess.getTemporalForallExpressionRule()); }
	 ruleTemporalForallExpression
{ after(grammarAccess.getTemporalForallExpressionRule()); } 
	 EOF 
;

// Rule TemporalForallExpression
ruleTemporalForallExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTemporalForallExpressionAccess().getGroup()); }
(rule__TemporalForallExpression__Group__0)
{ after(grammarAccess.getTemporalForallExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTemporalExistsExpression
entryRuleTemporalExistsExpression 
:
{ before(grammarAccess.getTemporalExistsExpressionRule()); }
	 ruleTemporalExistsExpression
{ after(grammarAccess.getTemporalExistsExpressionRule()); } 
	 EOF 
;

// Rule TemporalExistsExpression
ruleTemporalExistsExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTemporalExistsExpressionAccess().getGroup()); }
(rule__TemporalExistsExpression__Group__0)
{ after(grammarAccess.getTemporalExistsExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLetExpression
entryRuleLetExpression 
:
{ before(grammarAccess.getLetExpressionRule()); }
	 ruleLetExpression
{ after(grammarAccess.getLetExpressionRule()); } 
	 EOF 
;

// Rule LetExpression
ruleLetExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLetExpressionAccess().getGroup()); }
(rule__LetExpression__Group__0)
{ after(grammarAccess.getLetExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInExpression
entryRuleInExpression 
:
{ before(grammarAccess.getInExpressionRule()); }
	 ruleInExpression
{ after(grammarAccess.getInExpressionRule()); } 
	 EOF 
;

// Rule InExpression
ruleInExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInExpressionAccess().getGroup()); }
(rule__InExpression__Group__0)
{ after(grammarAccess.getInExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEquivalenceExpression
entryRuleEquivalenceExpression 
:
{ before(grammarAccess.getEquivalenceExpressionRule()); }
	 ruleEquivalenceExpression
{ after(grammarAccess.getEquivalenceExpressionRule()); } 
	 EOF 
;

// Rule EquivalenceExpression
ruleEquivalenceExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEquivalenceExpressionAccess().getGroup()); }
(rule__EquivalenceExpression__Group__0)
{ after(grammarAccess.getEquivalenceExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleComparisionExpression
entryRuleComparisionExpression 
:
{ before(grammarAccess.getComparisionExpressionRule()); }
	 ruleComparisionExpression
{ after(grammarAccess.getComparisionExpressionRule()); } 
	 EOF 
;

// Rule ComparisionExpression
ruleComparisionExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getComparisionExpressionAccess().getGroup()); }
(rule__ComparisionExpression__Group__0)
{ after(grammarAccess.getComparisionExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAdditiveExpression
entryRuleAdditiveExpression 
:
{ before(grammarAccess.getAdditiveExpressionRule()); }
	 ruleAdditiveExpression
{ after(grammarAccess.getAdditiveExpressionRule()); } 
	 EOF 
;

// Rule AdditiveExpression
ruleAdditiveExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getGroup()); }
(rule__AdditiveExpression__Group__0)
{ after(grammarAccess.getAdditiveExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMultiplicativeExpression
entryRuleMultiplicativeExpression 
:
{ before(grammarAccess.getMultiplicativeExpressionRule()); }
	 ruleMultiplicativeExpression
{ after(grammarAccess.getMultiplicativeExpressionRule()); } 
	 EOF 
;

// Rule MultiplicativeExpression
ruleMultiplicativeExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getGroup()); }
(rule__MultiplicativeExpression__Group__0)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAccessExpression
entryRuleAccessExpression 
:
{ before(grammarAccess.getAccessExpressionRule()); }
	 ruleAccessExpression
{ after(grammarAccess.getAccessExpressionRule()); } 
	 EOF 
;

// Rule AccessExpression
ruleAccessExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAccessExpressionAccess().getGroup()); }
(rule__AccessExpression__Group__0)
{ after(grammarAccess.getAccessExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleReferenceExpression
entryRuleReferenceExpression 
:
{ before(grammarAccess.getReferenceExpressionRule()); }
	 ruleReferenceExpression
{ after(grammarAccess.getReferenceExpressionRule()); } 
	 EOF 
;

// Rule ReferenceExpression
ruleReferenceExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getReferenceExpressionAccess().getDeclarationAssignment()); }
(rule__ReferenceExpression__DeclarationAssignment)
{ after(grammarAccess.getReferenceExpressionAccess().getDeclarationAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLiteralExpression
entryRuleLiteralExpression 
:
{ before(grammarAccess.getLiteralExpressionRule()); }
	 ruleLiteralExpression
{ after(grammarAccess.getLiteralExpressionRule()); } 
	 EOF 
;

// Rule LiteralExpression
ruleLiteralExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLiteralExpressionAccess().getAlternatives()); }
(rule__LiteralExpression__Alternatives)
{ after(grammarAccess.getLiteralExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIntegerLiteralExpression
entryRuleIntegerLiteralExpression 
:
{ before(grammarAccess.getIntegerLiteralExpressionRule()); }
	 ruleIntegerLiteralExpression
{ after(grammarAccess.getIntegerLiteralExpressionRule()); } 
	 EOF 
;

// Rule IntegerLiteralExpression
ruleIntegerLiteralExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIntegerLiteralExpressionAccess().getValueAssignment()); }
(rule__IntegerLiteralExpression__ValueAssignment)
{ after(grammarAccess.getIntegerLiteralExpressionAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDecimalLiteralExpression
entryRuleDecimalLiteralExpression 
:
{ before(grammarAccess.getDecimalLiteralExpressionRule()); }
	 ruleDecimalLiteralExpression
{ after(grammarAccess.getDecimalLiteralExpressionRule()); } 
	 EOF 
;

// Rule DecimalLiteralExpression
ruleDecimalLiteralExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDecimalLiteralExpressionAccess().getValueAssignment()); }
(rule__DecimalLiteralExpression__ValueAssignment)
{ after(grammarAccess.getDecimalLiteralExpressionAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRationalLiteralExpression
entryRuleRationalLiteralExpression 
:
{ before(grammarAccess.getRationalLiteralExpressionRule()); }
	 ruleRationalLiteralExpression
{ after(grammarAccess.getRationalLiteralExpressionRule()); } 
	 EOF 
;

// Rule RationalLiteralExpression
ruleRationalLiteralExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRationalLiteralExpressionAccess().getGroup()); }
(rule__RationalLiteralExpression__Group__0)
{ after(grammarAccess.getRationalLiteralExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBooleanLiteralExpression
entryRuleBooleanLiteralExpression 
:
{ before(grammarAccess.getBooleanLiteralExpressionRule()); }
	 ruleBooleanLiteralExpression
{ after(grammarAccess.getBooleanLiteralExpressionRule()); } 
	 EOF 
;

// Rule BooleanLiteralExpression
ruleBooleanLiteralExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBooleanLiteralExpressionAccess().getAlternatives()); }
(rule__BooleanLiteralExpression__Alternatives)
{ after(grammarAccess.getBooleanLiteralExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTrueExpression
entryRuleTrueExpression 
:
{ before(grammarAccess.getTrueExpressionRule()); }
	 ruleTrueExpression
{ after(grammarAccess.getTrueExpressionRule()); } 
	 EOF 
;

// Rule TrueExpression
ruleTrueExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTrueExpressionAccess().getGroup()); }
(rule__TrueExpression__Group__0)
{ after(grammarAccess.getTrueExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFalseExpression
entryRuleFalseExpression 
:
{ before(grammarAccess.getFalseExpressionRule()); }
	 ruleFalseExpression
{ after(grammarAccess.getFalseExpressionRule()); } 
	 EOF 
;

// Rule FalseExpression
ruleFalseExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFalseExpressionAccess().getGroup()); }
(rule__FalseExpression__Group__0)
{ after(grammarAccess.getFalseExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleArrayLiteralExpression
entryRuleArrayLiteralExpression 
:
{ before(grammarAccess.getArrayLiteralExpressionRule()); }
	 ruleArrayLiteralExpression
{ after(grammarAccess.getArrayLiteralExpressionRule()); } 
	 EOF 
;

// Rule ArrayLiteralExpression
ruleArrayLiteralExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getArrayLiteralExpressionAccess().getGroup()); }
(rule__ArrayLiteralExpression__Group__0)
{ after(grammarAccess.getArrayLiteralExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRecordLiteralExpression
entryRuleRecordLiteralExpression 
:
{ before(grammarAccess.getRecordLiteralExpressionRule()); }
	 ruleRecordLiteralExpression
{ after(grammarAccess.getRecordLiteralExpressionRule()); } 
	 EOF 
;

// Rule RecordLiteralExpression
ruleRecordLiteralExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRecordLiteralExpressionAccess().getGroup()); }
(rule__RecordLiteralExpression__Group__0)
{ after(grammarAccess.getRecordLiteralExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFieldAssignment
entryRuleFieldAssignment 
:
{ before(grammarAccess.getFieldAssignmentRule()); }
	 ruleFieldAssignment
{ after(grammarAccess.getFieldAssignmentRule()); } 
	 EOF 
;

// Rule FieldAssignment
ruleFieldAssignment
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFieldAssignmentAccess().getGroup()); }
(rule__FieldAssignment__Group__0)
{ after(grammarAccess.getFieldAssignmentAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTupleLiteralExpression
entryRuleTupleLiteralExpression 
:
{ before(grammarAccess.getTupleLiteralExpressionRule()); }
	 ruleTupleLiteralExpression
{ after(grammarAccess.getTupleLiteralExpressionRule()); } 
	 EOF 
;

// Rule TupleLiteralExpression
ruleTupleLiteralExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTupleLiteralExpressionAccess().getGroup()); }
(rule__TupleLiteralExpression__Group__0)
{ after(grammarAccess.getTupleLiteralExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEnumerationLiteralExpression
entryRuleEnumerationLiteralExpression 
:
{ before(grammarAccess.getEnumerationLiteralExpressionRule()); }
	 ruleEnumerationLiteralExpression
{ after(grammarAccess.getEnumerationLiteralExpressionRule()); } 
	 EOF 
;

// Rule EnumerationLiteralExpression
ruleEnumerationLiteralExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEnumerationLiteralExpressionAccess().getGroup()); }
(rule__EnumerationLiteralExpression__Group__0)
{ after(grammarAccess.getEnumerationLiteralExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBasicConstraintDefinition
entryRuleBasicConstraintDefinition 
:
{ before(grammarAccess.getBasicConstraintDefinitionRule()); }
	 ruleBasicConstraintDefinition
{ after(grammarAccess.getBasicConstraintDefinitionRule()); } 
	 EOF 
;

// Rule BasicConstraintDefinition
ruleBasicConstraintDefinition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBasicConstraintDefinitionAccess().getGroup()); }
(rule__BasicConstraintDefinition__Group__0)
{ after(grammarAccess.getBasicConstraintDefinitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__HybridSpecification__Alternatives_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHybridSpecificationAccess().getTypeDeclarationsAssignment_4_0()); }
(rule__HybridSpecification__TypeDeclarationsAssignment_4_0)
{ after(grammarAccess.getHybridSpecificationAccess().getTypeDeclarationsAssignment_4_0()); }
)

    |(
{ before(grammarAccess.getHybridSpecificationAccess().getFunctionDeclarationsAssignment_4_1()); }
(rule__HybridSpecification__FunctionDeclarationsAssignment_4_1)
{ after(grammarAccess.getHybridSpecificationAccess().getFunctionDeclarationsAssignment_4_1()); }
)

    |(
{ before(grammarAccess.getHybridSpecificationAccess().getConstantDeclarationsAssignment_4_2()); }
(rule__HybridSpecification__ConstantDeclarationsAssignment_4_2)
{ after(grammarAccess.getHybridSpecificationAccess().getConstantDeclarationsAssignment_4_2()); }
)

    |(
{ before(grammarAccess.getHybridSpecificationAccess().getBasicConstraintDefinitionsAssignment_4_3()); }
(rule__HybridSpecification__BasicConstraintDefinitionsAssignment_4_3)
{ after(grammarAccess.getHybridSpecificationAccess().getBasicConstraintDefinitionsAssignment_4_3()); }
)

    |(
{ before(grammarAccess.getHybridSpecificationAccess().getHybridAutomatonDeclarationsAssignment_4_4()); }
(rule__HybridSpecification__HybridAutomatonDeclarationsAssignment_4_4)
{ after(grammarAccess.getHybridSpecificationAccess().getHybridAutomatonDeclarationsAssignment_4_4()); }
)

    |(
{ before(grammarAccess.getHybridSpecificationAccess().getPropertyDeclarationsAssignment_4_5()); }
(rule__HybridSpecification__PropertyDeclarationsAssignment_4_5)
{ after(grammarAccess.getHybridSpecificationAccess().getPropertyDeclarationsAssignment_4_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDefinition__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDefinitionAccess().getNaturalTypeDefinitionParserRuleCall_0()); }
	ruleNaturalTypeDefinition
{ after(grammarAccess.getTypeDefinitionAccess().getNaturalTypeDefinitionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getTypeDefinitionAccess().getIntegerTypeDefinitionParserRuleCall_1()); }
	ruleIntegerTypeDefinition
{ after(grammarAccess.getTypeDefinitionAccess().getIntegerTypeDefinitionParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getTypeDefinitionAccess().getBooleanTypeDefinitionParserRuleCall_2()); }
	ruleBooleanTypeDefinition
{ after(grammarAccess.getTypeDefinitionAccess().getBooleanTypeDefinitionParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getTypeDefinitionAccess().getRealTypeDefinitionParserRuleCall_3()); }
	ruleRealTypeDefinition
{ after(grammarAccess.getTypeDefinitionAccess().getRealTypeDefinitionParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getTypeDefinitionAccess().getArrayTypeDefinitionParserRuleCall_4()); }
	ruleArrayTypeDefinition
{ after(grammarAccess.getTypeDefinitionAccess().getArrayTypeDefinitionParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getTypeDefinitionAccess().getEnumerationTypeDefinitionParserRuleCall_5()); }
	ruleEnumerationTypeDefinition
{ after(grammarAccess.getTypeDefinitionAccess().getEnumerationTypeDefinitionParserRuleCall_5()); }
)

    |(
{ before(grammarAccess.getTypeDefinitionAccess().getRecordTypeDefinitionParserRuleCall_6()); }
	ruleRecordTypeDefinition
{ after(grammarAccess.getTypeDefinitionAccess().getRecordTypeDefinitionParserRuleCall_6()); }
)

    |(
{ before(grammarAccess.getTypeDefinitionAccess().getTupleTypeDefinitionParserRuleCall_7()); }
	ruleTupleTypeDefinition
{ after(grammarAccess.getTypeDefinitionAccess().getTupleTypeDefinitionParserRuleCall_7()); }
)

    |(
{ before(grammarAccess.getTypeDefinitionAccess().getSubrangeTypeDefinitionParserRuleCall_8()); }
	ruleSubrangeTypeDefinition
{ after(grammarAccess.getTypeDefinitionAccess().getSubrangeTypeDefinitionParserRuleCall_8()); }
)

    |(
{ before(grammarAccess.getTypeDefinitionAccess().getSubTypeDefinitionParserRuleCall_9()); }
	ruleSubTypeDefinition
{ after(grammarAccess.getTypeDefinitionAccess().getSubTypeDefinitionParserRuleCall_9()); }
)

    |(
{ before(grammarAccess.getTypeDefinitionAccess().getFunctionTypeDefinitionParserRuleCall_10()); }
	ruleFunctionTypeDefinition
{ after(grammarAccess.getTypeDefinitionAccess().getFunctionTypeDefinitionParserRuleCall_10()); }
)

    |(
{ before(grammarAccess.getTypeDefinitionAccess().getClockTypeDefinitionParserRuleCall_11()); }
	ruleClockTypeDefinition
{ after(grammarAccess.getTypeDefinitionAccess().getClockTypeDefinitionParserRuleCall_11()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getLiteralExpressionParserRuleCall_0()); }
	ruleLiteralExpression
{ after(grammarAccess.getPrimaryExpressionAccess().getLiteralExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getReferenceExpressionParserRuleCall_1()); }
	ruleReferenceExpression
{ after(grammarAccess.getPrimaryExpressionAccess().getReferenceExpressionParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getLocationReferenceExpressionParserRuleCall_2()); }
	ruleLocationReferenceExpression
{ after(grammarAccess.getPrimaryExpressionAccess().getLocationReferenceExpressionParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getGroup_3()); }
(rule__PrimaryExpression__Group_3__0)
{ after(grammarAccess.getPrimaryExpressionAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SignumExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignumExpressionAccess().getGroup_0()); }
(rule__SignumExpression__Group_0__0)
{ after(grammarAccess.getSignumExpressionAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getSignumExpressionAccess().getGroup_1()); }
(rule__SignumExpression__Group_1__0)
{ after(grammarAccess.getSignumExpressionAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getSignumExpressionAccess().getGroup_2()); }
(rule__SignumExpression__Group_2__0)
{ after(grammarAccess.getSignumExpressionAccess().getGroup_2()); }
)

    |(
{ before(grammarAccess.getSignumExpressionAccess().getAccessExpressionParserRuleCall_3()); }
	ruleAccessExpression
{ after(grammarAccess.getSignumExpressionAccess().getAccessExpressionParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__HybridAutomatonDefinition__Alternatives_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHybridAutomatonDefinitionAccess().getVariableDeclarationsAssignment_2_0()); }
(rule__HybridAutomatonDefinition__VariableDeclarationsAssignment_2_0)
{ after(grammarAccess.getHybridAutomatonDefinitionAccess().getVariableDeclarationsAssignment_2_0()); }
)

    |(
{ before(grammarAccess.getHybridAutomatonDefinitionAccess().getLocationsAssignment_2_1()); }
(rule__HybridAutomatonDefinition__LocationsAssignment_2_1)
{ after(grammarAccess.getHybridAutomatonDefinitionAccess().getLocationsAssignment_2_1()); }
)

    |(
{ before(grammarAccess.getHybridAutomatonDefinitionAccess().getTransitionsAssignment_2_2()); }
(rule__HybridAutomatonDefinition__TransitionsAssignment_2_2)
{ after(grammarAccess.getHybridAutomatonDefinitionAccess().getTransitionsAssignment_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getGlobalVariableDeclarationParserRuleCall_0()); }
	ruleGlobalVariableDeclaration
{ after(grammarAccess.getVariableDeclarationAccess().getGlobalVariableDeclarationParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getVariableDeclarationAccess().getLocalVariableDeclarationParserRuleCall_1()); }
	ruleLocalVariableDeclaration
{ after(grammarAccess.getVariableDeclarationAccess().getLocalVariableDeclarationParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getInitialConditionParserRuleCall_0()); }
	ruleInitialCondition
{ after(grammarAccess.getConditionAccess().getInitialConditionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getConditionAccess().getInvariantConditionParserRuleCall_1()); }
	ruleInvariantCondition
{ after(grammarAccess.getConditionAccess().getInvariantConditionParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getConditionAccess().getFlowConditionParserRuleCall_2()); }
	ruleFlowCondition
{ after(grammarAccess.getConditionAccess().getFlowConditionParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Type__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getTypeReferenceParserRuleCall_0()); }
	ruleTypeReference
{ after(grammarAccess.getTypeAccess().getTypeReferenceParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getTypeDefinitionParserRuleCall_1()); }
	ruleTypeDefinition
{ after(grammarAccess.getTypeAccess().getTypeDefinitionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubrangeTypeDefinition__Alternatives_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubrangeTypeDefinitionAccess().getGroup_2_0()); }
(rule__SubrangeTypeDefinition__Group_2_0__0)
{ after(grammarAccess.getSubrangeTypeDefinitionAccess().getGroup_2_0()); }
)

    |(
{ before(grammarAccess.getSubrangeTypeDefinitionAccess().getLowerBoundAssignment_2_1()); }
(rule__SubrangeTypeDefinition__LowerBoundAssignment_2_1)
{ after(grammarAccess.getSubrangeTypeDefinitionAccess().getLowerBoundAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubrangeTypeDefinition__Alternatives_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubrangeTypeDefinitionAccess().getInfKeyword_4_0()); }

	'inf' 

{ after(grammarAccess.getSubrangeTypeDefinitionAccess().getInfKeyword_4_0()); }
)

    |(
{ before(grammarAccess.getSubrangeTypeDefinitionAccess().getUpperBoundAssignment_4_1()); }
(rule__SubrangeTypeDefinition__UpperBoundAssignment_4_1)
{ after(grammarAccess.getSubrangeTypeDefinitionAccess().getUpperBoundAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElseExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfThenElseExpressionAccess().getGroup_0()); }
(rule__IfThenElseExpression__Group_0__0)
{ after(grammarAccess.getIfThenElseExpressionAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getIfThenElseExpressionAccess().getEqualExpressionParserRuleCall_1()); }
	ruleEqualExpression
{ after(grammarAccess.getIfThenElseExpressionAccess().getEqualExpressionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryLogicExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryLogicExpressionAccess().getNotExpressionParserRuleCall_0()); }
	ruleNotExpression
{ after(grammarAccess.getUnaryLogicExpressionAccess().getNotExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getUnaryLogicExpressionAccess().getForallExpressionParserRuleCall_1()); }
	ruleForallExpression
{ after(grammarAccess.getUnaryLogicExpressionAccess().getForallExpressionParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getUnaryLogicExpressionAccess().getExistsExpressionParserRuleCall_2()); }
	ruleExistsExpression
{ after(grammarAccess.getUnaryLogicExpressionAccess().getExistsExpressionParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getUnaryLogicExpressionAccess().getFunctionLiteralExpressionParserRuleCall_3()); }
	ruleFunctionLiteralExpression
{ after(grammarAccess.getUnaryLogicExpressionAccess().getFunctionLiteralExpressionParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getUnaryLogicExpressionAccess().getGloballyExpressionParserRuleCall_4()); }
	ruleGloballyExpression
{ after(grammarAccess.getUnaryLogicExpressionAccess().getGloballyExpressionParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getUnaryLogicExpressionAccess().getFinallyExpressionParserRuleCall_5()); }
	ruleFinallyExpression
{ after(grammarAccess.getUnaryLogicExpressionAccess().getFinallyExpressionParserRuleCall_5()); }
)

    |(
{ before(grammarAccess.getUnaryLogicExpressionAccess().getNextExpressionParserRuleCall_6()); }
	ruleNextExpression
{ after(grammarAccess.getUnaryLogicExpressionAccess().getNextExpressionParserRuleCall_6()); }
)

    |(
{ before(grammarAccess.getUnaryLogicExpressionAccess().getTemporalForallExpressionParserRuleCall_7()); }
	ruleTemporalForallExpression
{ after(grammarAccess.getUnaryLogicExpressionAccess().getTemporalForallExpressionParserRuleCall_7()); }
)

    |(
{ before(grammarAccess.getUnaryLogicExpressionAccess().getTemporalExistsExpressionParserRuleCall_8()); }
	ruleTemporalExistsExpression
{ after(grammarAccess.getUnaryLogicExpressionAccess().getTemporalExistsExpressionParserRuleCall_8()); }
)

    |(
{ before(grammarAccess.getUnaryLogicExpressionAccess().getLetExpressionParserRuleCall_9()); }
	ruleLetExpression
{ after(grammarAccess.getUnaryLogicExpressionAccess().getLetExpressionParserRuleCall_9()); }
)

    |(
{ before(grammarAccess.getUnaryLogicExpressionAccess().getInExpressionParserRuleCall_10()); }
	ruleInExpression
{ after(grammarAccess.getUnaryLogicExpressionAccess().getInExpressionParserRuleCall_10()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EquivalenceExpression__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEquivalenceExpressionAccess().getGroup_1_0()); }
(rule__EquivalenceExpression__Group_1_0__0)
{ after(grammarAccess.getEquivalenceExpressionAccess().getGroup_1_0()); }
)

    |(
{ before(grammarAccess.getEquivalenceExpressionAccess().getGroup_1_1()); }
(rule__EquivalenceExpression__Group_1_1__0)
{ after(grammarAccess.getEquivalenceExpressionAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisionExpression__Alternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisionExpressionAccess().getGroup_1_0_0()); }
(rule__ComparisionExpression__Group_1_0_0__0)
{ after(grammarAccess.getComparisionExpressionAccess().getGroup_1_0_0()); }
)

    |(
{ before(grammarAccess.getComparisionExpressionAccess().getGroup_1_0_1()); }
(rule__ComparisionExpression__Group_1_0_1__0)
{ after(grammarAccess.getComparisionExpressionAccess().getGroup_1_0_1()); }
)

    |(
{ before(grammarAccess.getComparisionExpressionAccess().getGroup_1_0_2()); }
(rule__ComparisionExpression__Group_1_0_2__0)
{ after(grammarAccess.getComparisionExpressionAccess().getGroup_1_0_2()); }
)

    |(
{ before(grammarAccess.getComparisionExpressionAccess().getGroup_1_0_3()); }
(rule__ComparisionExpression__Group_1_0_3__0)
{ after(grammarAccess.getComparisionExpressionAccess().getGroup_1_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getGroup_1_0()); }
(rule__AdditiveExpression__Group_1_0__0)
{ after(grammarAccess.getAdditiveExpressionAccess().getGroup_1_0()); }
)

    |(
{ before(grammarAccess.getAdditiveExpressionAccess().getGroup_1_1()); }
(rule__AdditiveExpression__Group_1_1__0)
{ after(grammarAccess.getAdditiveExpressionAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1_0()); }
(rule__MultiplicativeExpression__Group_1_0__0)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1_0()); }
)

    |(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1_1()); }
(rule__MultiplicativeExpression__Group_1_1__0)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Alternatives_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1_1_0_0()); }
(rule__MultiplicativeExpression__Group_1_1_0_0__0)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1_1_0_0()); }
)

    |(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1_1_0_1()); }
(rule__MultiplicativeExpression__Group_1_1_0_1__0)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1_1_0_1()); }
)

    |(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1_1_0_2()); }
(rule__MultiplicativeExpression__Group_1_1_0_2__0)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1_1_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AccessExpression__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAccessExpressionAccess().getGroup_1_0()); }
(rule__AccessExpression__Group_1_0__0)
{ after(grammarAccess.getAccessExpressionAccess().getGroup_1_0()); }
)

    |(
{ before(grammarAccess.getAccessExpressionAccess().getGroup_1_1()); }
(rule__AccessExpression__Group_1_1__0)
{ after(grammarAccess.getAccessExpressionAccess().getGroup_1_1()); }
)

    |(
{ before(grammarAccess.getAccessExpressionAccess().getGroup_1_2()); }
(rule__AccessExpression__Group_1_2__0)
{ after(grammarAccess.getAccessExpressionAccess().getGroup_1_2()); }
)

    |(
{ before(grammarAccess.getAccessExpressionAccess().getGroup_1_3()); }
(rule__AccessExpression__Group_1_3__0)
{ after(grammarAccess.getAccessExpressionAccess().getGroup_1_3()); }
)

    |(
{ before(grammarAccess.getAccessExpressionAccess().getGroup_1_4()); }
(rule__AccessExpression__Group_1_4__0)
{ after(grammarAccess.getAccessExpressionAccess().getGroup_1_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionAccess().getIntegerLiteralExpressionParserRuleCall_0()); }
	ruleIntegerLiteralExpression
{ after(grammarAccess.getLiteralExpressionAccess().getIntegerLiteralExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getLiteralExpressionAccess().getDecimalLiteralExpressionParserRuleCall_1()); }
	ruleDecimalLiteralExpression
{ after(grammarAccess.getLiteralExpressionAccess().getDecimalLiteralExpressionParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getLiteralExpressionAccess().getRationalLiteralExpressionParserRuleCall_2()); }
	ruleRationalLiteralExpression
{ after(grammarAccess.getLiteralExpressionAccess().getRationalLiteralExpressionParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getLiteralExpressionAccess().getBooleanLiteralExpressionParserRuleCall_3()); }
	ruleBooleanLiteralExpression
{ after(grammarAccess.getLiteralExpressionAccess().getBooleanLiteralExpressionParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getLiteralExpressionAccess().getArrayLiteralExpressionParserRuleCall_4()); }
	ruleArrayLiteralExpression
{ after(grammarAccess.getLiteralExpressionAccess().getArrayLiteralExpressionParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getLiteralExpressionAccess().getRecordLiteralExpressionParserRuleCall_5()); }
	ruleRecordLiteralExpression
{ after(grammarAccess.getLiteralExpressionAccess().getRecordLiteralExpressionParserRuleCall_5()); }
)

    |(
{ before(grammarAccess.getLiteralExpressionAccess().getTupleLiteralExpressionParserRuleCall_6()); }
	ruleTupleLiteralExpression
{ after(grammarAccess.getLiteralExpressionAccess().getTupleLiteralExpressionParserRuleCall_6()); }
)

    |(
{ before(grammarAccess.getLiteralExpressionAccess().getEnumerationLiteralExpressionParserRuleCall_7()); }
	ruleEnumerationLiteralExpression
{ after(grammarAccess.getLiteralExpressionAccess().getEnumerationLiteralExpressionParserRuleCall_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanLiteralExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanLiteralExpressionAccess().getTrueExpressionParserRuleCall_0()); }
	ruleTrueExpression
{ after(grammarAccess.getBooleanLiteralExpressionAccess().getTrueExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getBooleanLiteralExpressionAccess().getFalseExpressionParserRuleCall_1()); }
	ruleFalseExpression
{ after(grammarAccess.getBooleanLiteralExpressionAccess().getFalseExpressionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__HybridSpecification__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HybridSpecification__Group__0__Impl
	rule__HybridSpecification__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__HybridSpecification__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHybridSpecificationAccess().getSpecificationKeyword_0()); }

	'specification' 

{ after(grammarAccess.getHybridSpecificationAccess().getSpecificationKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__HybridSpecification__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HybridSpecification__Group__1__Impl
	rule__HybridSpecification__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__HybridSpecification__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHybridSpecificationAccess().getNameAssignment_1()); }
(rule__HybridSpecification__NameAssignment_1)
{ after(grammarAccess.getHybridSpecificationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__HybridSpecification__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HybridSpecification__Group__2__Impl
	rule__HybridSpecification__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__HybridSpecification__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHybridSpecificationAccess().getGroup_2()); }
(rule__HybridSpecification__Group_2__0)?
{ after(grammarAccess.getHybridSpecificationAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__HybridSpecification__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HybridSpecification__Group__3__Impl
	rule__HybridSpecification__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__HybridSpecification__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHybridSpecificationAccess().getLeftCurlyBracketKeyword_3()); }

	'{' 

{ after(grammarAccess.getHybridSpecificationAccess().getLeftCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__HybridSpecification__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HybridSpecification__Group__4__Impl
	rule__HybridSpecification__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__HybridSpecification__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHybridSpecificationAccess().getAlternatives_4()); }
(rule__HybridSpecification__Alternatives_4)*
{ after(grammarAccess.getHybridSpecificationAccess().getAlternatives_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__HybridSpecification__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HybridSpecification__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__HybridSpecification__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHybridSpecificationAccess().getRightCurlyBracketKeyword_5()); }

	'}' 

{ after(grammarAccess.getHybridSpecificationAccess().getRightCurlyBracketKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__HybridSpecification__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HybridSpecification__Group_2__0__Impl
	rule__HybridSpecification__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__HybridSpecification__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHybridSpecificationAccess().getLeftParenthesisKeyword_2_0()); }

	'(' 

{ after(grammarAccess.getHybridSpecificationAccess().getLeftParenthesisKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__HybridSpecification__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HybridSpecification__Group_2__1__Impl
	rule__HybridSpecification__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__HybridSpecification__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHybridSpecificationAccess().getGroup_2_1()); }
(rule__HybridSpecification__Group_2_1__0)?
{ after(grammarAccess.getHybridSpecificationAccess().getGroup_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__HybridSpecification__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HybridSpecification__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__HybridSpecification__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHybridSpecificationAccess().getRightParenthesisKeyword_2_2()); }

	')' 

{ after(grammarAccess.getHybridSpecificationAccess().getRightParenthesisKeyword_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__HybridSpecification__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HybridSpecification__Group_2_1__0__Impl
	rule__HybridSpecification__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__HybridSpecification__Group_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHybridSpecificationAccess().getParameterDeclarationsAssignment_2_1_0()); }
(rule__HybridSpecification__ParameterDeclarationsAssignment_2_1_0)
{ after(grammarAccess.getHybridSpecificationAccess().getParameterDeclarationsAssignment_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__HybridSpecification__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HybridSpecification__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__HybridSpecification__Group_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHybridSpecificationAccess().getGroup_2_1_1()); }
(rule__HybridSpecification__Group_2_1_1__0)*
{ after(grammarAccess.getHybridSpecificationAccess().getGroup_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__HybridSpecification__Group_2_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HybridSpecification__Group_2_1_1__0__Impl
	rule__HybridSpecification__Group_2_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__HybridSpecification__Group_2_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHybridSpecificationAccess().getCommaKeyword_2_1_1_0()); }

	',' 

{ after(grammarAccess.getHybridSpecificationAccess().getCommaKeyword_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__HybridSpecification__Group_2_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HybridSpecification__Group_2_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__HybridSpecification__Group_2_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHybridSpecificationAccess().getParameterDeclarationsAssignment_2_1_1_1()); }
(rule__HybridSpecification__ParameterDeclarationsAssignment_2_1_1_1)
{ after(grammarAccess.getHybridSpecificationAccess().getParameterDeclarationsAssignment_2_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ClockTypeDefinition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClockTypeDefinition__Group__0__Impl
	rule__ClockTypeDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ClockTypeDefinition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClockTypeDefinitionAccess().getClockTypeDefinitionAction_0()); }
(

)
{ after(grammarAccess.getClockTypeDefinitionAccess().getClockTypeDefinitionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ClockTypeDefinition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClockTypeDefinition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ClockTypeDefinition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClockTypeDefinitionAccess().getClockKeyword_1()); }

	'clock' 

{ after(grammarAccess.getClockTypeDefinitionAccess().getClockKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PrimaryExpression__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpression__Group_3__0__Impl
	rule__PrimaryExpression__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_3_0()); }

	'(' 

{ after(grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpression__Group_3__1__Impl
	rule__PrimaryExpression__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getExpressionParserRuleCall_3_1()); }
	ruleExpression
{ after(grammarAccess.getPrimaryExpressionAccess().getExpressionParserRuleCall_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group_3__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpression__Group_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_3__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_3_2()); }

	')' 

{ after(grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_3_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__LocationReferenceExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocationReferenceExpression__Group__0__Impl
	rule__LocationReferenceExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LocationReferenceExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocationReferenceExpressionAccess().getCommercialAtKeyword_0()); }

	'@' 

{ after(grammarAccess.getLocationReferenceExpressionAccess().getCommercialAtKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LocationReferenceExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocationReferenceExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LocationReferenceExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocationReferenceExpressionAccess().getLocationAssignment_1()); }
(rule__LocationReferenceExpression__LocationAssignment_1)
{ after(grammarAccess.getLocationReferenceExpressionAccess().getLocationAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SignumExpression__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SignumExpression__Group_0__0__Impl
	rule__SignumExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SignumExpression__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignumExpressionAccess().getUnaryMinusExpressionAction_0_0()); }
(

)
{ after(grammarAccess.getSignumExpressionAccess().getUnaryMinusExpressionAction_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SignumExpression__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SignumExpression__Group_0__1__Impl
	rule__SignumExpression__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SignumExpression__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignumExpressionAccess().getHyphenMinusKeyword_0_1()); }
(
	'-' 
)
{ after(grammarAccess.getSignumExpressionAccess().getHyphenMinusKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SignumExpression__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SignumExpression__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SignumExpression__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignumExpressionAccess().getOperandAssignment_0_2()); }
(rule__SignumExpression__OperandAssignment_0_2)
{ after(grammarAccess.getSignumExpressionAccess().getOperandAssignment_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SignumExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SignumExpression__Group_1__0__Impl
	rule__SignumExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SignumExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignumExpressionAccess().getUnaryPlusExpressionAction_1_0()); }
(

)
{ after(grammarAccess.getSignumExpressionAccess().getUnaryPlusExpressionAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SignumExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SignumExpression__Group_1__1__Impl
	rule__SignumExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SignumExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignumExpressionAccess().getPlusSignKeyword_1_1()); }
(
	'+' 
)
{ after(grammarAccess.getSignumExpressionAccess().getPlusSignKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SignumExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SignumExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SignumExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignumExpressionAccess().getOperandAssignment_1_2()); }
(rule__SignumExpression__OperandAssignment_1_2)
{ after(grammarAccess.getSignumExpressionAccess().getOperandAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SignumExpression__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SignumExpression__Group_2__0__Impl
	rule__SignumExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SignumExpression__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignumExpressionAccess().getDotExpressionAction_2_0()); }
(

)
{ after(grammarAccess.getSignumExpressionAccess().getDotExpressionAction_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SignumExpression__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SignumExpression__Group_2__1__Impl
	rule__SignumExpression__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SignumExpression__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignumExpressionAccess().getDKeyword_2_1()); }
(
	'd' 
)
{ after(grammarAccess.getSignumExpressionAccess().getDKeyword_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SignumExpression__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SignumExpression__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SignumExpression__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignumExpressionAccess().getOperandAssignment_2_2()); }
(rule__SignumExpression__OperandAssignment_2_2)
{ after(grammarAccess.getSignumExpressionAccess().getOperandAssignment_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__HybridAutomatonDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HybridAutomatonDeclaration__Group__0__Impl
	rule__HybridAutomatonDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__HybridAutomatonDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHybridAutomatonDeclarationAccess().getAutomatonKeyword_0()); }

	'automaton' 

{ after(grammarAccess.getHybridAutomatonDeclarationAccess().getAutomatonKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__HybridAutomatonDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HybridAutomatonDeclaration__Group__1__Impl
	rule__HybridAutomatonDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__HybridAutomatonDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHybridAutomatonDeclarationAccess().getNameAssignment_1()); }
(rule__HybridAutomatonDeclaration__NameAssignment_1)
{ after(grammarAccess.getHybridAutomatonDeclarationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__HybridAutomatonDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HybridAutomatonDeclaration__Group__2__Impl
	rule__HybridAutomatonDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__HybridAutomatonDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHybridAutomatonDeclarationAccess().getGroup_2()); }
(rule__HybridAutomatonDeclaration__Group_2__0)?
{ after(grammarAccess.getHybridAutomatonDeclarationAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__HybridAutomatonDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HybridAutomatonDeclaration__Group__3__Impl
	rule__HybridAutomatonDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__HybridAutomatonDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHybridAutomatonDeclarationAccess().getColonEqualsSignKeyword_3()); }

	':=' 

{ after(grammarAccess.getHybridAutomatonDeclarationAccess().getColonEqualsSignKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__HybridAutomatonDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HybridAutomatonDeclaration__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__HybridAutomatonDeclaration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHybridAutomatonDeclarationAccess().getHybridAutomatonAssignment_4()); }
(rule__HybridAutomatonDeclaration__HybridAutomatonAssignment_4)
{ after(grammarAccess.getHybridAutomatonDeclarationAccess().getHybridAutomatonAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__HybridAutomatonDeclaration__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HybridAutomatonDeclaration__Group_2__0__Impl
	rule__HybridAutomatonDeclaration__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__HybridAutomatonDeclaration__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHybridAutomatonDeclarationAccess().getLeftParenthesisKeyword_2_0()); }

	'(' 

{ after(grammarAccess.getHybridAutomatonDeclarationAccess().getLeftParenthesisKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__HybridAutomatonDeclaration__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HybridAutomatonDeclaration__Group_2__1__Impl
	rule__HybridAutomatonDeclaration__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__HybridAutomatonDeclaration__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHybridAutomatonDeclarationAccess().getGroup_2_1()); }
(rule__HybridAutomatonDeclaration__Group_2_1__0)?
{ after(grammarAccess.getHybridAutomatonDeclarationAccess().getGroup_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__HybridAutomatonDeclaration__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HybridAutomatonDeclaration__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__HybridAutomatonDeclaration__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHybridAutomatonDeclarationAccess().getRightParenthesisKeyword_2_2()); }

	')' 

{ after(grammarAccess.getHybridAutomatonDeclarationAccess().getRightParenthesisKeyword_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__HybridAutomatonDeclaration__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HybridAutomatonDeclaration__Group_2_1__0__Impl
	rule__HybridAutomatonDeclaration__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__HybridAutomatonDeclaration__Group_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHybridAutomatonDeclarationAccess().getParameterDeclarationsAssignment_2_1_0()); }
(rule__HybridAutomatonDeclaration__ParameterDeclarationsAssignment_2_1_0)
{ after(grammarAccess.getHybridAutomatonDeclarationAccess().getParameterDeclarationsAssignment_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__HybridAutomatonDeclaration__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HybridAutomatonDeclaration__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__HybridAutomatonDeclaration__Group_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHybridAutomatonDeclarationAccess().getGroup_2_1_1()); }
(rule__HybridAutomatonDeclaration__Group_2_1_1__0)*
{ after(grammarAccess.getHybridAutomatonDeclarationAccess().getGroup_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__HybridAutomatonDeclaration__Group_2_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HybridAutomatonDeclaration__Group_2_1_1__0__Impl
	rule__HybridAutomatonDeclaration__Group_2_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__HybridAutomatonDeclaration__Group_2_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHybridAutomatonDeclarationAccess().getCommaKeyword_2_1_1_0()); }

	',' 

{ after(grammarAccess.getHybridAutomatonDeclarationAccess().getCommaKeyword_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__HybridAutomatonDeclaration__Group_2_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HybridAutomatonDeclaration__Group_2_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__HybridAutomatonDeclaration__Group_2_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHybridAutomatonDeclarationAccess().getParameterDeclarationsAssignment_2_1_1_1()); }
(rule__HybridAutomatonDeclaration__ParameterDeclarationsAssignment_2_1_1_1)
{ after(grammarAccess.getHybridAutomatonDeclarationAccess().getParameterDeclarationsAssignment_2_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__HybridAutomatonDefinition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HybridAutomatonDefinition__Group__0__Impl
	rule__HybridAutomatonDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__HybridAutomatonDefinition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHybridAutomatonDefinitionAccess().getHybridAutomatonDefinitionAction_0()); }
(

)
{ after(grammarAccess.getHybridAutomatonDefinitionAccess().getHybridAutomatonDefinitionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__HybridAutomatonDefinition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HybridAutomatonDefinition__Group__1__Impl
	rule__HybridAutomatonDefinition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__HybridAutomatonDefinition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHybridAutomatonDefinitionAccess().getLeftCurlyBracketKeyword_1()); }

	'{' 

{ after(grammarAccess.getHybridAutomatonDefinitionAccess().getLeftCurlyBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__HybridAutomatonDefinition__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HybridAutomatonDefinition__Group__2__Impl
	rule__HybridAutomatonDefinition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__HybridAutomatonDefinition__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHybridAutomatonDefinitionAccess().getAlternatives_2()); }
(rule__HybridAutomatonDefinition__Alternatives_2)*
{ after(grammarAccess.getHybridAutomatonDefinitionAccess().getAlternatives_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__HybridAutomatonDefinition__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HybridAutomatonDefinition__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__HybridAutomatonDefinition__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHybridAutomatonDefinitionAccess().getRightCurlyBracketKeyword_3()); }

	'}' 

{ after(grammarAccess.getHybridAutomatonDefinitionAccess().getRightCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__GlobalVariableDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GlobalVariableDeclaration__Group__0__Impl
	rule__GlobalVariableDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GlobalVariableDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGlobalVariableDeclarationAccess().getGlobalKeyword_0()); }

	'global' 

{ after(grammarAccess.getGlobalVariableDeclarationAccess().getGlobalKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GlobalVariableDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GlobalVariableDeclaration__Group__1__Impl
	rule__GlobalVariableDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__GlobalVariableDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGlobalVariableDeclarationAccess().getNameAssignment_1()); }
(rule__GlobalVariableDeclaration__NameAssignment_1)
{ after(grammarAccess.getGlobalVariableDeclarationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GlobalVariableDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GlobalVariableDeclaration__Group__2__Impl
	rule__GlobalVariableDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__GlobalVariableDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGlobalVariableDeclarationAccess().getColonKeyword_2()); }

	':' 

{ after(grammarAccess.getGlobalVariableDeclarationAccess().getColonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GlobalVariableDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GlobalVariableDeclaration__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GlobalVariableDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGlobalVariableDeclarationAccess().getTypeAssignment_3()); }
(rule__GlobalVariableDeclaration__TypeAssignment_3)
{ after(grammarAccess.getGlobalVariableDeclarationAccess().getTypeAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__LocalVariableDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocalVariableDeclaration__Group__0__Impl
	rule__LocalVariableDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalVariableDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalVariableDeclarationAccess().getLocalKeyword_0()); }

	'local' 

{ after(grammarAccess.getLocalVariableDeclarationAccess().getLocalKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LocalVariableDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocalVariableDeclaration__Group__1__Impl
	rule__LocalVariableDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalVariableDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalVariableDeclarationAccess().getNameAssignment_1()); }
(rule__LocalVariableDeclaration__NameAssignment_1)
{ after(grammarAccess.getLocalVariableDeclarationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LocalVariableDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocalVariableDeclaration__Group__2__Impl
	rule__LocalVariableDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalVariableDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalVariableDeclarationAccess().getColonKeyword_2()); }

	':' 

{ after(grammarAccess.getLocalVariableDeclarationAccess().getColonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LocalVariableDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocalVariableDeclaration__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalVariableDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalVariableDeclarationAccess().getTypeAssignment_3()); }
(rule__LocalVariableDeclaration__TypeAssignment_3)
{ after(grammarAccess.getLocalVariableDeclarationAccess().getTypeAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Location__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Location__Group__0__Impl
	rule__Location__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Location__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocationAccess().getLocationKeyword_0()); }

	'location' 

{ after(grammarAccess.getLocationAccess().getLocationKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Location__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Location__Group__1__Impl
	rule__Location__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Location__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocationAccess().getNameAssignment_1()); }
(rule__Location__NameAssignment_1)
{ after(grammarAccess.getLocationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Location__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Location__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Location__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocationAccess().getGroup_2()); }
(rule__Location__Group_2__0)?
{ after(grammarAccess.getLocationAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Location__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Location__Group_2__0__Impl
	rule__Location__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Location__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocationAccess().getLeftCurlyBracketKeyword_2_0()); }

	'{' 

{ after(grammarAccess.getLocationAccess().getLeftCurlyBracketKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Location__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Location__Group_2__1__Impl
	rule__Location__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Location__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocationAccess().getConditionsAssignment_2_1()); }
(rule__Location__ConditionsAssignment_2_1)*
{ after(grammarAccess.getLocationAccess().getConditionsAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Location__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Location__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Location__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocationAccess().getRightCurlyBracketKeyword_2_2()); }

	'}' 

{ after(grammarAccess.getLocationAccess().getRightCurlyBracketKeyword_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Transition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group__0__Impl
	rule__Transition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getTransitionKeyword_0()); }

	'transition' 

{ after(grammarAccess.getTransitionAccess().getTransitionKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Transition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group__1__Impl
	rule__Transition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getSourceAssignment_1()); }
(rule__Transition__SourceAssignment_1)
{ after(grammarAccess.getTransitionAccess().getSourceAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Transition__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group__2__Impl
	rule__Transition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getToKeyword_2()); }

	'to' 

{ after(grammarAccess.getTransitionAccess().getToKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Transition__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group__3__Impl
	rule__Transition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getTargetAssignment_3()); }
(rule__Transition__TargetAssignment_3)
{ after(grammarAccess.getTransitionAccess().getTargetAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Transition__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group__4__Impl
	rule__Transition__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getGroup_4()); }
(rule__Transition__Group_4__0)?
{ after(grammarAccess.getTransitionAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Transition__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group__5__Impl
	rule__Transition__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getGroup_5()); }
(rule__Transition__Group_5__0)?
{ after(grammarAccess.getTransitionAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Transition__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getGroup_6()); }
(rule__Transition__Group_6__0)?
{ after(grammarAccess.getTransitionAccess().getGroup_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__Transition__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group_4__0__Impl
	rule__Transition__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getLeftParenthesisKeyword_4_0()); }

	'(' 

{ after(grammarAccess.getTransitionAccess().getLeftParenthesisKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Transition__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group_4__1__Impl
	rule__Transition__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getParameterDeclarationsAssignment_4_1()); }
(rule__Transition__ParameterDeclarationsAssignment_4_1)
{ after(grammarAccess.getTransitionAccess().getParameterDeclarationsAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Transition__Group_4__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group_4__2__Impl
	rule__Transition__Group_4__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group_4__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getGroup_4_2()); }
(rule__Transition__Group_4_2__0)*
{ after(grammarAccess.getTransitionAccess().getGroup_4_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Transition__Group_4__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group_4__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group_4__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getRightParenthesisKeyword_4_3()); }

	')' 

{ after(grammarAccess.getTransitionAccess().getRightParenthesisKeyword_4_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Transition__Group_4_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group_4_2__0__Impl
	rule__Transition__Group_4_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group_4_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getCommaKeyword_4_2_0()); }

	',' 

{ after(grammarAccess.getTransitionAccess().getCommaKeyword_4_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Transition__Group_4_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group_4_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group_4_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getParameterDeclarationsAssignment_4_2_1()); }
(rule__Transition__ParameterDeclarationsAssignment_4_2_1)
{ after(grammarAccess.getTransitionAccess().getParameterDeclarationsAssignment_4_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Transition__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group_5__0__Impl
	rule__Transition__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getLeftSquareBracketKeyword_5_0()); }

	'[' 

{ after(grammarAccess.getTransitionAccess().getLeftSquareBracketKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Transition__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group_5__1__Impl
	rule__Transition__Group_5__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getGuardsAssignment_5_1()); }
(rule__Transition__GuardsAssignment_5_1)
{ after(grammarAccess.getTransitionAccess().getGuardsAssignment_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Transition__Group_5__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group_5__2__Impl
	rule__Transition__Group_5__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group_5__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getGroup_5_2()); }
(rule__Transition__Group_5_2__0)*
{ after(grammarAccess.getTransitionAccess().getGroup_5_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Transition__Group_5__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group_5__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group_5__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getRightSquareBracketKeyword_5_3()); }

	']' 

{ after(grammarAccess.getTransitionAccess().getRightSquareBracketKeyword_5_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Transition__Group_5_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group_5_2__0__Impl
	rule__Transition__Group_5_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group_5_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getCommaKeyword_5_2_0()); }

	',' 

{ after(grammarAccess.getTransitionAccess().getCommaKeyword_5_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Transition__Group_5_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group_5_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group_5_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getGuardsAssignment_5_2_1()); }
(rule__Transition__GuardsAssignment_5_2_1)
{ after(grammarAccess.getTransitionAccess().getGuardsAssignment_5_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Transition__Group_6__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group_6__0__Impl
	rule__Transition__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group_6__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getLeftCurlyBracketKeyword_6_0()); }

	'{' 

{ after(grammarAccess.getTransitionAccess().getLeftCurlyBracketKeyword_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Transition__Group_6__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group_6__1__Impl
	rule__Transition__Group_6__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group_6__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getAssignmentsAssignment_6_1()); }
(rule__Transition__AssignmentsAssignment_6_1)
{ after(grammarAccess.getTransitionAccess().getAssignmentsAssignment_6_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Transition__Group_6__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group_6__2__Impl
	rule__Transition__Group_6__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group_6__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getGroup_6_2()); }
(rule__Transition__Group_6_2__0)*
{ after(grammarAccess.getTransitionAccess().getGroup_6_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Transition__Group_6__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group_6__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group_6__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getRightCurlyBracketKeyword_6_3()); }

	'}' 

{ after(grammarAccess.getTransitionAccess().getRightCurlyBracketKeyword_6_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Transition__Group_6_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group_6_2__0__Impl
	rule__Transition__Group_6_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group_6_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getCommaKeyword_6_2_0()); }

	',' 

{ after(grammarAccess.getTransitionAccess().getCommaKeyword_6_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Transition__Group_6_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group_6_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group_6_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getAssignmentsAssignment_6_2_1()); }
(rule__Transition__AssignmentsAssignment_6_2_1)
{ after(grammarAccess.getTransitionAccess().getAssignmentsAssignment_6_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Assignment__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group__0__Impl
	rule__Assignment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getLhsAssignment_0()); }
(rule__Assignment__LhsAssignment_0)
{ after(grammarAccess.getAssignmentAccess().getLhsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group__1__Impl
	rule__Assignment__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getColonEqualsSignKeyword_1()); }

	':=' 

{ after(grammarAccess.getAssignmentAccess().getColonEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getRhsAssignment_2()); }
(rule__Assignment__RhsAssignment_2)
{ after(grammarAccess.getAssignmentAccess().getRhsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__InitialCondition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InitialCondition__Group__0__Impl
	rule__InitialCondition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InitialCondition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInitialConditionAccess().getInitialKeyword_0()); }

	'initial' 

{ after(grammarAccess.getInitialConditionAccess().getInitialKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InitialCondition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InitialCondition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InitialCondition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInitialConditionAccess().getExpressionAssignment_1()); }
(rule__InitialCondition__ExpressionAssignment_1)
{ after(grammarAccess.getInitialConditionAccess().getExpressionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__InvariantCondition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InvariantCondition__Group__0__Impl
	rule__InvariantCondition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InvariantCondition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInvariantConditionAccess().getInvariantKeyword_0()); }

	'invariant' 

{ after(grammarAccess.getInvariantConditionAccess().getInvariantKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InvariantCondition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InvariantCondition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InvariantCondition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInvariantConditionAccess().getExpressionAssignment_1()); }
(rule__InvariantCondition__ExpressionAssignment_1)
{ after(grammarAccess.getInvariantConditionAccess().getExpressionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FlowCondition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FlowCondition__Group__0__Impl
	rule__FlowCondition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowCondition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowConditionAccess().getFlowKeyword_0()); }

	'flow' 

{ after(grammarAccess.getFlowConditionAccess().getFlowKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FlowCondition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FlowCondition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowCondition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowConditionAccess().getExpressionAssignment_1()); }
(rule__FlowCondition__ExpressionAssignment_1)
{ after(grammarAccess.getFlowConditionAccess().getExpressionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PropertyDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertyDeclaration__Group__0__Impl
	rule__PropertyDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyDeclarationAccess().getPropertyKeyword_0()); }

	'property' 

{ after(grammarAccess.getPropertyDeclarationAccess().getPropertyKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PropertyDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertyDeclaration__Group__1__Impl
	rule__PropertyDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyDeclarationAccess().getNameAssignment_1()); }
(rule__PropertyDeclaration__NameAssignment_1)
{ after(grammarAccess.getPropertyDeclarationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PropertyDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertyDeclaration__Group__2__Impl
	rule__PropertyDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyDeclarationAccess().getColonKeyword_2()); }

	':' 

{ after(grammarAccess.getPropertyDeclarationAccess().getColonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PropertyDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertyDeclaration__Group__3__Impl
	rule__PropertyDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyDeclarationAccess().getHybridAutomatonAssignment_3()); }
(rule__PropertyDeclaration__HybridAutomatonAssignment_3)
{ after(grammarAccess.getPropertyDeclarationAccess().getHybridAutomatonAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PropertyDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertyDeclaration__Group__4__Impl
	rule__PropertyDeclaration__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyDeclaration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyDeclarationAccess().getModelsKeyword_4()); }

	'models' 

{ after(grammarAccess.getPropertyDeclarationAccess().getModelsKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PropertyDeclaration__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertyDeclaration__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyDeclaration__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyDeclarationAccess().getExpressionAssignment_5()); }
(rule__PropertyDeclaration__ExpressionAssignment_5)
{ after(grammarAccess.getPropertyDeclarationAccess().getExpressionAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


















rule__ParameterDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterDeclaration__Group__0__Impl
	rule__ParameterDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterDeclarationAccess().getParameterDeclarationAction_0()); }
(

)
{ after(grammarAccess.getParameterDeclarationAccess().getParameterDeclarationAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterDeclaration__Group__1__Impl
	rule__ParameterDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterDeclarationAccess().getNameAssignment_1()); }
(rule__ParameterDeclaration__NameAssignment_1)
{ after(grammarAccess.getParameterDeclarationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterDeclaration__Group__2__Impl
	rule__ParameterDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterDeclarationAccess().getColonKeyword_2()); }

	':' 

{ after(grammarAccess.getParameterDeclarationAccess().getColonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterDeclaration__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterDeclarationAccess().getTypeAssignment_3()); }
(rule__ParameterDeclaration__TypeAssignment_3)
{ after(grammarAccess.getParameterDeclarationAccess().getTypeAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__FieldDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FieldDeclaration__Group__0__Impl
	rule__FieldDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FieldDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldDeclarationAccess().getFieldDeclarationAction_0()); }
(

)
{ after(grammarAccess.getFieldDeclarationAccess().getFieldDeclarationAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FieldDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FieldDeclaration__Group__1__Impl
	rule__FieldDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FieldDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldDeclarationAccess().getNameAssignment_1()); }
(rule__FieldDeclaration__NameAssignment_1)
{ after(grammarAccess.getFieldDeclarationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FieldDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FieldDeclaration__Group__2__Impl
	rule__FieldDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FieldDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldDeclarationAccess().getColonKeyword_2()); }

	':' 

{ after(grammarAccess.getFieldDeclarationAccess().getColonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FieldDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FieldDeclaration__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FieldDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldDeclarationAccess().getTypeAssignment_3()); }
(rule__FieldDeclaration__TypeAssignment_3)
{ after(grammarAccess.getFieldDeclarationAccess().getTypeAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__LetDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LetDeclaration__Group__0__Impl
	rule__LetDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LetDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetDeclarationAccess().getLetDeclarationAction_0()); }
(

)
{ after(grammarAccess.getLetDeclarationAccess().getLetDeclarationAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LetDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LetDeclaration__Group__1__Impl
	rule__LetDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LetDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetDeclarationAccess().getNameAssignment_1()); }
(rule__LetDeclaration__NameAssignment_1)
{ after(grammarAccess.getLetDeclarationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LetDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LetDeclaration__Group__2__Impl
	rule__LetDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LetDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetDeclarationAccess().getColonKeyword_2()); }

	':' 

{ after(grammarAccess.getLetDeclarationAccess().getColonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LetDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LetDeclaration__Group__3__Impl
	rule__LetDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__LetDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetDeclarationAccess().getTypeAssignment_3()); }
(rule__LetDeclaration__TypeAssignment_3)
{ after(grammarAccess.getLetDeclarationAccess().getTypeAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LetDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LetDeclaration__Group__4__Impl
	rule__LetDeclaration__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__LetDeclaration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetDeclarationAccess().getColonEqualsSignKeyword_4()); }

	':=' 

{ after(grammarAccess.getLetDeclarationAccess().getColonEqualsSignKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LetDeclaration__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LetDeclaration__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LetDeclaration__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetDeclarationAccess().getExpressionAssignment_5()); }
(rule__LetDeclaration__ExpressionAssignment_5)
{ after(grammarAccess.getLetDeclarationAccess().getExpressionAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__ConstantDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstantDeclaration__Group__0__Impl
	rule__ConstantDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantDeclarationAccess().getConstKeyword_0()); }

	'const' 

{ after(grammarAccess.getConstantDeclarationAccess().getConstKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstantDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstantDeclaration__Group__1__Impl
	rule__ConstantDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantDeclarationAccess().getNameAssignment_1()); }
(rule__ConstantDeclaration__NameAssignment_1)
{ after(grammarAccess.getConstantDeclarationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstantDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstantDeclaration__Group__2__Impl
	rule__ConstantDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantDeclarationAccess().getColonKeyword_2()); }

	':' 

{ after(grammarAccess.getConstantDeclarationAccess().getColonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstantDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstantDeclaration__Group__3__Impl
	rule__ConstantDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantDeclarationAccess().getTypeAssignment_3()); }
(rule__ConstantDeclaration__TypeAssignment_3)
{ after(grammarAccess.getConstantDeclarationAccess().getTypeAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstantDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstantDeclaration__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantDeclaration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantDeclarationAccess().getGroup_4()); }
(rule__ConstantDeclaration__Group_4__0)?
{ after(grammarAccess.getConstantDeclarationAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__ConstantDeclaration__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstantDeclaration__Group_4__0__Impl
	rule__ConstantDeclaration__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantDeclaration__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantDeclarationAccess().getColonEqualsSignKeyword_4_0()); }

	':=' 

{ after(grammarAccess.getConstantDeclarationAccess().getColonEqualsSignKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstantDeclaration__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstantDeclaration__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantDeclaration__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantDeclarationAccess().getExpressionAssignment_4_1()); }
(rule__ConstantDeclaration__ExpressionAssignment_4_1)
{ after(grammarAccess.getConstantDeclarationAccess().getExpressionAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FunctionDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group__0__Impl
	rule__FunctionDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getFunctionKeyword_0()); }

	'function' 

{ after(grammarAccess.getFunctionDeclarationAccess().getFunctionKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group__1__Impl
	rule__FunctionDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getNameAssignment_1()); }
(rule__FunctionDeclaration__NameAssignment_1)
{ after(grammarAccess.getFunctionDeclarationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group__2__Impl
	rule__FunctionDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getGroup_2()); }
(rule__FunctionDeclaration__Group_2__0)?
{ after(grammarAccess.getFunctionDeclarationAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group__3__Impl
	rule__FunctionDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getColonKeyword_3()); }

	':' 

{ after(grammarAccess.getFunctionDeclarationAccess().getColonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group__4__Impl
	rule__FunctionDeclaration__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getTypeAssignment_4()); }
(rule__FunctionDeclaration__TypeAssignment_4)
{ after(grammarAccess.getFunctionDeclarationAccess().getTypeAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getGroup_5()); }
(rule__FunctionDeclaration__Group_5__0)?
{ after(grammarAccess.getFunctionDeclarationAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__FunctionDeclaration__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group_2__0__Impl
	rule__FunctionDeclaration__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getLeftParenthesisKeyword_2_0()); }

	'(' 

{ after(grammarAccess.getFunctionDeclarationAccess().getLeftParenthesisKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group_2__1__Impl
	rule__FunctionDeclaration__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getGroup_2_1()); }
(rule__FunctionDeclaration__Group_2_1__0)?
{ after(grammarAccess.getFunctionDeclarationAccess().getGroup_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getRightParenthesisKeyword_2_2()); }

	')' 

{ after(grammarAccess.getFunctionDeclarationAccess().getRightParenthesisKeyword_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__FunctionDeclaration__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group_2_1__0__Impl
	rule__FunctionDeclaration__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getParameterDeclarationsAssignment_2_1_0()); }
(rule__FunctionDeclaration__ParameterDeclarationsAssignment_2_1_0)
{ after(grammarAccess.getFunctionDeclarationAccess().getParameterDeclarationsAssignment_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getGroup_2_1_1()); }
(rule__FunctionDeclaration__Group_2_1_1__0)*
{ after(grammarAccess.getFunctionDeclarationAccess().getGroup_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FunctionDeclaration__Group_2_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group_2_1_1__0__Impl
	rule__FunctionDeclaration__Group_2_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group_2_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getCommaKeyword_2_1_1_0()); }

	',' 

{ after(grammarAccess.getFunctionDeclarationAccess().getCommaKeyword_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group_2_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group_2_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group_2_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getParameterDeclarationsAssignment_2_1_1_1()); }
(rule__FunctionDeclaration__ParameterDeclarationsAssignment_2_1_1_1)
{ after(grammarAccess.getFunctionDeclarationAccess().getParameterDeclarationsAssignment_2_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FunctionDeclaration__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group_5__0__Impl
	rule__FunctionDeclaration__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getColonEqualsSignKeyword_5_0()); }

	':=' 

{ after(grammarAccess.getFunctionDeclarationAccess().getColonEqualsSignKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getExpressionAssignment_5_1()); }
(rule__FunctionDeclaration__ExpressionAssignment_5_1)
{ after(grammarAccess.getFunctionDeclarationAccess().getExpressionAssignment_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TypeDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeDeclaration__Group__0__Impl
	rule__TypeDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDeclarationAccess().getTypeKeyword_0()); }

	'type' 

{ after(grammarAccess.getTypeDeclarationAccess().getTypeKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeDeclaration__Group__1__Impl
	rule__TypeDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDeclarationAccess().getNameAssignment_1()); }
(rule__TypeDeclaration__NameAssignment_1)
{ after(grammarAccess.getTypeDeclarationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeDeclaration__Group__2__Impl
	rule__TypeDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDeclarationAccess().getColonKeyword_2()); }

	':' 

{ after(grammarAccess.getTypeDeclarationAccess().getColonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeDeclaration__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDeclarationAccess().getTypeAssignment_3()); }
(rule__TypeDeclaration__TypeAssignment_3)
{ after(grammarAccess.getTypeDeclarationAccess().getTypeAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__NaturalTypeDefinition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NaturalTypeDefinition__Group__0__Impl
	rule__NaturalTypeDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NaturalTypeDefinition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNaturalTypeDefinitionAccess().getNaturalTypeDefinitionAction_0()); }
(

)
{ after(grammarAccess.getNaturalTypeDefinitionAccess().getNaturalTypeDefinitionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NaturalTypeDefinition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NaturalTypeDefinition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NaturalTypeDefinition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNaturalTypeDefinitionAccess().getNaturalKeyword_1()); }

	'natural' 

{ after(grammarAccess.getNaturalTypeDefinitionAccess().getNaturalKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__IntegerTypeDefinition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntegerTypeDefinition__Group__0__Impl
	rule__IntegerTypeDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerTypeDefinition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerTypeDefinitionAccess().getIntegerTypeDefinitionAction_0()); }
(

)
{ after(grammarAccess.getIntegerTypeDefinitionAccess().getIntegerTypeDefinitionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IntegerTypeDefinition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntegerTypeDefinition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerTypeDefinition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerTypeDefinitionAccess().getIntegerKeyword_1()); }

	'integer' 

{ after(grammarAccess.getIntegerTypeDefinitionAccess().getIntegerKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BooleanTypeDefinition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BooleanTypeDefinition__Group__0__Impl
	rule__BooleanTypeDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanTypeDefinition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanTypeDefinitionAccess().getBooleanTypeDefinitionAction_0()); }
(

)
{ after(grammarAccess.getBooleanTypeDefinitionAccess().getBooleanTypeDefinitionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BooleanTypeDefinition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BooleanTypeDefinition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanTypeDefinition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanTypeDefinitionAccess().getBooleanKeyword_1()); }

	'boolean' 

{ after(grammarAccess.getBooleanTypeDefinitionAccess().getBooleanKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RealTypeDefinition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RealTypeDefinition__Group__0__Impl
	rule__RealTypeDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RealTypeDefinition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealTypeDefinitionAccess().getRealTypeDefinitionAction_0()); }
(

)
{ after(grammarAccess.getRealTypeDefinitionAccess().getRealTypeDefinitionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RealTypeDefinition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RealTypeDefinition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RealTypeDefinition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealTypeDefinitionAccess().getRealKeyword_1()); }

	'real' 

{ after(grammarAccess.getRealTypeDefinitionAccess().getRealKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ArrayTypeDefinition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayTypeDefinition__Group__0__Impl
	rule__ArrayTypeDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayTypeDefinition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayTypeDefinitionAccess().getArrayKeyword_0()); }

	'array' 

{ after(grammarAccess.getArrayTypeDefinitionAccess().getArrayKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayTypeDefinition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayTypeDefinition__Group__1__Impl
	rule__ArrayTypeDefinition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayTypeDefinition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayTypeDefinitionAccess().getIndexTypesAssignment_1()); }
(rule__ArrayTypeDefinition__IndexTypesAssignment_1)
{ after(grammarAccess.getArrayTypeDefinitionAccess().getIndexTypesAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayTypeDefinition__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayTypeDefinition__Group__2__Impl
	rule__ArrayTypeDefinition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayTypeDefinition__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayTypeDefinitionAccess().getGroup_2()); }
(rule__ArrayTypeDefinition__Group_2__0)*
{ after(grammarAccess.getArrayTypeDefinitionAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayTypeDefinition__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayTypeDefinition__Group__3__Impl
	rule__ArrayTypeDefinition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayTypeDefinition__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayTypeDefinitionAccess().getOfKeyword_3()); }

	'of' 

{ after(grammarAccess.getArrayTypeDefinitionAccess().getOfKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayTypeDefinition__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayTypeDefinition__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayTypeDefinition__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayTypeDefinitionAccess().getElementTypeAssignment_4()); }
(rule__ArrayTypeDefinition__ElementTypeAssignment_4)
{ after(grammarAccess.getArrayTypeDefinitionAccess().getElementTypeAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__ArrayTypeDefinition__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayTypeDefinition__Group_2__0__Impl
	rule__ArrayTypeDefinition__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayTypeDefinition__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayTypeDefinitionAccess().getCommaKeyword_2_0()); }

	',' 

{ after(grammarAccess.getArrayTypeDefinitionAccess().getCommaKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayTypeDefinition__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayTypeDefinition__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayTypeDefinition__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayTypeDefinitionAccess().getIndexTypesAssignment_2_1()); }
(rule__ArrayTypeDefinition__IndexTypesAssignment_2_1)
{ after(grammarAccess.getArrayTypeDefinitionAccess().getIndexTypesAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EnumerationTypeDefinition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumerationTypeDefinition__Group__0__Impl
	rule__EnumerationTypeDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationTypeDefinition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationTypeDefinitionAccess().getEnumKeyword_0()); }

	'enum' 

{ after(grammarAccess.getEnumerationTypeDefinitionAccess().getEnumKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumerationTypeDefinition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumerationTypeDefinition__Group__1__Impl
	rule__EnumerationTypeDefinition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationTypeDefinition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationTypeDefinitionAccess().getLeftCurlyBracketKeyword_1()); }

	'{' 

{ after(grammarAccess.getEnumerationTypeDefinitionAccess().getLeftCurlyBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumerationTypeDefinition__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumerationTypeDefinition__Group__2__Impl
	rule__EnumerationTypeDefinition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationTypeDefinition__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationTypeDefinitionAccess().getLiteralsAssignment_2()); }
(rule__EnumerationTypeDefinition__LiteralsAssignment_2)
{ after(grammarAccess.getEnumerationTypeDefinitionAccess().getLiteralsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumerationTypeDefinition__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumerationTypeDefinition__Group__3__Impl
	rule__EnumerationTypeDefinition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationTypeDefinition__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationTypeDefinitionAccess().getGroup_3()); }
(rule__EnumerationTypeDefinition__Group_3__0)*
{ after(grammarAccess.getEnumerationTypeDefinitionAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumerationTypeDefinition__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumerationTypeDefinition__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationTypeDefinition__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationTypeDefinitionAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getEnumerationTypeDefinitionAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__EnumerationTypeDefinition__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumerationTypeDefinition__Group_3__0__Impl
	rule__EnumerationTypeDefinition__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationTypeDefinition__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationTypeDefinitionAccess().getCommaKeyword_3_0()); }

	',' 

{ after(grammarAccess.getEnumerationTypeDefinitionAccess().getCommaKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumerationTypeDefinition__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumerationTypeDefinition__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationTypeDefinition__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationTypeDefinitionAccess().getLiteralsAssignment_3_1()); }
(rule__EnumerationTypeDefinition__LiteralsAssignment_3_1)
{ after(grammarAccess.getEnumerationTypeDefinitionAccess().getLiteralsAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RecordTypeDefinition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RecordTypeDefinition__Group__0__Impl
	rule__RecordTypeDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RecordTypeDefinition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordTypeDefinitionAccess().getRecordKeyword_0()); }

	'record' 

{ after(grammarAccess.getRecordTypeDefinitionAccess().getRecordKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RecordTypeDefinition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RecordTypeDefinition__Group__1__Impl
	rule__RecordTypeDefinition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RecordTypeDefinition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordTypeDefinitionAccess().getLeftCurlyBracketKeyword_1()); }

	'{' 

{ after(grammarAccess.getRecordTypeDefinitionAccess().getLeftCurlyBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RecordTypeDefinition__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RecordTypeDefinition__Group__2__Impl
	rule__RecordTypeDefinition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RecordTypeDefinition__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordTypeDefinitionAccess().getFieldDeclarationsAssignment_2()); }
(rule__RecordTypeDefinition__FieldDeclarationsAssignment_2)
{ after(grammarAccess.getRecordTypeDefinitionAccess().getFieldDeclarationsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RecordTypeDefinition__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RecordTypeDefinition__Group__3__Impl
	rule__RecordTypeDefinition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__RecordTypeDefinition__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordTypeDefinitionAccess().getGroup_3()); }
(rule__RecordTypeDefinition__Group_3__0)*
{ after(grammarAccess.getRecordTypeDefinitionAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RecordTypeDefinition__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RecordTypeDefinition__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RecordTypeDefinition__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordTypeDefinitionAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getRecordTypeDefinitionAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__RecordTypeDefinition__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RecordTypeDefinition__Group_3__0__Impl
	rule__RecordTypeDefinition__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RecordTypeDefinition__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordTypeDefinitionAccess().getCommaKeyword_3_0()); }

	',' 

{ after(grammarAccess.getRecordTypeDefinitionAccess().getCommaKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RecordTypeDefinition__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RecordTypeDefinition__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RecordTypeDefinition__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordTypeDefinitionAccess().getFieldDeclarationsAssignment_3_1()); }
(rule__RecordTypeDefinition__FieldDeclarationsAssignment_3_1)
{ after(grammarAccess.getRecordTypeDefinitionAccess().getFieldDeclarationsAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TupleTypeDefinition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TupleTypeDefinition__Group__0__Impl
	rule__TupleTypeDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TupleTypeDefinition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleTypeDefinitionAccess().getTupleKeyword_0()); }

	'tuple' 

{ after(grammarAccess.getTupleTypeDefinitionAccess().getTupleKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TupleTypeDefinition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TupleTypeDefinition__Group__1__Impl
	rule__TupleTypeDefinition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TupleTypeDefinition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleTypeDefinitionAccess().getLeftCurlyBracketKeyword_1()); }

	'{' 

{ after(grammarAccess.getTupleTypeDefinitionAccess().getLeftCurlyBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TupleTypeDefinition__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TupleTypeDefinition__Group__2__Impl
	rule__TupleTypeDefinition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TupleTypeDefinition__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleTypeDefinitionAccess().getTypesAssignment_2()); }
(rule__TupleTypeDefinition__TypesAssignment_2)
{ after(grammarAccess.getTupleTypeDefinitionAccess().getTypesAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TupleTypeDefinition__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TupleTypeDefinition__Group__3__Impl
	rule__TupleTypeDefinition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__TupleTypeDefinition__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleTypeDefinitionAccess().getGroup_3()); }
(rule__TupleTypeDefinition__Group_3__0)*
{ after(grammarAccess.getTupleTypeDefinitionAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TupleTypeDefinition__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TupleTypeDefinition__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TupleTypeDefinition__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleTypeDefinitionAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getTupleTypeDefinitionAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__TupleTypeDefinition__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TupleTypeDefinition__Group_3__0__Impl
	rule__TupleTypeDefinition__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TupleTypeDefinition__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleTypeDefinitionAccess().getCommaKeyword_3_0()); }

	',' 

{ after(grammarAccess.getTupleTypeDefinitionAccess().getCommaKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TupleTypeDefinition__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TupleTypeDefinition__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TupleTypeDefinition__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleTypeDefinitionAccess().getTypesAssignment_3_1()); }
(rule__TupleTypeDefinition__TypesAssignment_3_1)
{ after(grammarAccess.getTupleTypeDefinitionAccess().getTypesAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SubrangeTypeDefinition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubrangeTypeDefinition__Group__0__Impl
	rule__SubrangeTypeDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SubrangeTypeDefinition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubrangeTypeDefinitionAccess().getSubrangeTypeDefinitionAction_0()); }
(

)
{ after(grammarAccess.getSubrangeTypeDefinitionAccess().getSubrangeTypeDefinitionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubrangeTypeDefinition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubrangeTypeDefinition__Group__1__Impl
	rule__SubrangeTypeDefinition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SubrangeTypeDefinition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubrangeTypeDefinitionAccess().getLeftSquareBracketKeyword_1()); }

	'[' 

{ after(grammarAccess.getSubrangeTypeDefinitionAccess().getLeftSquareBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubrangeTypeDefinition__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubrangeTypeDefinition__Group__2__Impl
	rule__SubrangeTypeDefinition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SubrangeTypeDefinition__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubrangeTypeDefinitionAccess().getAlternatives_2()); }
(rule__SubrangeTypeDefinition__Alternatives_2)
{ after(grammarAccess.getSubrangeTypeDefinitionAccess().getAlternatives_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubrangeTypeDefinition__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubrangeTypeDefinition__Group__3__Impl
	rule__SubrangeTypeDefinition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SubrangeTypeDefinition__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubrangeTypeDefinitionAccess().getToKeyword_3()); }

	'to' 

{ after(grammarAccess.getSubrangeTypeDefinitionAccess().getToKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubrangeTypeDefinition__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubrangeTypeDefinition__Group__4__Impl
	rule__SubrangeTypeDefinition__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__SubrangeTypeDefinition__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubrangeTypeDefinitionAccess().getAlternatives_4()); }
(rule__SubrangeTypeDefinition__Alternatives_4)
{ after(grammarAccess.getSubrangeTypeDefinitionAccess().getAlternatives_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubrangeTypeDefinition__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubrangeTypeDefinition__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubrangeTypeDefinition__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubrangeTypeDefinitionAccess().getRightSquareBracketKeyword_5()); }

	']' 

{ after(grammarAccess.getSubrangeTypeDefinitionAccess().getRightSquareBracketKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__SubrangeTypeDefinition__Group_2_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubrangeTypeDefinition__Group_2_0__0__Impl
	rule__SubrangeTypeDefinition__Group_2_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SubrangeTypeDefinition__Group_2_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubrangeTypeDefinitionAccess().getHyphenMinusKeyword_2_0_0()); }

	'-' 

{ after(grammarAccess.getSubrangeTypeDefinitionAccess().getHyphenMinusKeyword_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubrangeTypeDefinition__Group_2_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubrangeTypeDefinition__Group_2_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubrangeTypeDefinition__Group_2_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubrangeTypeDefinitionAccess().getInfKeyword_2_0_1()); }

	'inf' 

{ after(grammarAccess.getSubrangeTypeDefinitionAccess().getInfKeyword_2_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SubTypeDefinition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubTypeDefinition__Group__0__Impl
	rule__SubTypeDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SubTypeDefinition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubTypeDefinitionAccess().getLeftCurlyBracketKeyword_0()); }

	'{' 

{ after(grammarAccess.getSubTypeDefinitionAccess().getLeftCurlyBracketKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubTypeDefinition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubTypeDefinition__Group__1__Impl
	rule__SubTypeDefinition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SubTypeDefinition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubTypeDefinitionAccess().getParameterDeclarationAssignment_1()); }
(rule__SubTypeDefinition__ParameterDeclarationAssignment_1)
{ after(grammarAccess.getSubTypeDefinitionAccess().getParameterDeclarationAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubTypeDefinition__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubTypeDefinition__Group__2__Impl
	rule__SubTypeDefinition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SubTypeDefinition__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubTypeDefinitionAccess().getVerticalLineKeyword_2()); }

	'|' 

{ after(grammarAccess.getSubTypeDefinitionAccess().getVerticalLineKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubTypeDefinition__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubTypeDefinition__Group__3__Impl
	rule__SubTypeDefinition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SubTypeDefinition__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubTypeDefinitionAccess().getExpressionAssignment_3()); }
(rule__SubTypeDefinition__ExpressionAssignment_3)
{ after(grammarAccess.getSubTypeDefinitionAccess().getExpressionAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubTypeDefinition__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubTypeDefinition__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubTypeDefinition__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubTypeDefinitionAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getSubTypeDefinitionAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__FunctionTypeDefinition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionTypeDefinition__Group__0__Impl
	rule__FunctionTypeDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionTypeDefinition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionTypeDefinitionAccess().getFunctionKeyword_0()); }

	'function' 

{ after(grammarAccess.getFunctionTypeDefinitionAccess().getFunctionKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionTypeDefinition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionTypeDefinition__Group__1__Impl
	rule__FunctionTypeDefinition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionTypeDefinition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionTypeDefinitionAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getFunctionTypeDefinitionAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionTypeDefinition__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionTypeDefinition__Group__2__Impl
	rule__FunctionTypeDefinition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionTypeDefinition__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionTypeDefinitionAccess().getGroup_2()); }
(rule__FunctionTypeDefinition__Group_2__0)?
{ after(grammarAccess.getFunctionTypeDefinitionAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionTypeDefinition__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionTypeDefinition__Group__3__Impl
	rule__FunctionTypeDefinition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionTypeDefinition__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionTypeDefinitionAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getFunctionTypeDefinitionAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionTypeDefinition__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionTypeDefinition__Group__4__Impl
	rule__FunctionTypeDefinition__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionTypeDefinition__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionTypeDefinitionAccess().getColonKeyword_4()); }

	':' 

{ after(grammarAccess.getFunctionTypeDefinitionAccess().getColonKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionTypeDefinition__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionTypeDefinition__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionTypeDefinition__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionTypeDefinitionAccess().getReturnTypeAssignment_5()); }
(rule__FunctionTypeDefinition__ReturnTypeAssignment_5)
{ after(grammarAccess.getFunctionTypeDefinitionAccess().getReturnTypeAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__FunctionTypeDefinition__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionTypeDefinition__Group_2__0__Impl
	rule__FunctionTypeDefinition__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionTypeDefinition__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionTypeDefinitionAccess().getParameterTypesAssignment_2_0()); }
(rule__FunctionTypeDefinition__ParameterTypesAssignment_2_0)
{ after(grammarAccess.getFunctionTypeDefinitionAccess().getParameterTypesAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionTypeDefinition__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionTypeDefinition__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionTypeDefinition__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionTypeDefinitionAccess().getGroup_2_1()); }
(rule__FunctionTypeDefinition__Group_2_1__0)*
{ after(grammarAccess.getFunctionTypeDefinitionAccess().getGroup_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FunctionTypeDefinition__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionTypeDefinition__Group_2_1__0__Impl
	rule__FunctionTypeDefinition__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionTypeDefinition__Group_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionTypeDefinitionAccess().getCommaKeyword_2_1_0()); }

	',' 

{ after(grammarAccess.getFunctionTypeDefinitionAccess().getCommaKeyword_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionTypeDefinition__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionTypeDefinition__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionTypeDefinition__Group_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionTypeDefinitionAccess().getParameterTypesAssignment_2_1_1()); }
(rule__FunctionTypeDefinition__ParameterTypesAssignment_2_1_1)
{ after(grammarAccess.getFunctionTypeDefinitionAccess().getParameterTypesAssignment_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__IfThenElseExpression__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfThenElseExpression__Group_0__0__Impl
	rule__IfThenElseExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElseExpression__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfThenElseExpressionAccess().getIfThenElseExpressionAction_0_0()); }
(

)
{ after(grammarAccess.getIfThenElseExpressionAccess().getIfThenElseExpressionAction_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfThenElseExpression__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfThenElseExpression__Group_0__1__Impl
	rule__IfThenElseExpression__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElseExpression__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfThenElseExpressionAccess().getIfKeyword_0_1()); }

	'if' 

{ after(grammarAccess.getIfThenElseExpressionAccess().getIfKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfThenElseExpression__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfThenElseExpression__Group_0__2__Impl
	rule__IfThenElseExpression__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElseExpression__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfThenElseExpressionAccess().getConditionAssignment_0_2()); }
(rule__IfThenElseExpression__ConditionAssignment_0_2)
{ after(grammarAccess.getIfThenElseExpressionAccess().getConditionAssignment_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfThenElseExpression__Group_0__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfThenElseExpression__Group_0__3__Impl
	rule__IfThenElseExpression__Group_0__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElseExpression__Group_0__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfThenElseExpressionAccess().getThenKeyword_0_3()); }

	'then' 

{ after(grammarAccess.getIfThenElseExpressionAccess().getThenKeyword_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfThenElseExpression__Group_0__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfThenElseExpression__Group_0__4__Impl
	rule__IfThenElseExpression__Group_0__5
;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElseExpression__Group_0__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfThenElseExpressionAccess().getThenAssignment_0_4()); }
(rule__IfThenElseExpression__ThenAssignment_0_4)
{ after(grammarAccess.getIfThenElseExpressionAccess().getThenAssignment_0_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfThenElseExpression__Group_0__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfThenElseExpression__Group_0__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElseExpression__Group_0__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfThenElseExpressionAccess().getGroup_0_5()); }
(rule__IfThenElseExpression__Group_0_5__0)
{ after(grammarAccess.getIfThenElseExpressionAccess().getGroup_0_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__IfThenElseExpression__Group_0_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfThenElseExpression__Group_0_5__0__Impl
	rule__IfThenElseExpression__Group_0_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElseExpression__Group_0_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfThenElseExpressionAccess().getElseKeyword_0_5_0()); }
(
	'else' 
)
{ after(grammarAccess.getIfThenElseExpressionAccess().getElseKeyword_0_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfThenElseExpression__Group_0_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfThenElseExpression__Group_0_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElseExpression__Group_0_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfThenElseExpressionAccess().getElseAssignment_0_5_1()); }
(rule__IfThenElseExpression__ElseAssignment_0_5_1)
{ after(grammarAccess.getIfThenElseExpressionAccess().getElseAssignment_0_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EqualExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualExpression__Group__0__Impl
	rule__EqualExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualExpressionAccess().getImplyExpressionParserRuleCall_0()); }
	ruleImplyExpression
{ after(grammarAccess.getEqualExpressionAccess().getImplyExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EqualExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualExpressionAccess().getGroup_1()); }
(rule__EqualExpression__Group_1__0)?
{ after(grammarAccess.getEqualExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EqualExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualExpression__Group_1__0__Impl
	rule__EqualExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualExpressionAccess().getEqualExpressionLeftOperandAction_1_0()); }
(

)
{ after(grammarAccess.getEqualExpressionAccess().getEqualExpressionLeftOperandAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EqualExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualExpression__Group_1__1__Impl
	rule__EqualExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualExpressionAccess().getEqualKeyword_1_1()); }

	'equal' 

{ after(grammarAccess.getEqualExpressionAccess().getEqualKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EqualExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualExpressionAccess().getRightOperandAssignment_1_2()); }
(rule__EqualExpression__RightOperandAssignment_1_2)
{ after(grammarAccess.getEqualExpressionAccess().getRightOperandAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ImplyExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ImplyExpression__Group__0__Impl
	rule__ImplyExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ImplyExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImplyExpressionAccess().getOrExpressionParserRuleCall_0()); }
	ruleOrExpression
{ after(grammarAccess.getImplyExpressionAccess().getOrExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ImplyExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ImplyExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ImplyExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImplyExpressionAccess().getGroup_1()); }
(rule__ImplyExpression__Group_1__0)?
{ after(grammarAccess.getImplyExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ImplyExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ImplyExpression__Group_1__0__Impl
	rule__ImplyExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ImplyExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImplyExpressionAccess().getImplyExpressionLeftOperandAction_1_0()); }
(

)
{ after(grammarAccess.getImplyExpressionAccess().getImplyExpressionLeftOperandAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ImplyExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ImplyExpression__Group_1__1__Impl
	rule__ImplyExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ImplyExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImplyExpressionAccess().getImplyKeyword_1_1()); }

	'imply' 

{ after(grammarAccess.getImplyExpressionAccess().getImplyKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ImplyExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ImplyExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ImplyExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImplyExpressionAccess().getRightOperandAssignment_1_2()); }
(rule__ImplyExpression__RightOperandAssignment_1_2)
{ after(grammarAccess.getImplyExpressionAccess().getRightOperandAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__OrExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group__0__Impl
	rule__OrExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getAndExpressionParserRuleCall_0()); }
	ruleAndExpression
{ after(grammarAccess.getOrExpressionAccess().getAndExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getGroup_1()); }
(rule__OrExpression__Group_1__0)?
{ after(grammarAccess.getOrExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OrExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group_1__0__Impl
	rule__OrExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getOrExpressionOperandsAction_1_0()); }
(

)
{ after(grammarAccess.getOrExpressionAccess().getOrExpressionOperandsAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getOrExpressionAccess().getGroup_1_1()); }
(rule__OrExpression__Group_1_1__0)
{ after(grammarAccess.getOrExpressionAccess().getGroup_1_1()); }
)
(
{ before(grammarAccess.getOrExpressionAccess().getGroup_1_1()); }
(rule__OrExpression__Group_1_1__0)*
{ after(grammarAccess.getOrExpressionAccess().getGroup_1_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OrExpression__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group_1_1__0__Impl
	rule__OrExpression__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getOrKeyword_1_1_0()); }

	'or' 

{ after(grammarAccess.getOrExpressionAccess().getOrKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getOperandsAssignment_1_1_1()); }
(rule__OrExpression__OperandsAssignment_1_1_1)
{ after(grammarAccess.getOrExpressionAccess().getOperandsAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AndExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group__0__Impl
	rule__AndExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getReleaseExpressionParserRuleCall_0()); }
	ruleReleaseExpression
{ after(grammarAccess.getAndExpressionAccess().getReleaseExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getGroup_1()); }
(rule__AndExpression__Group_1__0)?
{ after(grammarAccess.getAndExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AndExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group_1__0__Impl
	rule__AndExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getAndExpressionOperandsAction_1_0()); }
(

)
{ after(grammarAccess.getAndExpressionAccess().getAndExpressionOperandsAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getAndExpressionAccess().getGroup_1_1()); }
(rule__AndExpression__Group_1_1__0)
{ after(grammarAccess.getAndExpressionAccess().getGroup_1_1()); }
)
(
{ before(grammarAccess.getAndExpressionAccess().getGroup_1_1()); }
(rule__AndExpression__Group_1_1__0)*
{ after(grammarAccess.getAndExpressionAccess().getGroup_1_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AndExpression__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group_1_1__0__Impl
	rule__AndExpression__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getAndKeyword_1_1_0()); }

	'and' 

{ after(grammarAccess.getAndExpressionAccess().getAndKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getOperandsAssignment_1_1_1()); }
(rule__AndExpression__OperandsAssignment_1_1_1)
{ after(grammarAccess.getAndExpressionAccess().getOperandsAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ReleaseExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReleaseExpression__Group__0__Impl
	rule__ReleaseExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ReleaseExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReleaseExpressionAccess().getUntilExpressionParserRuleCall_0()); }
	ruleUntilExpression
{ after(grammarAccess.getReleaseExpressionAccess().getUntilExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReleaseExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReleaseExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ReleaseExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReleaseExpressionAccess().getGroup_1()); }
(rule__ReleaseExpression__Group_1__0)*
{ after(grammarAccess.getReleaseExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ReleaseExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReleaseExpression__Group_1__0__Impl
	rule__ReleaseExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ReleaseExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReleaseExpressionAccess().getReleaseExpressionLeftOperandAction_1_0()); }
(

)
{ after(grammarAccess.getReleaseExpressionAccess().getReleaseExpressionLeftOperandAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReleaseExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReleaseExpression__Group_1__1__Impl
	rule__ReleaseExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ReleaseExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReleaseExpressionAccess().getRKeyword_1_1()); }

	'R' 

{ after(grammarAccess.getReleaseExpressionAccess().getRKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReleaseExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReleaseExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ReleaseExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReleaseExpressionAccess().getRightOperandAssignment_1_2()); }
(rule__ReleaseExpression__RightOperandAssignment_1_2)
{ after(grammarAccess.getReleaseExpressionAccess().getRightOperandAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__UntilExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UntilExpression__Group__0__Impl
	rule__UntilExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UntilExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUntilExpressionAccess().getUnaryLogicExpressionParserRuleCall_0()); }
	ruleUnaryLogicExpression
{ after(grammarAccess.getUntilExpressionAccess().getUnaryLogicExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UntilExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UntilExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UntilExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUntilExpressionAccess().getGroup_1()); }
(rule__UntilExpression__Group_1__0)*
{ after(grammarAccess.getUntilExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UntilExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UntilExpression__Group_1__0__Impl
	rule__UntilExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UntilExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUntilExpressionAccess().getUntilExpressionLeftOperandAction_1_0()); }
(

)
{ after(grammarAccess.getUntilExpressionAccess().getUntilExpressionLeftOperandAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UntilExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UntilExpression__Group_1__1__Impl
	rule__UntilExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UntilExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUntilExpressionAccess().getUKeyword_1_1()); }

	'U' 

{ after(grammarAccess.getUntilExpressionAccess().getUKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UntilExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UntilExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UntilExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUntilExpressionAccess().getRightOperandAssignment_1_2()); }
(rule__UntilExpression__RightOperandAssignment_1_2)
{ after(grammarAccess.getUntilExpressionAccess().getRightOperandAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__NotExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NotExpression__Group__0__Impl
	rule__NotExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NotExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotExpressionAccess().getNotExpressionAction_0()); }
(

)
{ after(grammarAccess.getNotExpressionAccess().getNotExpressionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NotExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NotExpression__Group__1__Impl
	rule__NotExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NotExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotExpressionAccess().getNotKeyword_1()); }
(
	'not' 
)
{ after(grammarAccess.getNotExpressionAccess().getNotKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NotExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NotExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NotExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotExpressionAccess().getOperandAssignment_2()); }
(rule__NotExpression__OperandAssignment_2)
{ after(grammarAccess.getNotExpressionAccess().getOperandAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ForallExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForallExpression__Group__0__Impl
	rule__ForallExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ForallExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForallExpressionAccess().getForallExpressionAction_0()); }
(

)
{ after(grammarAccess.getForallExpressionAccess().getForallExpressionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForallExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForallExpression__Group__1__Impl
	rule__ForallExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ForallExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForallExpressionAccess().getForallKeyword_1()); }
(
	'forall' 
)
{ after(grammarAccess.getForallExpressionAccess().getForallKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForallExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForallExpression__Group__2__Impl
	rule__ForallExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ForallExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForallExpressionAccess().getLeftParenthesisKeyword_2()); }

	'(' 

{ after(grammarAccess.getForallExpressionAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForallExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForallExpression__Group__3__Impl
	rule__ForallExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ForallExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForallExpressionAccess().getGroup_3()); }
(rule__ForallExpression__Group_3__0)?
{ after(grammarAccess.getForallExpressionAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForallExpression__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForallExpression__Group__4__Impl
	rule__ForallExpression__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ForallExpression__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForallExpressionAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getForallExpressionAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForallExpression__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForallExpression__Group__5__Impl
	rule__ForallExpression__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__ForallExpression__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForallExpressionAccess().getColonKeyword_5()); }

	':' 

{ after(grammarAccess.getForallExpressionAccess().getColonKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForallExpression__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForallExpression__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ForallExpression__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForallExpressionAccess().getOperandAssignment_6()); }
(rule__ForallExpression__OperandAssignment_6)
{ after(grammarAccess.getForallExpressionAccess().getOperandAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__ForallExpression__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForallExpression__Group_3__0__Impl
	rule__ForallExpression__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ForallExpression__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForallExpressionAccess().getParameterDeclarationsAssignment_3_0()); }
(rule__ForallExpression__ParameterDeclarationsAssignment_3_0)
{ after(grammarAccess.getForallExpressionAccess().getParameterDeclarationsAssignment_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForallExpression__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForallExpression__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ForallExpression__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForallExpressionAccess().getGroup_3_1()); }
(rule__ForallExpression__Group_3_1__0)*
{ after(grammarAccess.getForallExpressionAccess().getGroup_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ForallExpression__Group_3_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForallExpression__Group_3_1__0__Impl
	rule__ForallExpression__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ForallExpression__Group_3_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForallExpressionAccess().getCommaKeyword_3_1_0()); }

	',' 

{ after(grammarAccess.getForallExpressionAccess().getCommaKeyword_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForallExpression__Group_3_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForallExpression__Group_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ForallExpression__Group_3_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForallExpressionAccess().getParameterDeclarationsAssignment_3_1_1()); }
(rule__ForallExpression__ParameterDeclarationsAssignment_3_1_1)
{ after(grammarAccess.getForallExpressionAccess().getParameterDeclarationsAssignment_3_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ExistsExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExistsExpression__Group__0__Impl
	rule__ExistsExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExistsExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExistsExpressionAccess().getExistsExpressionAction_0()); }
(

)
{ after(grammarAccess.getExistsExpressionAccess().getExistsExpressionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExistsExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExistsExpression__Group__1__Impl
	rule__ExistsExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExistsExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExistsExpressionAccess().getExistsKeyword_1()); }
(
	'exists' 
)
{ after(grammarAccess.getExistsExpressionAccess().getExistsKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExistsExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExistsExpression__Group__2__Impl
	rule__ExistsExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ExistsExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExistsExpressionAccess().getLeftParenthesisKeyword_2()); }

	'(' 

{ after(grammarAccess.getExistsExpressionAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExistsExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExistsExpression__Group__3__Impl
	rule__ExistsExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ExistsExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExistsExpressionAccess().getGroup_3()); }
(rule__ExistsExpression__Group_3__0)?
{ after(grammarAccess.getExistsExpressionAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExistsExpression__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExistsExpression__Group__4__Impl
	rule__ExistsExpression__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ExistsExpression__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExistsExpressionAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getExistsExpressionAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExistsExpression__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExistsExpression__Group__5__Impl
	rule__ExistsExpression__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__ExistsExpression__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExistsExpressionAccess().getColonKeyword_5()); }

	':' 

{ after(grammarAccess.getExistsExpressionAccess().getColonKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExistsExpression__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExistsExpression__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExistsExpression__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExistsExpressionAccess().getOperandAssignment_6()); }
(rule__ExistsExpression__OperandAssignment_6)
{ after(grammarAccess.getExistsExpressionAccess().getOperandAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__ExistsExpression__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExistsExpression__Group_3__0__Impl
	rule__ExistsExpression__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExistsExpression__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExistsExpressionAccess().getParameterDeclarationsAssignment_3_0()); }
(rule__ExistsExpression__ParameterDeclarationsAssignment_3_0)
{ after(grammarAccess.getExistsExpressionAccess().getParameterDeclarationsAssignment_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExistsExpression__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExistsExpression__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExistsExpression__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExistsExpressionAccess().getGroup_3_1()); }
(rule__ExistsExpression__Group_3_1__0)*
{ after(grammarAccess.getExistsExpressionAccess().getGroup_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ExistsExpression__Group_3_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExistsExpression__Group_3_1__0__Impl
	rule__ExistsExpression__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExistsExpression__Group_3_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExistsExpressionAccess().getCommaKeyword_3_1_0()); }

	',' 

{ after(grammarAccess.getExistsExpressionAccess().getCommaKeyword_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExistsExpression__Group_3_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExistsExpression__Group_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExistsExpression__Group_3_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExistsExpressionAccess().getParameterDeclarationsAssignment_3_1_1()); }
(rule__ExistsExpression__ParameterDeclarationsAssignment_3_1_1)
{ after(grammarAccess.getExistsExpressionAccess().getParameterDeclarationsAssignment_3_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FunctionLiteralExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionLiteralExpression__Group__0__Impl
	rule__FunctionLiteralExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionLiteralExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionLiteralExpressionAccess().getFunctionLiteralExpressionAction_0()); }
(

)
{ after(grammarAccess.getFunctionLiteralExpressionAccess().getFunctionLiteralExpressionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionLiteralExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionLiteralExpression__Group__1__Impl
	rule__FunctionLiteralExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionLiteralExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionLiteralExpressionAccess().getFunctionKeyword_1()); }
(
	'function' 
)
{ after(grammarAccess.getFunctionLiteralExpressionAccess().getFunctionKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionLiteralExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionLiteralExpression__Group__2__Impl
	rule__FunctionLiteralExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionLiteralExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionLiteralExpressionAccess().getLeftParenthesisKeyword_2()); }

	'(' 

{ after(grammarAccess.getFunctionLiteralExpressionAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionLiteralExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionLiteralExpression__Group__3__Impl
	rule__FunctionLiteralExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionLiteralExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionLiteralExpressionAccess().getGroup_3()); }
(rule__FunctionLiteralExpression__Group_3__0)?
{ after(grammarAccess.getFunctionLiteralExpressionAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionLiteralExpression__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionLiteralExpression__Group__4__Impl
	rule__FunctionLiteralExpression__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionLiteralExpression__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionLiteralExpressionAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getFunctionLiteralExpressionAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionLiteralExpression__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionLiteralExpression__Group__5__Impl
	rule__FunctionLiteralExpression__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionLiteralExpression__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionLiteralExpressionAccess().getColonKeyword_5()); }

	':' 

{ after(grammarAccess.getFunctionLiteralExpressionAccess().getColonKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionLiteralExpression__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionLiteralExpression__Group__6__Impl
	rule__FunctionLiteralExpression__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionLiteralExpression__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionLiteralExpressionAccess().getReturnTypeAssignment_6()); }
(rule__FunctionLiteralExpression__ReturnTypeAssignment_6)
{ after(grammarAccess.getFunctionLiteralExpressionAccess().getReturnTypeAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionLiteralExpression__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionLiteralExpression__Group__7__Impl
	rule__FunctionLiteralExpression__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionLiteralExpression__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionLiteralExpressionAccess().getColonEqualsSignKeyword_7()); }

	':=' 

{ after(grammarAccess.getFunctionLiteralExpressionAccess().getColonEqualsSignKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionLiteralExpression__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionLiteralExpression__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionLiteralExpression__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionLiteralExpressionAccess().getOperandAssignment_8()); }
(rule__FunctionLiteralExpression__OperandAssignment_8)
{ after(grammarAccess.getFunctionLiteralExpressionAccess().getOperandAssignment_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}




















rule__FunctionLiteralExpression__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionLiteralExpression__Group_3__0__Impl
	rule__FunctionLiteralExpression__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionLiteralExpression__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionLiteralExpressionAccess().getParameterDeclarationsAssignment_3_0()); }
(rule__FunctionLiteralExpression__ParameterDeclarationsAssignment_3_0)
{ after(grammarAccess.getFunctionLiteralExpressionAccess().getParameterDeclarationsAssignment_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionLiteralExpression__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionLiteralExpression__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionLiteralExpression__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionLiteralExpressionAccess().getGroup_3_1()); }
(rule__FunctionLiteralExpression__Group_3_1__0)*
{ after(grammarAccess.getFunctionLiteralExpressionAccess().getGroup_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FunctionLiteralExpression__Group_3_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionLiteralExpression__Group_3_1__0__Impl
	rule__FunctionLiteralExpression__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionLiteralExpression__Group_3_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionLiteralExpressionAccess().getCommaKeyword_3_1_0()); }

	',' 

{ after(grammarAccess.getFunctionLiteralExpressionAccess().getCommaKeyword_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionLiteralExpression__Group_3_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionLiteralExpression__Group_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionLiteralExpression__Group_3_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionLiteralExpressionAccess().getParameterDeclarationsAssignment_3_1_1()); }
(rule__FunctionLiteralExpression__ParameterDeclarationsAssignment_3_1_1)
{ after(grammarAccess.getFunctionLiteralExpressionAccess().getParameterDeclarationsAssignment_3_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__GloballyExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GloballyExpression__Group__0__Impl
	rule__GloballyExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GloballyExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGloballyExpressionAccess().getGloballyExpressionAction_0()); }
(

)
{ after(grammarAccess.getGloballyExpressionAccess().getGloballyExpressionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GloballyExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GloballyExpression__Group__1__Impl
	rule__GloballyExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__GloballyExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGloballyExpressionAccess().getGKeyword_1()); }
(
	'G' 
)
{ after(grammarAccess.getGloballyExpressionAccess().getGKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GloballyExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GloballyExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GloballyExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGloballyExpressionAccess().getOperandAssignment_2()); }
(rule__GloballyExpression__OperandAssignment_2)
{ after(grammarAccess.getGloballyExpressionAccess().getOperandAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__FinallyExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FinallyExpression__Group__0__Impl
	rule__FinallyExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FinallyExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFinallyExpressionAccess().getFinallyExpressionAction_0()); }
(

)
{ after(grammarAccess.getFinallyExpressionAccess().getFinallyExpressionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FinallyExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FinallyExpression__Group__1__Impl
	rule__FinallyExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FinallyExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFinallyExpressionAccess().getFKeyword_1()); }
(
	'F' 
)
{ after(grammarAccess.getFinallyExpressionAccess().getFKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FinallyExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FinallyExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FinallyExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFinallyExpressionAccess().getOperandAssignment_2()); }
(rule__FinallyExpression__OperandAssignment_2)
{ after(grammarAccess.getFinallyExpressionAccess().getOperandAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__NextExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NextExpression__Group__0__Impl
	rule__NextExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NextExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNextExpressionAccess().getNextExpressionAction_0()); }
(

)
{ after(grammarAccess.getNextExpressionAccess().getNextExpressionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NextExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NextExpression__Group__1__Impl
	rule__NextExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NextExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNextExpressionAccess().getXKeyword_1()); }
(
	'X' 
)
{ after(grammarAccess.getNextExpressionAccess().getXKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NextExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NextExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NextExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNextExpressionAccess().getOperandAssignment_2()); }
(rule__NextExpression__OperandAssignment_2)
{ after(grammarAccess.getNextExpressionAccess().getOperandAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__TemporalForallExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TemporalForallExpression__Group__0__Impl
	rule__TemporalForallExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalForallExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemporalForallExpressionAccess().getTemporalForallExpressionAction_0()); }
(

)
{ after(grammarAccess.getTemporalForallExpressionAccess().getTemporalForallExpressionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TemporalForallExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TemporalForallExpression__Group__1__Impl
	rule__TemporalForallExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalForallExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemporalForallExpressionAccess().getAKeyword_1()); }
(
	'A' 
)
{ after(grammarAccess.getTemporalForallExpressionAccess().getAKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TemporalForallExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TemporalForallExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalForallExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemporalForallExpressionAccess().getOperandAssignment_2()); }
(rule__TemporalForallExpression__OperandAssignment_2)
{ after(grammarAccess.getTemporalForallExpressionAccess().getOperandAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__TemporalExistsExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TemporalExistsExpression__Group__0__Impl
	rule__TemporalExistsExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalExistsExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemporalExistsExpressionAccess().getTemporalExistsExpressionAction_0()); }
(

)
{ after(grammarAccess.getTemporalExistsExpressionAccess().getTemporalExistsExpressionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TemporalExistsExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TemporalExistsExpression__Group__1__Impl
	rule__TemporalExistsExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalExistsExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemporalExistsExpressionAccess().getEKeyword_1()); }
(
	'E' 
)
{ after(grammarAccess.getTemporalExistsExpressionAccess().getEKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TemporalExistsExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TemporalExistsExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalExistsExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemporalExistsExpressionAccess().getOperandAssignment_2()); }
(rule__TemporalExistsExpression__OperandAssignment_2)
{ after(grammarAccess.getTemporalExistsExpressionAccess().getOperandAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__LetExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LetExpression__Group__0__Impl
	rule__LetExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LetExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetExpressionAccess().getLetExpressionAction_0()); }
(

)
{ after(grammarAccess.getLetExpressionAccess().getLetExpressionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LetExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LetExpression__Group__1__Impl
	rule__LetExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LetExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetExpressionAccess().getLetKeyword_1()); }

	'let' 

{ after(grammarAccess.getLetExpressionAccess().getLetKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LetExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LetExpression__Group__2__Impl
	rule__LetExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LetExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetExpressionAccess().getLeftParenthesisKeyword_2()); }

	'(' 

{ after(grammarAccess.getLetExpressionAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LetExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LetExpression__Group__3__Impl
	rule__LetExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__LetExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetExpressionAccess().getLetDeclarationsAssignment_3()); }
(rule__LetExpression__LetDeclarationsAssignment_3)
{ after(grammarAccess.getLetExpressionAccess().getLetDeclarationsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LetExpression__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LetExpression__Group__4__Impl
	rule__LetExpression__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__LetExpression__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetExpressionAccess().getGroup_4()); }
(rule__LetExpression__Group_4__0)*
{ after(grammarAccess.getLetExpressionAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LetExpression__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LetExpression__Group__5__Impl
	rule__LetExpression__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__LetExpression__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetExpressionAccess().getRightParenthesisKeyword_5()); }

	')' 

{ after(grammarAccess.getLetExpressionAccess().getRightParenthesisKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LetExpression__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LetExpression__Group__6__Impl
	rule__LetExpression__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__LetExpression__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetExpressionAccess().getInKeyword_6()); }

	'in' 

{ after(grammarAccess.getLetExpressionAccess().getInKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LetExpression__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LetExpression__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LetExpression__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetExpressionAccess().getExpressionAssignment_7()); }
(rule__LetExpression__ExpressionAssignment_7)
{ after(grammarAccess.getLetExpressionAccess().getExpressionAssignment_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


















rule__LetExpression__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LetExpression__Group_4__0__Impl
	rule__LetExpression__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LetExpression__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetExpressionAccess().getCommaKeyword_4_0()); }

	',' 

{ after(grammarAccess.getLetExpressionAccess().getCommaKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LetExpression__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LetExpression__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LetExpression__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetExpressionAccess().getLetDeclarationsAssignment_4_1()); }
(rule__LetExpression__LetDeclarationsAssignment_4_1)
{ after(grammarAccess.getLetExpressionAccess().getLetDeclarationsAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__InExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InExpression__Group__0__Impl
	rule__InExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInExpressionAccess().getEquivalenceExpressionParserRuleCall_0()); }
	ruleEquivalenceExpression
{ after(grammarAccess.getInExpressionAccess().getEquivalenceExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInExpressionAccess().getGroup_1()); }
(rule__InExpression__Group_1__0)?
{ after(grammarAccess.getInExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__InExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InExpression__Group_1__0__Impl
	rule__InExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInExpressionAccess().getInExpressionOperandAction_1_0()); }
(

)
{ after(grammarAccess.getInExpressionAccess().getInExpressionOperandAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InExpression__Group_1__1__Impl
	rule__InExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__InExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInExpressionAccess().getInKeyword_1_1()); }

	'in' 

{ after(grammarAccess.getInExpressionAccess().getInKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInExpressionAccess().getTypeAssignment_1_2()); }
(rule__InExpression__TypeAssignment_1_2)
{ after(grammarAccess.getInExpressionAccess().getTypeAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__EquivalenceExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EquivalenceExpression__Group__0__Impl
	rule__EquivalenceExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EquivalenceExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEquivalenceExpressionAccess().getComparisionExpressionParserRuleCall_0()); }
	ruleComparisionExpression
{ after(grammarAccess.getEquivalenceExpressionAccess().getComparisionExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EquivalenceExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EquivalenceExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EquivalenceExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEquivalenceExpressionAccess().getAlternatives_1()); }
(rule__EquivalenceExpression__Alternatives_1)?
{ after(grammarAccess.getEquivalenceExpressionAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EquivalenceExpression__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EquivalenceExpression__Group_1_0__0__Impl
	rule__EquivalenceExpression__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EquivalenceExpression__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEquivalenceExpressionAccess().getEqualityExpressionLeftOperandAction_1_0_0()); }
(

)
{ after(grammarAccess.getEquivalenceExpressionAccess().getEqualityExpressionLeftOperandAction_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EquivalenceExpression__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EquivalenceExpression__Group_1_0__1__Impl
	rule__EquivalenceExpression__Group_1_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EquivalenceExpression__Group_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEquivalenceExpressionAccess().getEqualsSignKeyword_1_0_1()); }

	'=' 

{ after(grammarAccess.getEquivalenceExpressionAccess().getEqualsSignKeyword_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EquivalenceExpression__Group_1_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EquivalenceExpression__Group_1_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EquivalenceExpression__Group_1_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEquivalenceExpressionAccess().getRightOperandAssignment_1_0_2()); }
(rule__EquivalenceExpression__RightOperandAssignment_1_0_2)
{ after(grammarAccess.getEquivalenceExpressionAccess().getRightOperandAssignment_1_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__EquivalenceExpression__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EquivalenceExpression__Group_1_1__0__Impl
	rule__EquivalenceExpression__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EquivalenceExpression__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEquivalenceExpressionAccess().getInequalityExpressionLeftOperandAction_1_1_0()); }
(

)
{ after(grammarAccess.getEquivalenceExpressionAccess().getInequalityExpressionLeftOperandAction_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EquivalenceExpression__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EquivalenceExpression__Group_1_1__1__Impl
	rule__EquivalenceExpression__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EquivalenceExpression__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEquivalenceExpressionAccess().getSolidusEqualsSignKeyword_1_1_1()); }

	'/=' 

{ after(grammarAccess.getEquivalenceExpressionAccess().getSolidusEqualsSignKeyword_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EquivalenceExpression__Group_1_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EquivalenceExpression__Group_1_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EquivalenceExpression__Group_1_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEquivalenceExpressionAccess().getRightOperandAssignment_1_1_2()); }
(rule__EquivalenceExpression__RightOperandAssignment_1_1_2)
{ after(grammarAccess.getEquivalenceExpressionAccess().getRightOperandAssignment_1_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ComparisionExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComparisionExpression__Group__0__Impl
	rule__ComparisionExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisionExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisionExpressionAccess().getAdditiveExpressionParserRuleCall_0()); }
	ruleAdditiveExpression
{ after(grammarAccess.getComparisionExpressionAccess().getAdditiveExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComparisionExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComparisionExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisionExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisionExpressionAccess().getGroup_1()); }
(rule__ComparisionExpression__Group_1__0)*
{ after(grammarAccess.getComparisionExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ComparisionExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComparisionExpression__Group_1__0__Impl
	rule__ComparisionExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisionExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisionExpressionAccess().getAlternatives_1_0()); }
(rule__ComparisionExpression__Alternatives_1_0)
{ after(grammarAccess.getComparisionExpressionAccess().getAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComparisionExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComparisionExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisionExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisionExpressionAccess().getRightOperandAssignment_1_1()); }
(rule__ComparisionExpression__RightOperandAssignment_1_1)
{ after(grammarAccess.getComparisionExpressionAccess().getRightOperandAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ComparisionExpression__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComparisionExpression__Group_1_0_0__0__Impl
	rule__ComparisionExpression__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisionExpression__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisionExpressionAccess().getGreaterExpressionLeftOperandAction_1_0_0_0()); }
(

)
{ after(grammarAccess.getComparisionExpressionAccess().getGreaterExpressionLeftOperandAction_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComparisionExpression__Group_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComparisionExpression__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisionExpression__Group_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisionExpressionAccess().getGreaterThanSignKeyword_1_0_0_1()); }

	'>' 

{ after(grammarAccess.getComparisionExpressionAccess().getGreaterThanSignKeyword_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ComparisionExpression__Group_1_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComparisionExpression__Group_1_0_1__0__Impl
	rule__ComparisionExpression__Group_1_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisionExpression__Group_1_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisionExpressionAccess().getGreaterEqualExpressionLeftOperandAction_1_0_1_0()); }
(

)
{ after(grammarAccess.getComparisionExpressionAccess().getGreaterEqualExpressionLeftOperandAction_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComparisionExpression__Group_1_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComparisionExpression__Group_1_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisionExpression__Group_1_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisionExpressionAccess().getGreaterThanSignEqualsSignKeyword_1_0_1_1()); }

	'>=' 

{ after(grammarAccess.getComparisionExpressionAccess().getGreaterThanSignEqualsSignKeyword_1_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ComparisionExpression__Group_1_0_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComparisionExpression__Group_1_0_2__0__Impl
	rule__ComparisionExpression__Group_1_0_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisionExpression__Group_1_0_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisionExpressionAccess().getLessExpressionLeftOperandAction_1_0_2_0()); }
(

)
{ after(grammarAccess.getComparisionExpressionAccess().getLessExpressionLeftOperandAction_1_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComparisionExpression__Group_1_0_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComparisionExpression__Group_1_0_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisionExpression__Group_1_0_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisionExpressionAccess().getLessThanSignKeyword_1_0_2_1()); }

	'<' 

{ after(grammarAccess.getComparisionExpressionAccess().getLessThanSignKeyword_1_0_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ComparisionExpression__Group_1_0_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComparisionExpression__Group_1_0_3__0__Impl
	rule__ComparisionExpression__Group_1_0_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisionExpression__Group_1_0_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisionExpressionAccess().getLessEqualExpressionLeftOperandAction_1_0_3_0()); }
(

)
{ after(grammarAccess.getComparisionExpressionAccess().getLessEqualExpressionLeftOperandAction_1_0_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComparisionExpression__Group_1_0_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComparisionExpression__Group_1_0_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisionExpression__Group_1_0_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisionExpressionAccess().getLessThanSignEqualsSignKeyword_1_0_3_1()); }

	'<=' 

{ after(grammarAccess.getComparisionExpressionAccess().getLessThanSignEqualsSignKeyword_1_0_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AdditiveExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group__0__Impl
	rule__AdditiveExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0()); }
	ruleMultiplicativeExpression
{ after(grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getAlternatives_1()); }
(rule__AdditiveExpression__Alternatives_1)*
{ after(grammarAccess.getAdditiveExpressionAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AdditiveExpression__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group_1_0__0__Impl
	rule__AdditiveExpression__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getAddExpressionOperandsAction_1_0_0()); }
(

)
{ after(grammarAccess.getAdditiveExpressionAccess().getAddExpressionOperandsAction_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpression__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getAdditiveExpressionAccess().getGroup_1_0_1()); }
(rule__AdditiveExpression__Group_1_0_1__0)
{ after(grammarAccess.getAdditiveExpressionAccess().getGroup_1_0_1()); }
)
(
{ before(grammarAccess.getAdditiveExpressionAccess().getGroup_1_0_1()); }
(rule__AdditiveExpression__Group_1_0_1__0)*
{ after(grammarAccess.getAdditiveExpressionAccess().getGroup_1_0_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AdditiveExpression__Group_1_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group_1_0_1__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_1_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getGroup_1_0_1_0()); }
(rule__AdditiveExpression__Group_1_0_1_0__0)
{ after(grammarAccess.getAdditiveExpressionAccess().getGroup_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__AdditiveExpression__Group_1_0_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group_1_0_1_0__0__Impl
	rule__AdditiveExpression__Group_1_0_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_1_0_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getPlusSignKeyword_1_0_1_0_0()); }

	'+' 

{ after(grammarAccess.getAdditiveExpressionAccess().getPlusSignKeyword_1_0_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpression__Group_1_0_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group_1_0_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_1_0_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getOperandsAssignment_1_0_1_0_1()); }
(rule__AdditiveExpression__OperandsAssignment_1_0_1_0_1)
{ after(grammarAccess.getAdditiveExpressionAccess().getOperandsAssignment_1_0_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AdditiveExpression__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group_1_1__0__Impl
	rule__AdditiveExpression__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getSubtractExpressionLeftOperandAction_1_1_0()); }
(

)
{ after(grammarAccess.getAdditiveExpressionAccess().getSubtractExpressionLeftOperandAction_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpression__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group_1_1__1__Impl
	rule__AdditiveExpression__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getHyphenMinusKeyword_1_1_1()); }

	'-' 

{ after(grammarAccess.getAdditiveExpressionAccess().getHyphenMinusKeyword_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpression__Group_1_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group_1_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_1_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getRightOperandAssignment_1_1_2()); }
(rule__AdditiveExpression__RightOperandAssignment_1_1_2)
{ after(grammarAccess.getAdditiveExpressionAccess().getRightOperandAssignment_1_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__MultiplicativeExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group__0__Impl
	rule__MultiplicativeExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getSignumExpressionParserRuleCall_0()); }
	ruleSignumExpression
{ after(grammarAccess.getMultiplicativeExpressionAccess().getSignumExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getAlternatives_1()); }
(rule__MultiplicativeExpression__Alternatives_1)*
{ after(grammarAccess.getMultiplicativeExpressionAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MultiplicativeExpression__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group_1_0__0__Impl
	rule__MultiplicativeExpression__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getMultiplyExpressionOperandsAction_1_0_0()); }
(

)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getMultiplyExpressionOperandsAction_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1_0_1()); }
(rule__MultiplicativeExpression__Group_1_0_1__0)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1_0_1()); }
)
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1_0_1()); }
(rule__MultiplicativeExpression__Group_1_0_1__0)*
{ after(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1_0_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MultiplicativeExpression__Group_1_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group_1_0_1__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1_0_1_0()); }
(rule__MultiplicativeExpression__Group_1_0_1_0__0)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__MultiplicativeExpression__Group_1_0_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group_1_0_1_0__0__Impl
	rule__MultiplicativeExpression__Group_1_0_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1_0_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getAsteriskKeyword_1_0_1_0_0()); }

	'*' 

{ after(grammarAccess.getMultiplicativeExpressionAccess().getAsteriskKeyword_1_0_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group_1_0_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group_1_0_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1_0_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getOperandsAssignment_1_0_1_0_1()); }
(rule__MultiplicativeExpression__OperandsAssignment_1_0_1_0_1)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getOperandsAssignment_1_0_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MultiplicativeExpression__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group_1_1__0__Impl
	rule__MultiplicativeExpression__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getAlternatives_1_1_0()); }
(rule__MultiplicativeExpression__Alternatives_1_1_0)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getAlternatives_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getRightOperandAssignment_1_1_1()); }
(rule__MultiplicativeExpression__RightOperandAssignment_1_1_1)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getRightOperandAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MultiplicativeExpression__Group_1_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group_1_1_0_0__0__Impl
	rule__MultiplicativeExpression__Group_1_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getDivideExpressionLeftOperandAction_1_1_0_0_0()); }
(

)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getDivideExpressionLeftOperandAction_1_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group_1_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group_1_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getSolidusKeyword_1_1_0_0_1()); }

	'/' 

{ after(grammarAccess.getMultiplicativeExpressionAccess().getSolidusKeyword_1_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MultiplicativeExpression__Group_1_1_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group_1_1_0_1__0__Impl
	rule__MultiplicativeExpression__Group_1_1_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1_1_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getDivExpressionLeftOperandAction_1_1_0_1_0()); }
(

)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getDivExpressionLeftOperandAction_1_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group_1_1_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group_1_1_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1_1_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getDivKeyword_1_1_0_1_1()); }

	'div' 

{ after(grammarAccess.getMultiplicativeExpressionAccess().getDivKeyword_1_1_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MultiplicativeExpression__Group_1_1_0_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group_1_1_0_2__0__Impl
	rule__MultiplicativeExpression__Group_1_1_0_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1_1_0_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getModExpressionLeftOperandAction_1_1_0_2_0()); }
(

)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getModExpressionLeftOperandAction_1_1_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group_1_1_0_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group_1_1_0_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1_1_0_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getModKeyword_1_1_0_2_1()); }

	'mod' 

{ after(grammarAccess.getMultiplicativeExpressionAccess().getModKeyword_1_1_0_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AccessExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AccessExpression__Group__0__Impl
	rule__AccessExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AccessExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAccessExpressionAccess().getPrimaryExpressionParserRuleCall_0()); }
	rulePrimaryExpression
{ after(grammarAccess.getAccessExpressionAccess().getPrimaryExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AccessExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AccessExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AccessExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAccessExpressionAccess().getAlternatives_1()); }
(rule__AccessExpression__Alternatives_1)*
{ after(grammarAccess.getAccessExpressionAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AccessExpression__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AccessExpression__Group_1_0__0__Impl
	rule__AccessExpression__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AccessExpression__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAccessExpressionAccess().getArrayAccessExpressionOperandAction_1_0_0()); }
(

)
{ after(grammarAccess.getAccessExpressionAccess().getArrayAccessExpressionOperandAction_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AccessExpression__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AccessExpression__Group_1_0__1__Impl
	rule__AccessExpression__Group_1_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AccessExpression__Group_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAccessExpressionAccess().getLeftSquareBracketKeyword_1_0_1()); }

	'[' 

{ after(grammarAccess.getAccessExpressionAccess().getLeftSquareBracketKeyword_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AccessExpression__Group_1_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AccessExpression__Group_1_0__2__Impl
	rule__AccessExpression__Group_1_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AccessExpression__Group_1_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAccessExpressionAccess().getGroup_1_0_2()); }
(rule__AccessExpression__Group_1_0_2__0)
{ after(grammarAccess.getAccessExpressionAccess().getGroup_1_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AccessExpression__Group_1_0__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AccessExpression__Group_1_0__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AccessExpression__Group_1_0__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAccessExpressionAccess().getRightSquareBracketKeyword_1_0_3()); }

	']' 

{ after(grammarAccess.getAccessExpressionAccess().getRightSquareBracketKeyword_1_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__AccessExpression__Group_1_0_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AccessExpression__Group_1_0_2__0__Impl
	rule__AccessExpression__Group_1_0_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AccessExpression__Group_1_0_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAccessExpressionAccess().getParametersAssignment_1_0_2_0()); }
(rule__AccessExpression__ParametersAssignment_1_0_2_0)
{ after(grammarAccess.getAccessExpressionAccess().getParametersAssignment_1_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AccessExpression__Group_1_0_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AccessExpression__Group_1_0_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AccessExpression__Group_1_0_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAccessExpressionAccess().getGroup_1_0_2_1()); }
(rule__AccessExpression__Group_1_0_2_1__0)*
{ after(grammarAccess.getAccessExpressionAccess().getGroup_1_0_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AccessExpression__Group_1_0_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AccessExpression__Group_1_0_2_1__0__Impl
	rule__AccessExpression__Group_1_0_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AccessExpression__Group_1_0_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAccessExpressionAccess().getCommaKeyword_1_0_2_1_0()); }

	',' 

{ after(grammarAccess.getAccessExpressionAccess().getCommaKeyword_1_0_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AccessExpression__Group_1_0_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AccessExpression__Group_1_0_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AccessExpression__Group_1_0_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAccessExpressionAccess().getParametersAssignment_1_0_2_1_1()); }
(rule__AccessExpression__ParametersAssignment_1_0_2_1_1)
{ after(grammarAccess.getAccessExpressionAccess().getParametersAssignment_1_0_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AccessExpression__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AccessExpression__Group_1_1__0__Impl
	rule__AccessExpression__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AccessExpression__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAccessExpressionAccess().getFunctionAccessExpressionOperandAction_1_1_0()); }
(

)
{ after(grammarAccess.getAccessExpressionAccess().getFunctionAccessExpressionOperandAction_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AccessExpression__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AccessExpression__Group_1_1__1__Impl
	rule__AccessExpression__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AccessExpression__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAccessExpressionAccess().getLeftParenthesisKeyword_1_1_1()); }

	'(' 

{ after(grammarAccess.getAccessExpressionAccess().getLeftParenthesisKeyword_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AccessExpression__Group_1_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AccessExpression__Group_1_1__2__Impl
	rule__AccessExpression__Group_1_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AccessExpression__Group_1_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAccessExpressionAccess().getGroup_1_1_2()); }
(rule__AccessExpression__Group_1_1_2__0)
{ after(grammarAccess.getAccessExpressionAccess().getGroup_1_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AccessExpression__Group_1_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AccessExpression__Group_1_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AccessExpression__Group_1_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAccessExpressionAccess().getRightParenthesisKeyword_1_1_3()); }

	')' 

{ after(grammarAccess.getAccessExpressionAccess().getRightParenthesisKeyword_1_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__AccessExpression__Group_1_1_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AccessExpression__Group_1_1_2__0__Impl
	rule__AccessExpression__Group_1_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AccessExpression__Group_1_1_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAccessExpressionAccess().getParametersAssignment_1_1_2_0()); }
(rule__AccessExpression__ParametersAssignment_1_1_2_0)
{ after(grammarAccess.getAccessExpressionAccess().getParametersAssignment_1_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AccessExpression__Group_1_1_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AccessExpression__Group_1_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AccessExpression__Group_1_1_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAccessExpressionAccess().getGroup_1_1_2_1()); }
(rule__AccessExpression__Group_1_1_2_1__0)*
{ after(grammarAccess.getAccessExpressionAccess().getGroup_1_1_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AccessExpression__Group_1_1_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AccessExpression__Group_1_1_2_1__0__Impl
	rule__AccessExpression__Group_1_1_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AccessExpression__Group_1_1_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAccessExpressionAccess().getCommaKeyword_1_1_2_1_0()); }

	',' 

{ after(grammarAccess.getAccessExpressionAccess().getCommaKeyword_1_1_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AccessExpression__Group_1_1_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AccessExpression__Group_1_1_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AccessExpression__Group_1_1_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAccessExpressionAccess().getParametersAssignment_1_1_2_1_1()); }
(rule__AccessExpression__ParametersAssignment_1_1_2_1_1)
{ after(grammarAccess.getAccessExpressionAccess().getParametersAssignment_1_1_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AccessExpression__Group_1_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AccessExpression__Group_1_2__0__Impl
	rule__AccessExpression__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AccessExpression__Group_1_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAccessExpressionAccess().getRecordAccessExpressionOperandAction_1_2_0()); }
(

)
{ after(grammarAccess.getAccessExpressionAccess().getRecordAccessExpressionOperandAction_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AccessExpression__Group_1_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AccessExpression__Group_1_2__1__Impl
	rule__AccessExpression__Group_1_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AccessExpression__Group_1_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAccessExpressionAccess().getFullStopKeyword_1_2_1()); }

	'.' 

{ after(grammarAccess.getAccessExpressionAccess().getFullStopKeyword_1_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AccessExpression__Group_1_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AccessExpression__Group_1_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AccessExpression__Group_1_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAccessExpressionAccess().getFieldAssignment_1_2_2()); }
(rule__AccessExpression__FieldAssignment_1_2_2)
{ after(grammarAccess.getAccessExpressionAccess().getFieldAssignment_1_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AccessExpression__Group_1_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AccessExpression__Group_1_3__0__Impl
	rule__AccessExpression__Group_1_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AccessExpression__Group_1_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAccessExpressionAccess().getTupleAccessExpressionOperandAction_1_3_0()); }
(

)
{ after(grammarAccess.getAccessExpressionAccess().getTupleAccessExpressionOperandAction_1_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AccessExpression__Group_1_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AccessExpression__Group_1_3__1__Impl
	rule__AccessExpression__Group_1_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AccessExpression__Group_1_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAccessExpressionAccess().getExclamationMarkKeyword_1_3_1()); }

	'!' 

{ after(grammarAccess.getAccessExpressionAccess().getExclamationMarkKeyword_1_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AccessExpression__Group_1_3__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AccessExpression__Group_1_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AccessExpression__Group_1_3__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAccessExpressionAccess().getIndexAssignment_1_3_2()); }
(rule__AccessExpression__IndexAssignment_1_3_2)
{ after(grammarAccess.getAccessExpressionAccess().getIndexAssignment_1_3_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AccessExpression__Group_1_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AccessExpression__Group_1_4__0__Impl
	rule__AccessExpression__Group_1_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AccessExpression__Group_1_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAccessExpressionAccess().getPrimedExpressionOperandAction_1_4_0()); }
(

)
{ after(grammarAccess.getAccessExpressionAccess().getPrimedExpressionOperandAction_1_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AccessExpression__Group_1_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AccessExpression__Group_1_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AccessExpression__Group_1_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAccessExpressionAccess().getApostropheKeyword_1_4_1()); }

	'\'' 

{ after(grammarAccess.getAccessExpressionAccess().getApostropheKeyword_1_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RationalLiteralExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RationalLiteralExpression__Group__0__Impl
	rule__RationalLiteralExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RationalLiteralExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRationalLiteralExpressionAccess().getNumeratorAssignment_0()); }
(rule__RationalLiteralExpression__NumeratorAssignment_0)
{ after(grammarAccess.getRationalLiteralExpressionAccess().getNumeratorAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RationalLiteralExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RationalLiteralExpression__Group__1__Impl
	rule__RationalLiteralExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RationalLiteralExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRationalLiteralExpressionAccess().getPercentSignKeyword_1()); }

	'%' 

{ after(grammarAccess.getRationalLiteralExpressionAccess().getPercentSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RationalLiteralExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RationalLiteralExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RationalLiteralExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRationalLiteralExpressionAccess().getDenominatorAssignment_2()); }
(rule__RationalLiteralExpression__DenominatorAssignment_2)
{ after(grammarAccess.getRationalLiteralExpressionAccess().getDenominatorAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__TrueExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TrueExpression__Group__0__Impl
	rule__TrueExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TrueExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTrueExpressionAccess().getTrueExpressionAction_0()); }
(

)
{ after(grammarAccess.getTrueExpressionAccess().getTrueExpressionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TrueExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TrueExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TrueExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTrueExpressionAccess().getTrueKeyword_1()); }

	'true' 

{ after(grammarAccess.getTrueExpressionAccess().getTrueKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FalseExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FalseExpression__Group__0__Impl
	rule__FalseExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FalseExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFalseExpressionAccess().getFalseExpressionAction_0()); }
(

)
{ after(grammarAccess.getFalseExpressionAccess().getFalseExpressionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FalseExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FalseExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FalseExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFalseExpressionAccess().getFalseKeyword_1()); }

	'false' 

{ after(grammarAccess.getFalseExpressionAccess().getFalseKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ArrayLiteralExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayLiteralExpression__Group__0__Impl
	rule__ArrayLiteralExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayLiteralExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayLiteralExpressionAccess().getLeftSquareBracketKeyword_0()); }

	'[' 

{ after(grammarAccess.getArrayLiteralExpressionAccess().getLeftSquareBracketKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayLiteralExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayLiteralExpression__Group__1__Impl
	rule__ArrayLiteralExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayLiteralExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayLiteralExpressionAccess().getGroup_1()); }
(rule__ArrayLiteralExpression__Group_1__0)?
{ after(grammarAccess.getArrayLiteralExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayLiteralExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayLiteralExpression__Group__2__Impl
	rule__ArrayLiteralExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayLiteralExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayLiteralExpressionAccess().getVerticalLineKeyword_2()); }

	'|' 

{ after(grammarAccess.getArrayLiteralExpressionAccess().getVerticalLineKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayLiteralExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayLiteralExpression__Group__3__Impl
	rule__ArrayLiteralExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayLiteralExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayLiteralExpressionAccess().getOperandAssignment_3()); }
(rule__ArrayLiteralExpression__OperandAssignment_3)
{ after(grammarAccess.getArrayLiteralExpressionAccess().getOperandAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayLiteralExpression__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayLiteralExpression__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayLiteralExpression__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayLiteralExpressionAccess().getRightSquareBracketKeyword_4()); }

	']' 

{ after(grammarAccess.getArrayLiteralExpressionAccess().getRightSquareBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__ArrayLiteralExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayLiteralExpression__Group_1__0__Impl
	rule__ArrayLiteralExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayLiteralExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayLiteralExpressionAccess().getParameterDeclarationsAssignment_1_0()); }
(rule__ArrayLiteralExpression__ParameterDeclarationsAssignment_1_0)
{ after(grammarAccess.getArrayLiteralExpressionAccess().getParameterDeclarationsAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayLiteralExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayLiteralExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayLiteralExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayLiteralExpressionAccess().getGroup_1_1()); }
(rule__ArrayLiteralExpression__Group_1_1__0)*
{ after(grammarAccess.getArrayLiteralExpressionAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ArrayLiteralExpression__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayLiteralExpression__Group_1_1__0__Impl
	rule__ArrayLiteralExpression__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayLiteralExpression__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayLiteralExpressionAccess().getCommaKeyword_1_1_0()); }

	',' 

{ after(grammarAccess.getArrayLiteralExpressionAccess().getCommaKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayLiteralExpression__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayLiteralExpression__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayLiteralExpression__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayLiteralExpressionAccess().getParameterDeclarationsAssignment_1_1_1()); }
(rule__ArrayLiteralExpression__ParameterDeclarationsAssignment_1_1_1)
{ after(grammarAccess.getArrayLiteralExpressionAccess().getParameterDeclarationsAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RecordLiteralExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RecordLiteralExpression__Group__0__Impl
	rule__RecordLiteralExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RecordLiteralExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordLiteralExpressionAccess().getLeftParenthesisNumberSignKeyword_0()); }

	'(#' 

{ after(grammarAccess.getRecordLiteralExpressionAccess().getLeftParenthesisNumberSignKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RecordLiteralExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RecordLiteralExpression__Group__1__Impl
	rule__RecordLiteralExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RecordLiteralExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordLiteralExpressionAccess().getFieldAssignmentsAssignment_1()); }
(rule__RecordLiteralExpression__FieldAssignmentsAssignment_1)
{ after(grammarAccess.getRecordLiteralExpressionAccess().getFieldAssignmentsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RecordLiteralExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RecordLiteralExpression__Group__2__Impl
	rule__RecordLiteralExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RecordLiteralExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordLiteralExpressionAccess().getGroup_2()); }
(rule__RecordLiteralExpression__Group_2__0)*
{ after(grammarAccess.getRecordLiteralExpressionAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RecordLiteralExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RecordLiteralExpression__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RecordLiteralExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordLiteralExpressionAccess().getNumberSignRightParenthesisKeyword_3()); }

	'#)' 

{ after(grammarAccess.getRecordLiteralExpressionAccess().getNumberSignRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__RecordLiteralExpression__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RecordLiteralExpression__Group_2__0__Impl
	rule__RecordLiteralExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RecordLiteralExpression__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordLiteralExpressionAccess().getCommaKeyword_2_0()); }

	',' 

{ after(grammarAccess.getRecordLiteralExpressionAccess().getCommaKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RecordLiteralExpression__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RecordLiteralExpression__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RecordLiteralExpression__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordLiteralExpressionAccess().getFieldAssignmentsAssignment_2_1()); }
(rule__RecordLiteralExpression__FieldAssignmentsAssignment_2_1)
{ after(grammarAccess.getRecordLiteralExpressionAccess().getFieldAssignmentsAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FieldAssignment__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FieldAssignment__Group__0__Impl
	rule__FieldAssignment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FieldAssignment__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldAssignmentAccess().getReferenceAssignment_0()); }
(rule__FieldAssignment__ReferenceAssignment_0)
{ after(grammarAccess.getFieldAssignmentAccess().getReferenceAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FieldAssignment__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FieldAssignment__Group__1__Impl
	rule__FieldAssignment__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FieldAssignment__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldAssignmentAccess().getColonEqualsSignKeyword_1()); }

	':=' 

{ after(grammarAccess.getFieldAssignmentAccess().getColonEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FieldAssignment__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FieldAssignment__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FieldAssignment__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldAssignmentAccess().getValueAssignment_2()); }
(rule__FieldAssignment__ValueAssignment_2)
{ after(grammarAccess.getFieldAssignmentAccess().getValueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__TupleLiteralExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TupleLiteralExpression__Group__0__Impl
	rule__TupleLiteralExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TupleLiteralExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleLiteralExpressionAccess().getLeftParenthesisNumberSignKeyword_0()); }

	'(#' 

{ after(grammarAccess.getTupleLiteralExpressionAccess().getLeftParenthesisNumberSignKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TupleLiteralExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TupleLiteralExpression__Group__1__Impl
	rule__TupleLiteralExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TupleLiteralExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleLiteralExpressionAccess().getExpressionsAssignment_1()); }
(rule__TupleLiteralExpression__ExpressionsAssignment_1)
{ after(grammarAccess.getTupleLiteralExpressionAccess().getExpressionsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TupleLiteralExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TupleLiteralExpression__Group__2__Impl
	rule__TupleLiteralExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TupleLiteralExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleLiteralExpressionAccess().getGroup_2()); }
(rule__TupleLiteralExpression__Group_2__0)*
{ after(grammarAccess.getTupleLiteralExpressionAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TupleLiteralExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TupleLiteralExpression__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TupleLiteralExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleLiteralExpressionAccess().getNumberSignRightParenthesisKeyword_3()); }

	'#)' 

{ after(grammarAccess.getTupleLiteralExpressionAccess().getNumberSignRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__TupleLiteralExpression__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TupleLiteralExpression__Group_2__0__Impl
	rule__TupleLiteralExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TupleLiteralExpression__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleLiteralExpressionAccess().getCommaKeyword_2_0()); }

	',' 

{ after(grammarAccess.getTupleLiteralExpressionAccess().getCommaKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TupleLiteralExpression__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TupleLiteralExpression__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TupleLiteralExpression__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleLiteralExpressionAccess().getExpressionsAssignment_2_1()); }
(rule__TupleLiteralExpression__ExpressionsAssignment_2_1)
{ after(grammarAccess.getTupleLiteralExpressionAccess().getExpressionsAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EnumerationLiteralExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumerationLiteralExpression__Group__0__Impl
	rule__EnumerationLiteralExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationLiteralExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationLiteralExpressionAccess().getColonColonKeyword_0()); }

	'::' 

{ after(grammarAccess.getEnumerationLiteralExpressionAccess().getColonColonKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumerationLiteralExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumerationLiteralExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationLiteralExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationLiteralExpressionAccess().getReferenceAssignment_1()); }
(rule__EnumerationLiteralExpression__ReferenceAssignment_1)
{ after(grammarAccess.getEnumerationLiteralExpressionAccess().getReferenceAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BasicConstraintDefinition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BasicConstraintDefinition__Group__0__Impl
	rule__BasicConstraintDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicConstraintDefinition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBasicConstraintDefinitionAccess().getConstraintKeyword_0()); }

	'constraint' 

{ after(grammarAccess.getBasicConstraintDefinitionAccess().getConstraintKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BasicConstraintDefinition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BasicConstraintDefinition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicConstraintDefinition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBasicConstraintDefinitionAccess().getExpressionAssignment_1()); }
(rule__BasicConstraintDefinition__ExpressionAssignment_1)
{ after(grammarAccess.getBasicConstraintDefinitionAccess().getExpressionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__HybridSpecification__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHybridSpecificationAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getHybridSpecificationAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__HybridSpecification__ParameterDeclarationsAssignment_2_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHybridSpecificationAccess().getParameterDeclarationsParameterDeclarationParserRuleCall_2_1_0_0()); }
	ruleParameterDeclaration{ after(grammarAccess.getHybridSpecificationAccess().getParameterDeclarationsParameterDeclarationParserRuleCall_2_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__HybridSpecification__ParameterDeclarationsAssignment_2_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHybridSpecificationAccess().getParameterDeclarationsParameterDeclarationParserRuleCall_2_1_1_1_0()); }
	ruleParameterDeclaration{ after(grammarAccess.getHybridSpecificationAccess().getParameterDeclarationsParameterDeclarationParserRuleCall_2_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__HybridSpecification__TypeDeclarationsAssignment_4_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHybridSpecificationAccess().getTypeDeclarationsTypeDeclarationParserRuleCall_4_0_0()); }
	ruleTypeDeclaration{ after(grammarAccess.getHybridSpecificationAccess().getTypeDeclarationsTypeDeclarationParserRuleCall_4_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__HybridSpecification__FunctionDeclarationsAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHybridSpecificationAccess().getFunctionDeclarationsFunctionDeclarationParserRuleCall_4_1_0()); }
	ruleFunctionDeclaration{ after(grammarAccess.getHybridSpecificationAccess().getFunctionDeclarationsFunctionDeclarationParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__HybridSpecification__ConstantDeclarationsAssignment_4_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHybridSpecificationAccess().getConstantDeclarationsConstantDeclarationParserRuleCall_4_2_0()); }
	ruleConstantDeclaration{ after(grammarAccess.getHybridSpecificationAccess().getConstantDeclarationsConstantDeclarationParserRuleCall_4_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__HybridSpecification__BasicConstraintDefinitionsAssignment_4_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHybridSpecificationAccess().getBasicConstraintDefinitionsBasicConstraintDefinitionParserRuleCall_4_3_0()); }
	ruleBasicConstraintDefinition{ after(grammarAccess.getHybridSpecificationAccess().getBasicConstraintDefinitionsBasicConstraintDefinitionParserRuleCall_4_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__HybridSpecification__HybridAutomatonDeclarationsAssignment_4_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHybridSpecificationAccess().getHybridAutomatonDeclarationsHybridAutomatonDeclarationParserRuleCall_4_4_0()); }
	ruleHybridAutomatonDeclaration{ after(grammarAccess.getHybridSpecificationAccess().getHybridAutomatonDeclarationsHybridAutomatonDeclarationParserRuleCall_4_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__HybridSpecification__PropertyDeclarationsAssignment_4_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHybridSpecificationAccess().getPropertyDeclarationsPropertyDeclarationParserRuleCall_4_5_0()); }
	rulePropertyDeclaration{ after(grammarAccess.getHybridSpecificationAccess().getPropertyDeclarationsPropertyDeclarationParserRuleCall_4_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LocationReferenceExpression__LocationAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocationReferenceExpressionAccess().getLocationLocationCrossReference_1_0()); }
(
{ before(grammarAccess.getLocationReferenceExpressionAccess().getLocationLocationIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getLocationReferenceExpressionAccess().getLocationLocationIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getLocationReferenceExpressionAccess().getLocationLocationCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SignumExpression__OperandAssignment_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignumExpressionAccess().getOperandSignumExpressionParserRuleCall_0_2_0()); }
	ruleSignumExpression{ after(grammarAccess.getSignumExpressionAccess().getOperandSignumExpressionParserRuleCall_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SignumExpression__OperandAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignumExpressionAccess().getOperandSignumExpressionParserRuleCall_1_2_0()); }
	ruleSignumExpression{ after(grammarAccess.getSignumExpressionAccess().getOperandSignumExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SignumExpression__OperandAssignment_2_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignumExpressionAccess().getOperandSignumExpressionParserRuleCall_2_2_0()); }
	ruleSignumExpression{ after(grammarAccess.getSignumExpressionAccess().getOperandSignumExpressionParserRuleCall_2_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__HybridAutomatonDeclaration__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHybridAutomatonDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getHybridAutomatonDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__HybridAutomatonDeclaration__ParameterDeclarationsAssignment_2_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHybridAutomatonDeclarationAccess().getParameterDeclarationsParameterDeclarationParserRuleCall_2_1_0_0()); }
	ruleParameterDeclaration{ after(grammarAccess.getHybridAutomatonDeclarationAccess().getParameterDeclarationsParameterDeclarationParserRuleCall_2_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__HybridAutomatonDeclaration__ParameterDeclarationsAssignment_2_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHybridAutomatonDeclarationAccess().getParameterDeclarationsParameterDeclarationParserRuleCall_2_1_1_1_0()); }
	ruleParameterDeclaration{ after(grammarAccess.getHybridAutomatonDeclarationAccess().getParameterDeclarationsParameterDeclarationParserRuleCall_2_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__HybridAutomatonDeclaration__HybridAutomatonAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHybridAutomatonDeclarationAccess().getHybridAutomatonHybridAutomatonParserRuleCall_4_0()); }
	ruleHybridAutomaton{ after(grammarAccess.getHybridAutomatonDeclarationAccess().getHybridAutomatonHybridAutomatonParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__HybridAutomatonDefinition__VariableDeclarationsAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHybridAutomatonDefinitionAccess().getVariableDeclarationsVariableDeclarationParserRuleCall_2_0_0()); }
	ruleVariableDeclaration{ after(grammarAccess.getHybridAutomatonDefinitionAccess().getVariableDeclarationsVariableDeclarationParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__HybridAutomatonDefinition__LocationsAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHybridAutomatonDefinitionAccess().getLocationsLocationParserRuleCall_2_1_0()); }
	ruleLocation{ after(grammarAccess.getHybridAutomatonDefinitionAccess().getLocationsLocationParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__HybridAutomatonDefinition__TransitionsAssignment_2_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHybridAutomatonDefinitionAccess().getTransitionsTransitionParserRuleCall_2_2_0()); }
	ruleTransition{ after(grammarAccess.getHybridAutomatonDefinitionAccess().getTransitionsTransitionParserRuleCall_2_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GlobalVariableDeclaration__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGlobalVariableDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getGlobalVariableDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GlobalVariableDeclaration__TypeAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGlobalVariableDeclarationAccess().getTypeTypeParserRuleCall_3_0()); }
	ruleType{ after(grammarAccess.getGlobalVariableDeclarationAccess().getTypeTypeParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LocalVariableDeclaration__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalVariableDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getLocalVariableDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LocalVariableDeclaration__TypeAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalVariableDeclarationAccess().getTypeTypeParserRuleCall_3_0()); }
	ruleType{ after(grammarAccess.getLocalVariableDeclarationAccess().getTypeTypeParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Location__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocationAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getLocationAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Location__ConditionsAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocationAccess().getConditionsConditionParserRuleCall_2_1_0()); }
	ruleCondition{ after(grammarAccess.getLocationAccess().getConditionsConditionParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__SourceAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getSourceLocationCrossReference_1_0()); }
(
{ before(grammarAccess.getTransitionAccess().getSourceLocationIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getTransitionAccess().getSourceLocationIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getTransitionAccess().getSourceLocationCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__TargetAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getTargetLocationCrossReference_3_0()); }
(
{ before(grammarAccess.getTransitionAccess().getTargetLocationIDTerminalRuleCall_3_0_1()); }
	RULE_ID{ after(grammarAccess.getTransitionAccess().getTargetLocationIDTerminalRuleCall_3_0_1()); }
)
{ after(grammarAccess.getTransitionAccess().getTargetLocationCrossReference_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__ParameterDeclarationsAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getParameterDeclarationsParameterDeclarationParserRuleCall_4_1_0()); }
	ruleParameterDeclaration{ after(grammarAccess.getTransitionAccess().getParameterDeclarationsParameterDeclarationParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__ParameterDeclarationsAssignment_4_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getParameterDeclarationsParameterDeclarationParserRuleCall_4_2_1_0()); }
	ruleParameterDeclaration{ after(grammarAccess.getTransitionAccess().getParameterDeclarationsParameterDeclarationParserRuleCall_4_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__GuardsAssignment_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getGuardsExpressionParserRuleCall_5_1_0()); }
	ruleExpression{ after(grammarAccess.getTransitionAccess().getGuardsExpressionParserRuleCall_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__GuardsAssignment_5_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getGuardsExpressionParserRuleCall_5_2_1_0()); }
	ruleExpression{ after(grammarAccess.getTransitionAccess().getGuardsExpressionParserRuleCall_5_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__AssignmentsAssignment_6_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getAssignmentsAssignmentParserRuleCall_6_1_0()); }
	ruleAssignment{ after(grammarAccess.getTransitionAccess().getAssignmentsAssignmentParserRuleCall_6_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__AssignmentsAssignment_6_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getAssignmentsAssignmentParserRuleCall_6_2_1_0()); }
	ruleAssignment{ after(grammarAccess.getTransitionAccess().getAssignmentsAssignmentParserRuleCall_6_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__LhsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getLhsExpressionParserRuleCall_0_0()); }
	ruleExpression{ after(grammarAccess.getAssignmentAccess().getLhsExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__RhsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getRhsExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getAssignmentAccess().getRhsExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InitialCondition__ExpressionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInitialConditionAccess().getExpressionExpressionParserRuleCall_1_0()); }
	ruleExpression{ after(grammarAccess.getInitialConditionAccess().getExpressionExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InvariantCondition__ExpressionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInvariantConditionAccess().getExpressionExpressionParserRuleCall_1_0()); }
	ruleExpression{ after(grammarAccess.getInvariantConditionAccess().getExpressionExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FlowCondition__ExpressionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowConditionAccess().getExpressionExpressionParserRuleCall_1_0()); }
	ruleExpression{ after(grammarAccess.getFlowConditionAccess().getExpressionExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyDeclaration__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getPropertyDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyDeclaration__HybridAutomatonAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyDeclarationAccess().getHybridAutomatonHybridAutomatonParserRuleCall_3_0()); }
	ruleHybridAutomaton{ after(grammarAccess.getPropertyDeclarationAccess().getHybridAutomatonHybridAutomatonParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyDeclaration__ExpressionAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyDeclarationAccess().getExpressionExpressionParserRuleCall_5_0()); }
	ruleExpression{ after(grammarAccess.getPropertyDeclarationAccess().getExpressionExpressionParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ParameterDeclaration__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getParameterDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclaration__TypeAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterDeclarationAccess().getTypeTypeParserRuleCall_3_0()); }
	ruleType{ after(grammarAccess.getParameterDeclarationAccess().getTypeTypeParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FieldDeclaration__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getFieldDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FieldDeclaration__TypeAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldDeclarationAccess().getTypeTypeParserRuleCall_3_0()); }
	ruleType{ after(grammarAccess.getFieldDeclarationAccess().getTypeTypeParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LetDeclaration__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getLetDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LetDeclaration__TypeAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetDeclarationAccess().getTypeTypeParserRuleCall_3_0()); }
	ruleType{ after(grammarAccess.getLetDeclarationAccess().getTypeTypeParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LetDeclaration__ExpressionAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetDeclarationAccess().getExpressionExpressionParserRuleCall_5_0()); }
	ruleExpression{ after(grammarAccess.getLetDeclarationAccess().getExpressionExpressionParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantDeclaration__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getConstantDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantDeclaration__TypeAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantDeclarationAccess().getTypeTypeParserRuleCall_3_0()); }
	ruleType{ after(grammarAccess.getConstantDeclarationAccess().getTypeTypeParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantDeclaration__ExpressionAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantDeclarationAccess().getExpressionExpressionParserRuleCall_4_1_0()); }
	ruleExpression{ after(grammarAccess.getConstantDeclarationAccess().getExpressionExpressionParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getFunctionDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__ParameterDeclarationsAssignment_2_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getParameterDeclarationsParameterDeclarationParserRuleCall_2_1_0_0()); }
	ruleParameterDeclaration{ after(grammarAccess.getFunctionDeclarationAccess().getParameterDeclarationsParameterDeclarationParserRuleCall_2_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__ParameterDeclarationsAssignment_2_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getParameterDeclarationsParameterDeclarationParserRuleCall_2_1_1_1_0()); }
	ruleParameterDeclaration{ after(grammarAccess.getFunctionDeclarationAccess().getParameterDeclarationsParameterDeclarationParserRuleCall_2_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__TypeAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getTypeTypeParserRuleCall_4_0()); }
	ruleType{ after(grammarAccess.getFunctionDeclarationAccess().getTypeTypeParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__ExpressionAssignment_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getExpressionExpressionParserRuleCall_5_1_0()); }
	ruleExpression{ after(grammarAccess.getFunctionDeclarationAccess().getExpressionExpressionParserRuleCall_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDeclaration__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getTypeDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDeclaration__TypeAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDeclarationAccess().getTypeTypeParserRuleCall_3_0()); }
	ruleType{ after(grammarAccess.getTypeDeclarationAccess().getTypeTypeParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeReference__ReferenceAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeReferenceAccess().getReferenceTypeDeclarationCrossReference_0()); }
(
{ before(grammarAccess.getTypeReferenceAccess().getReferenceTypeDeclarationIDTerminalRuleCall_0_1()); }
	RULE_ID{ after(grammarAccess.getTypeReferenceAccess().getReferenceTypeDeclarationIDTerminalRuleCall_0_1()); }
)
{ after(grammarAccess.getTypeReferenceAccess().getReferenceTypeDeclarationCrossReference_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayTypeDefinition__IndexTypesAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayTypeDefinitionAccess().getIndexTypesTypeParserRuleCall_1_0()); }
	ruleType{ after(grammarAccess.getArrayTypeDefinitionAccess().getIndexTypesTypeParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayTypeDefinition__IndexTypesAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayTypeDefinitionAccess().getIndexTypesTypeParserRuleCall_2_1_0()); }
	ruleType{ after(grammarAccess.getArrayTypeDefinitionAccess().getIndexTypesTypeParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayTypeDefinition__ElementTypeAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayTypeDefinitionAccess().getElementTypeTypeParserRuleCall_4_0()); }
	ruleType{ after(grammarAccess.getArrayTypeDefinitionAccess().getElementTypeTypeParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationTypeDefinition__LiteralsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationTypeDefinitionAccess().getLiteralsEnumerationLiteralDefinitionParserRuleCall_2_0()); }
	ruleEnumerationLiteralDefinition{ after(grammarAccess.getEnumerationTypeDefinitionAccess().getLiteralsEnumerationLiteralDefinitionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationTypeDefinition__LiteralsAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationTypeDefinitionAccess().getLiteralsEnumerationLiteralDefinitionParserRuleCall_3_1_0()); }
	ruleEnumerationLiteralDefinition{ after(grammarAccess.getEnumerationTypeDefinitionAccess().getLiteralsEnumerationLiteralDefinitionParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationLiteralDefinition__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationLiteralDefinitionAccess().getNameIDTerminalRuleCall_0()); }
	RULE_ID{ after(grammarAccess.getEnumerationLiteralDefinitionAccess().getNameIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RecordTypeDefinition__FieldDeclarationsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordTypeDefinitionAccess().getFieldDeclarationsFieldDeclarationParserRuleCall_2_0()); }
	ruleFieldDeclaration{ after(grammarAccess.getRecordTypeDefinitionAccess().getFieldDeclarationsFieldDeclarationParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RecordTypeDefinition__FieldDeclarationsAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordTypeDefinitionAccess().getFieldDeclarationsFieldDeclarationParserRuleCall_3_1_0()); }
	ruleFieldDeclaration{ after(grammarAccess.getRecordTypeDefinitionAccess().getFieldDeclarationsFieldDeclarationParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TupleTypeDefinition__TypesAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleTypeDefinitionAccess().getTypesTypeParserRuleCall_2_0()); }
	ruleType{ after(grammarAccess.getTupleTypeDefinitionAccess().getTypesTypeParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TupleTypeDefinition__TypesAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleTypeDefinitionAccess().getTypesTypeParserRuleCall_3_1_0()); }
	ruleType{ after(grammarAccess.getTupleTypeDefinitionAccess().getTypesTypeParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubrangeTypeDefinition__LowerBoundAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubrangeTypeDefinitionAccess().getLowerBoundExpressionParserRuleCall_2_1_0()); }
	ruleExpression{ after(grammarAccess.getSubrangeTypeDefinitionAccess().getLowerBoundExpressionParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubrangeTypeDefinition__UpperBoundAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubrangeTypeDefinitionAccess().getUpperBoundExpressionParserRuleCall_4_1_0()); }
	ruleExpression{ after(grammarAccess.getSubrangeTypeDefinitionAccess().getUpperBoundExpressionParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubTypeDefinition__ParameterDeclarationAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubTypeDefinitionAccess().getParameterDeclarationParameterDeclarationParserRuleCall_1_0()); }
	ruleParameterDeclaration{ after(grammarAccess.getSubTypeDefinitionAccess().getParameterDeclarationParameterDeclarationParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubTypeDefinition__ExpressionAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubTypeDefinitionAccess().getExpressionExpressionParserRuleCall_3_0()); }
	ruleExpression{ after(grammarAccess.getSubTypeDefinitionAccess().getExpressionExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionTypeDefinition__ParameterTypesAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionTypeDefinitionAccess().getParameterTypesTypeParserRuleCall_2_0_0()); }
	ruleType{ after(grammarAccess.getFunctionTypeDefinitionAccess().getParameterTypesTypeParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionTypeDefinition__ParameterTypesAssignment_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionTypeDefinitionAccess().getParameterTypesTypeParserRuleCall_2_1_1_0()); }
	ruleType{ after(grammarAccess.getFunctionTypeDefinitionAccess().getParameterTypesTypeParserRuleCall_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionTypeDefinition__ReturnTypeAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionTypeDefinitionAccess().getReturnTypeTypeParserRuleCall_5_0()); }
	ruleType{ after(grammarAccess.getFunctionTypeDefinitionAccess().getReturnTypeTypeParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElseExpression__ConditionAssignment_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfThenElseExpressionAccess().getConditionExpressionParserRuleCall_0_2_0()); }
	ruleExpression{ after(grammarAccess.getIfThenElseExpressionAccess().getConditionExpressionParserRuleCall_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElseExpression__ThenAssignment_0_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfThenElseExpressionAccess().getThenExpressionParserRuleCall_0_4_0()); }
	ruleExpression{ after(grammarAccess.getIfThenElseExpressionAccess().getThenExpressionParserRuleCall_0_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElseExpression__ElseAssignment_0_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfThenElseExpressionAccess().getElseExpressionParserRuleCall_0_5_1_0()); }
	ruleExpression{ after(grammarAccess.getIfThenElseExpressionAccess().getElseExpressionParserRuleCall_0_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EqualExpression__RightOperandAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualExpressionAccess().getRightOperandEqualExpressionParserRuleCall_1_2_0()); }
	ruleEqualExpression{ after(grammarAccess.getEqualExpressionAccess().getRightOperandEqualExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ImplyExpression__RightOperandAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImplyExpressionAccess().getRightOperandImplyExpressionParserRuleCall_1_2_0()); }
	ruleImplyExpression{ after(grammarAccess.getImplyExpressionAccess().getRightOperandImplyExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__OperandsAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getOperandsAndExpressionParserRuleCall_1_1_1_0()); }
	ruleAndExpression{ after(grammarAccess.getOrExpressionAccess().getOperandsAndExpressionParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__OperandsAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getOperandsReleaseExpressionParserRuleCall_1_1_1_0()); }
	ruleReleaseExpression{ after(grammarAccess.getAndExpressionAccess().getOperandsReleaseExpressionParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ReleaseExpression__RightOperandAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReleaseExpressionAccess().getRightOperandUntilExpressionParserRuleCall_1_2_0()); }
	ruleUntilExpression{ after(grammarAccess.getReleaseExpressionAccess().getRightOperandUntilExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UntilExpression__RightOperandAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUntilExpressionAccess().getRightOperandUnaryLogicExpressionParserRuleCall_1_2_0()); }
	ruleUnaryLogicExpression{ after(grammarAccess.getUntilExpressionAccess().getRightOperandUnaryLogicExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NotExpression__OperandAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotExpressionAccess().getOperandUnaryLogicExpressionParserRuleCall_2_0()); }
	ruleUnaryLogicExpression{ after(grammarAccess.getNotExpressionAccess().getOperandUnaryLogicExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ForallExpression__ParameterDeclarationsAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForallExpressionAccess().getParameterDeclarationsParameterDeclarationParserRuleCall_3_0_0()); }
	ruleParameterDeclaration{ after(grammarAccess.getForallExpressionAccess().getParameterDeclarationsParameterDeclarationParserRuleCall_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ForallExpression__ParameterDeclarationsAssignment_3_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForallExpressionAccess().getParameterDeclarationsParameterDeclarationParserRuleCall_3_1_1_0()); }
	ruleParameterDeclaration{ after(grammarAccess.getForallExpressionAccess().getParameterDeclarationsParameterDeclarationParserRuleCall_3_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ForallExpression__OperandAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForallExpressionAccess().getOperandUnaryLogicExpressionParserRuleCall_6_0()); }
	ruleUnaryLogicExpression{ after(grammarAccess.getForallExpressionAccess().getOperandUnaryLogicExpressionParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExistsExpression__ParameterDeclarationsAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExistsExpressionAccess().getParameterDeclarationsParameterDeclarationParserRuleCall_3_0_0()); }
	ruleParameterDeclaration{ after(grammarAccess.getExistsExpressionAccess().getParameterDeclarationsParameterDeclarationParserRuleCall_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExistsExpression__ParameterDeclarationsAssignment_3_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExistsExpressionAccess().getParameterDeclarationsParameterDeclarationParserRuleCall_3_1_1_0()); }
	ruleParameterDeclaration{ after(grammarAccess.getExistsExpressionAccess().getParameterDeclarationsParameterDeclarationParserRuleCall_3_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExistsExpression__OperandAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExistsExpressionAccess().getOperandUnaryLogicExpressionParserRuleCall_6_0()); }
	ruleUnaryLogicExpression{ after(grammarAccess.getExistsExpressionAccess().getOperandUnaryLogicExpressionParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionLiteralExpression__ParameterDeclarationsAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionLiteralExpressionAccess().getParameterDeclarationsParameterDeclarationParserRuleCall_3_0_0()); }
	ruleParameterDeclaration{ after(grammarAccess.getFunctionLiteralExpressionAccess().getParameterDeclarationsParameterDeclarationParserRuleCall_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionLiteralExpression__ParameterDeclarationsAssignment_3_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionLiteralExpressionAccess().getParameterDeclarationsParameterDeclarationParserRuleCall_3_1_1_0()); }
	ruleParameterDeclaration{ after(grammarAccess.getFunctionLiteralExpressionAccess().getParameterDeclarationsParameterDeclarationParserRuleCall_3_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionLiteralExpression__ReturnTypeAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionLiteralExpressionAccess().getReturnTypeTypeParserRuleCall_6_0()); }
	ruleType{ after(grammarAccess.getFunctionLiteralExpressionAccess().getReturnTypeTypeParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionLiteralExpression__OperandAssignment_8
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionLiteralExpressionAccess().getOperandUnaryLogicExpressionParserRuleCall_8_0()); }
	ruleUnaryLogicExpression{ after(grammarAccess.getFunctionLiteralExpressionAccess().getOperandUnaryLogicExpressionParserRuleCall_8_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GloballyExpression__OperandAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGloballyExpressionAccess().getOperandUnaryLogicExpressionParserRuleCall_2_0()); }
	ruleUnaryLogicExpression{ after(grammarAccess.getGloballyExpressionAccess().getOperandUnaryLogicExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FinallyExpression__OperandAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFinallyExpressionAccess().getOperandUnaryLogicExpressionParserRuleCall_2_0()); }
	ruleUnaryLogicExpression{ after(grammarAccess.getFinallyExpressionAccess().getOperandUnaryLogicExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NextExpression__OperandAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNextExpressionAccess().getOperandUnaryLogicExpressionParserRuleCall_2_0()); }
	ruleUnaryLogicExpression{ after(grammarAccess.getNextExpressionAccess().getOperandUnaryLogicExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalForallExpression__OperandAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemporalForallExpressionAccess().getOperandUnaryLogicExpressionParserRuleCall_2_0()); }
	ruleUnaryLogicExpression{ after(grammarAccess.getTemporalForallExpressionAccess().getOperandUnaryLogicExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TemporalExistsExpression__OperandAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemporalExistsExpressionAccess().getOperandUnaryLogicExpressionParserRuleCall_2_0()); }
	ruleUnaryLogicExpression{ after(grammarAccess.getTemporalExistsExpressionAccess().getOperandUnaryLogicExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LetExpression__LetDeclarationsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetExpressionAccess().getLetDeclarationsLetDeclarationParserRuleCall_3_0()); }
	ruleLetDeclaration{ after(grammarAccess.getLetExpressionAccess().getLetDeclarationsLetDeclarationParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LetExpression__LetDeclarationsAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetExpressionAccess().getLetDeclarationsLetDeclarationParserRuleCall_4_1_0()); }
	ruleLetDeclaration{ after(grammarAccess.getLetExpressionAccess().getLetDeclarationsLetDeclarationParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LetExpression__ExpressionAssignment_7
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetExpressionAccess().getExpressionUnaryLogicExpressionParserRuleCall_7_0()); }
	ruleUnaryLogicExpression{ after(grammarAccess.getLetExpressionAccess().getExpressionUnaryLogicExpressionParserRuleCall_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InExpression__TypeAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInExpressionAccess().getTypeTypeParserRuleCall_1_2_0()); }
	ruleType{ after(grammarAccess.getInExpressionAccess().getTypeTypeParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EquivalenceExpression__RightOperandAssignment_1_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEquivalenceExpressionAccess().getRightOperandComparisionExpressionParserRuleCall_1_0_2_0()); }
	ruleComparisionExpression{ after(grammarAccess.getEquivalenceExpressionAccess().getRightOperandComparisionExpressionParserRuleCall_1_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EquivalenceExpression__RightOperandAssignment_1_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEquivalenceExpressionAccess().getRightOperandComparisionExpressionParserRuleCall_1_1_2_0()); }
	ruleComparisionExpression{ after(grammarAccess.getEquivalenceExpressionAccess().getRightOperandComparisionExpressionParserRuleCall_1_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisionExpression__RightOperandAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisionExpressionAccess().getRightOperandAdditiveExpressionParserRuleCall_1_1_0()); }
	ruleAdditiveExpression{ after(grammarAccess.getComparisionExpressionAccess().getRightOperandAdditiveExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__OperandsAssignment_1_0_1_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getOperandsMultiplicativeExpressionParserRuleCall_1_0_1_0_1_0()); }
	ruleMultiplicativeExpression{ after(grammarAccess.getAdditiveExpressionAccess().getOperandsMultiplicativeExpressionParserRuleCall_1_0_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__RightOperandAssignment_1_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getRightOperandMultiplicativeExpressionParserRuleCall_1_1_2_0()); }
	ruleMultiplicativeExpression{ after(grammarAccess.getAdditiveExpressionAccess().getRightOperandMultiplicativeExpressionParserRuleCall_1_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__OperandsAssignment_1_0_1_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getOperandsSignumExpressionParserRuleCall_1_0_1_0_1_0()); }
	ruleSignumExpression{ after(grammarAccess.getMultiplicativeExpressionAccess().getOperandsSignumExpressionParserRuleCall_1_0_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__RightOperandAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getRightOperandSignumExpressionParserRuleCall_1_1_1_0()); }
	ruleSignumExpression{ after(grammarAccess.getMultiplicativeExpressionAccess().getRightOperandSignumExpressionParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AccessExpression__ParametersAssignment_1_0_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAccessExpressionAccess().getParametersExpressionParserRuleCall_1_0_2_0_0()); }
	ruleExpression{ after(grammarAccess.getAccessExpressionAccess().getParametersExpressionParserRuleCall_1_0_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AccessExpression__ParametersAssignment_1_0_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAccessExpressionAccess().getParametersExpressionParserRuleCall_1_0_2_1_1_0()); }
	ruleExpression{ after(grammarAccess.getAccessExpressionAccess().getParametersExpressionParserRuleCall_1_0_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AccessExpression__ParametersAssignment_1_1_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAccessExpressionAccess().getParametersExpressionParserRuleCall_1_1_2_0_0()); }
	ruleExpression{ after(grammarAccess.getAccessExpressionAccess().getParametersExpressionParserRuleCall_1_1_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AccessExpression__ParametersAssignment_1_1_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAccessExpressionAccess().getParametersExpressionParserRuleCall_1_1_2_1_1_0()); }
	ruleExpression{ after(grammarAccess.getAccessExpressionAccess().getParametersExpressionParserRuleCall_1_1_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AccessExpression__FieldAssignment_1_2_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAccessExpressionAccess().getFieldIDTerminalRuleCall_1_2_2_0()); }
	RULE_ID{ after(grammarAccess.getAccessExpressionAccess().getFieldIDTerminalRuleCall_1_2_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AccessExpression__IndexAssignment_1_3_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAccessExpressionAccess().getIndexINTEGERTerminalRuleCall_1_3_2_0()); }
	RULE_INTEGER{ after(grammarAccess.getAccessExpressionAccess().getIndexINTEGERTerminalRuleCall_1_3_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ReferenceExpression__DeclarationAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReferenceExpressionAccess().getDeclarationDeclarationCrossReference_0()); }
(
{ before(grammarAccess.getReferenceExpressionAccess().getDeclarationDeclarationIDTerminalRuleCall_0_1()); }
	RULE_ID{ after(grammarAccess.getReferenceExpressionAccess().getDeclarationDeclarationIDTerminalRuleCall_0_1()); }
)
{ after(grammarAccess.getReferenceExpressionAccess().getDeclarationDeclarationCrossReference_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerLiteralExpression__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerLiteralExpressionAccess().getValueINTEGERTerminalRuleCall_0()); }
	RULE_INTEGER{ after(grammarAccess.getIntegerLiteralExpressionAccess().getValueINTEGERTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DecimalLiteralExpression__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDecimalLiteralExpressionAccess().getValueDECIMALTerminalRuleCall_0()); }
	RULE_DECIMAL{ after(grammarAccess.getDecimalLiteralExpressionAccess().getValueDECIMALTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RationalLiteralExpression__NumeratorAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRationalLiteralExpressionAccess().getNumeratorINTEGERTerminalRuleCall_0_0()); }
	RULE_INTEGER{ after(grammarAccess.getRationalLiteralExpressionAccess().getNumeratorINTEGERTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RationalLiteralExpression__DenominatorAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRationalLiteralExpressionAccess().getDenominatorINTEGERTerminalRuleCall_2_0()); }
	RULE_INTEGER{ after(grammarAccess.getRationalLiteralExpressionAccess().getDenominatorINTEGERTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayLiteralExpression__ParameterDeclarationsAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayLiteralExpressionAccess().getParameterDeclarationsParameterDeclarationParserRuleCall_1_0_0()); }
	ruleParameterDeclaration{ after(grammarAccess.getArrayLiteralExpressionAccess().getParameterDeclarationsParameterDeclarationParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayLiteralExpression__ParameterDeclarationsAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayLiteralExpressionAccess().getParameterDeclarationsParameterDeclarationParserRuleCall_1_1_1_0()); }
	ruleParameterDeclaration{ after(grammarAccess.getArrayLiteralExpressionAccess().getParameterDeclarationsParameterDeclarationParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayLiteralExpression__OperandAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayLiteralExpressionAccess().getOperandExpressionParserRuleCall_3_0()); }
	ruleExpression{ after(grammarAccess.getArrayLiteralExpressionAccess().getOperandExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RecordLiteralExpression__FieldAssignmentsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordLiteralExpressionAccess().getFieldAssignmentsFieldAssignmentParserRuleCall_1_0()); }
	ruleFieldAssignment{ after(grammarAccess.getRecordLiteralExpressionAccess().getFieldAssignmentsFieldAssignmentParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RecordLiteralExpression__FieldAssignmentsAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordLiteralExpressionAccess().getFieldAssignmentsFieldAssignmentParserRuleCall_2_1_0()); }
	ruleFieldAssignment{ after(grammarAccess.getRecordLiteralExpressionAccess().getFieldAssignmentsFieldAssignmentParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FieldAssignment__ReferenceAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldAssignmentAccess().getReferenceIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getFieldAssignmentAccess().getReferenceIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FieldAssignment__ValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldAssignmentAccess().getValueExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getFieldAssignmentAccess().getValueExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TupleLiteralExpression__ExpressionsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleLiteralExpressionAccess().getExpressionsExpressionParserRuleCall_1_0()); }
	ruleExpression{ after(grammarAccess.getTupleLiteralExpressionAccess().getExpressionsExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TupleLiteralExpression__ExpressionsAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleLiteralExpressionAccess().getExpressionsExpressionParserRuleCall_2_1_0()); }
	ruleExpression{ after(grammarAccess.getTupleLiteralExpressionAccess().getExpressionsExpressionParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationLiteralExpression__ReferenceAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationLiteralExpressionAccess().getReferenceEnumerationLiteralDefinitionCrossReference_1_0()); }
(
{ before(grammarAccess.getEnumerationLiteralExpressionAccess().getReferenceEnumerationLiteralDefinitionIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getEnumerationLiteralExpressionAccess().getReferenceEnumerationLiteralDefinitionIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getEnumerationLiteralExpressionAccess().getReferenceEnumerationLiteralDefinitionCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BasicConstraintDefinition__ExpressionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBasicConstraintDefinitionAccess().getExpressionExpressionParserRuleCall_1_0()); }
	ruleExpression{ after(grammarAccess.getBasicConstraintDefinitionAccess().getExpressionExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_INT : 'INT has been deactivated';

RULE_STRING : 'STRING has been deactivated';

RULE_INTEGER : '-'? ('0'..'9')+;

RULE_DECIMAL : '-'? ('0'..'9')+ '.' ('0'..'9')+;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


