/**
 */
package TTMCHybrid.provider;

import TTMCHybrid.util.TTMCHybridAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class TTMCHybridItemProviderAdapterFactory extends TTMCHybridAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public TTMCHybridItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link TTMCHybrid.HybridSpecification} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HybridSpecificationItemProvider hybridSpecificationItemProvider;

	/**
	 * This creates an adapter for a {@link TTMCHybrid.HybridSpecification}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHybridSpecificationAdapter() {
		if (hybridSpecificationItemProvider == null) {
			hybridSpecificationItemProvider = new HybridSpecificationItemProvider(this);
		}

		return hybridSpecificationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TTMCHybrid.ClockTypeDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClockTypeDefinitionItemProvider clockTypeDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link TTMCHybrid.ClockTypeDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClockTypeDefinitionAdapter() {
		if (clockTypeDefinitionItemProvider == null) {
			clockTypeDefinitionItemProvider = new ClockTypeDefinitionItemProvider(this);
		}

		return clockTypeDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TTMCHybrid.DotExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DotExpressionItemProvider dotExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link TTMCHybrid.DotExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDotExpressionAdapter() {
		if (dotExpressionItemProvider == null) {
			dotExpressionItemProvider = new DotExpressionItemProvider(this);
		}

		return dotExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TTMCHybrid.LocationReferenceExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LocationReferenceExpressionItemProvider locationReferenceExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link TTMCHybrid.LocationReferenceExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLocationReferenceExpressionAdapter() {
		if (locationReferenceExpressionItemProvider == null) {
			locationReferenceExpressionItemProvider = new LocationReferenceExpressionItemProvider(this);
		}

		return locationReferenceExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TTMCHybrid.HybridAutomatonDeclaration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HybridAutomatonDeclarationItemProvider hybridAutomatonDeclarationItemProvider;

	/**
	 * This creates an adapter for a {@link TTMCHybrid.HybridAutomatonDeclaration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHybridAutomatonDeclarationAdapter() {
		if (hybridAutomatonDeclarationItemProvider == null) {
			hybridAutomatonDeclarationItemProvider = new HybridAutomatonDeclarationItemProvider(this);
		}

		return hybridAutomatonDeclarationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TTMCHybrid.HybridAutomatonReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HybridAutomatonReferenceItemProvider hybridAutomatonReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link TTMCHybrid.HybridAutomatonReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHybridAutomatonReferenceAdapter() {
		if (hybridAutomatonReferenceItemProvider == null) {
			hybridAutomatonReferenceItemProvider = new HybridAutomatonReferenceItemProvider(this);
		}

		return hybridAutomatonReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TTMCHybrid.HybridAutomatonDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HybridAutomatonDefinitionItemProvider hybridAutomatonDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link TTMCHybrid.HybridAutomatonDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHybridAutomatonDefinitionAdapter() {
		if (hybridAutomatonDefinitionItemProvider == null) {
			hybridAutomatonDefinitionItemProvider = new HybridAutomatonDefinitionItemProvider(this);
		}

		return hybridAutomatonDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TTMCHybrid.LocalVariableDeclaration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LocalVariableDeclarationItemProvider localVariableDeclarationItemProvider;

	/**
	 * This creates an adapter for a {@link TTMCHybrid.LocalVariableDeclaration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLocalVariableDeclarationAdapter() {
		if (localVariableDeclarationItemProvider == null) {
			localVariableDeclarationItemProvider = new LocalVariableDeclarationItemProvider(this);
		}

		return localVariableDeclarationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TTMCHybrid.GlobalVariableDeclaration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GlobalVariableDeclarationItemProvider globalVariableDeclarationItemProvider;

	/**
	 * This creates an adapter for a {@link TTMCHybrid.GlobalVariableDeclaration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGlobalVariableDeclarationAdapter() {
		if (globalVariableDeclarationItemProvider == null) {
			globalVariableDeclarationItemProvider = new GlobalVariableDeclarationItemProvider(this);
		}

		return globalVariableDeclarationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TTMCHybrid.Location} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LocationItemProvider locationItemProvider;

	/**
	 * This creates an adapter for a {@link TTMCHybrid.Location}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLocationAdapter() {
		if (locationItemProvider == null) {
			locationItemProvider = new LocationItemProvider(this);
		}

		return locationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TTMCHybrid.InitialCondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InitialConditionItemProvider initialConditionItemProvider;

	/**
	 * This creates an adapter for a {@link TTMCHybrid.InitialCondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInitialConditionAdapter() {
		if (initialConditionItemProvider == null) {
			initialConditionItemProvider = new InitialConditionItemProvider(this);
		}

		return initialConditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TTMCHybrid.InvariantCondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InvariantConditionItemProvider invariantConditionItemProvider;

	/**
	 * This creates an adapter for a {@link TTMCHybrid.InvariantCondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInvariantConditionAdapter() {
		if (invariantConditionItemProvider == null) {
			invariantConditionItemProvider = new InvariantConditionItemProvider(this);
		}

		return invariantConditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TTMCHybrid.FlowCondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FlowConditionItemProvider flowConditionItemProvider;

	/**
	 * This creates an adapter for a {@link TTMCHybrid.FlowCondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFlowConditionAdapter() {
		if (flowConditionItemProvider == null) {
			flowConditionItemProvider = new FlowConditionItemProvider(this);
		}

		return flowConditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TTMCHybrid.Transition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransitionItemProvider transitionItemProvider;

	/**
	 * This creates an adapter for a {@link TTMCHybrid.Transition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTransitionAdapter() {
		if (transitionItemProvider == null) {
			transitionItemProvider = new TransitionItemProvider(this);
		}

		return transitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TTMCHybrid.Assignment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AssignmentItemProvider assignmentItemProvider;

	/**
	 * This creates an adapter for a {@link TTMCHybrid.Assignment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAssignmentAdapter() {
		if (assignmentItemProvider == null) {
			assignmentItemProvider = new AssignmentItemProvider(this);
		}

		return assignmentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link TTMCHybrid.PropertyDeclaration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertyDeclarationItemProvider propertyDeclarationItemProvider;

	/**
	 * This creates an adapter for a {@link TTMCHybrid.PropertyDeclaration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropertyDeclarationAdapter() {
		if (propertyDeclarationItemProvider == null) {
			propertyDeclarationItemProvider = new PropertyDeclarationItemProvider(this);
		}

		return propertyDeclarationItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (hybridSpecificationItemProvider != null) hybridSpecificationItemProvider.dispose();
		if (clockTypeDefinitionItemProvider != null) clockTypeDefinitionItemProvider.dispose();
		if (dotExpressionItemProvider != null) dotExpressionItemProvider.dispose();
		if (locationReferenceExpressionItemProvider != null) locationReferenceExpressionItemProvider.dispose();
		if (hybridAutomatonDeclarationItemProvider != null) hybridAutomatonDeclarationItemProvider.dispose();
		if (hybridAutomatonReferenceItemProvider != null) hybridAutomatonReferenceItemProvider.dispose();
		if (hybridAutomatonDefinitionItemProvider != null) hybridAutomatonDefinitionItemProvider.dispose();
		if (localVariableDeclarationItemProvider != null) localVariableDeclarationItemProvider.dispose();
		if (globalVariableDeclarationItemProvider != null) globalVariableDeclarationItemProvider.dispose();
		if (locationItemProvider != null) locationItemProvider.dispose();
		if (initialConditionItemProvider != null) initialConditionItemProvider.dispose();
		if (invariantConditionItemProvider != null) invariantConditionItemProvider.dispose();
		if (flowConditionItemProvider != null) flowConditionItemProvider.dispose();
		if (transitionItemProvider != null) transitionItemProvider.dispose();
		if (assignmentItemProvider != null) assignmentItemProvider.dispose();
		if (propertyDeclarationItemProvider != null) propertyDeclarationItemProvider.dispose();
	}

}
